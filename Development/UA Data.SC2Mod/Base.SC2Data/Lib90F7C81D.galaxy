include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibE6C8C21C"

include "Lib90F7C81D_h"

//--------------------------------------------------------------------------------------------------
// Library: UAD Core
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib90F7C81D_InitLibraries () {
    libNtve_InitVariables();
    libHots_InitVariables();
    libE6C8C21C_InitVariables();
}

// Variable Initialization
bool lib90F7C81D_InitVariables_completed = false;

void lib90F7C81D_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (lib90F7C81D_InitVariables_completed) {
        return;
    }

    lib90F7C81D_InitVariables_completed = true;

    lib90F7C81D_gv_heroSelectorGroup = UnitGroupEmpty();
    lib90F7C81D_gv_heroesGroup = UnitGroupEmpty();
    lib90F7C81D_gv_undeadGroup = UnitGroupEmpty();
    lib90F7C81D_gv_rAGroup = UnitGroupEmpty();
    lib90F7C81D_gv_undeadTargetGroup = UnitGroupEmpty();
    lib90F7C81D_gv_players = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_heroskilledbyplayer[init_i] = UnitGroupEmpty();
    }
    lib90F7C81D_gv_mainObj = c_invalidObjectiveId;
    lib90F7C81D_gv_secondObj = c_invalidObjectiveId;
    lib90F7C81D_gv_thirdObj = c_invalidObjectiveId;
    lib90F7C81D_gv_fourthObj = c_invalidObjectiveId;
    lib90F7C81D_gv_optionalObj = c_invalidObjectiveId;
    lib90F7C81D_gv_simpleMissionItems = UnitGroupEmpty();
    lib90F7C81D_gv_missiontimer = TimerCreate();
    lib90F7C81D_gv_missiontimerwindow = c_timerWindowNone;
    lib90F7C81D_gv_missiontimer2 = TimerCreate();
    lib90F7C81D_gv_missiontimerwindow2 = c_timerWindowNone;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_magsused[init_i] = 1;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_playerdroppedammo[init_i] = UnitGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_bankData.lv_camoSelected[init_i1] = 1;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_bankData.lv_decalSelected[init_i1] = 1;
    }
    lib90F7C81D_gv_bankData.lv_bankValidationEnabled = true;
    lib90F7C81D_gv_bankData.lv_key1 = "";
    lib90F7C81D_gv_bankData.lv_key2 = "";
    lib90F7C81D_gv_weather.lv_weatherFrame = c_invalidDialogControlId;
    lib90F7C81D_gv_weatherEvent = c_invalidDialogControlId;
    lib90F7C81D_gv_pMC.lv_totalWeight = UserDataGetInt("PMCUnits", "All", "Weight Max", 1);
    lib90F7C81D_gv_pMC.lv_maxUnitType = 5;
    lib90F7C81D_gv_pMC.lv_idleAttackOrder = true;
    lib90F7C81D_gv_bossRushWaveDisplay = c_invalidDialogControlId;
    lib90F7C81D_gv_bossRushWaveLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_sFAAT.lv_police = UnitGroupEmpty();
    lib90F7C81D_gv_sFAAT.lv_localNationals = UnitGroupEmpty();
    lib90F7C81D_gv_sFAAT.lv_totalWeight = UserDataGetInt("LocalNationals", "Local Nationals", "Weight Max", 1);
    lib90F7C81D_gv_sFAAT.lv_lNMax = 6;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib90F7C81D_gv_sFAAT.lv_lNButtons[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_combatEngineer.lv_scrapRandomDelay = 120.0;
    lib90F7C81D_gv_combatEngineer.lv_scrapEngineerBayDelay = 240.0;
    lib90F7C81D_gv_minimapPingIndex = UnitGroupEmpty();
    lib90F7C81D_gv_missionItemPingItems = UnitGroupEmpty();
    lib90F7C81D_gv_weeklyModifier.lv_frame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        lib90F7C81D_gv_weeklyModifier.lv_icons[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_achievementPanel.lv_skinsPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 21; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_modelPanel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_achievementPanel.lv_decalIndex[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_achievementPanel.lv_camoIndex[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_achievementPanel.lv_pulldownCamo = c_invalidDialogControlId;
    lib90F7C81D_gv_achievementPanel.lv_pulldownDecal = c_invalidDialogControlId;
    lib90F7C81D_gv_achievementPanel.lv_camoLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_achievementPanel.lv_decalLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 65; init_i1 += 1) {
        lib90F7C81D_gv_achievementPanel.lv_decalList[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 65; init_i1 += 1) {
        lib90F7C81D_gv_achievementPanel.lv_camoList[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsIcon[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsName[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsDescription[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsEarned[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 13; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsMaxP[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 59; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_modeAchievements[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 59; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_modeAchievementsIcon[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 59; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_modeAchievementsName[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 59; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_modeAchievementsDescription[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 59; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_modeAchievementsEarned[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 59; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 59; init_j1 += 1) {
            lib90F7C81D_gv_achievementPanel.lv_modeAchievementsMaxP[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        lib90F7C81D_gv_achievementPanel.lv_medal[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_achievementBadge.lv_flashFrame = c_invalidDialogControlId;
    lib90F7C81D_gv_achievementBadge.lv_iconImage = c_invalidDialogControlId;
    lib90F7C81D_gv_achievementBadge.lv_nameLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_achievementBadge.lv_descriptionLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_achievementBadge.lv_earnedLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_editBox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        lib90F7C81D_gv_gameplay.lv_option[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_gameplay.lv_cameraShake[init_i1] = true;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_gameplay.lv_tacticalSprint[init_i1] = true;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_gameplay.lv_vitalsLabel[init_i1] = true;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_gameplay.lv_submenuHotkey[init_i1] = "B";
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_gameplay.lv_segmentedBar[init_i1] = true;
    }
    lib90F7C81D_gv_gameplay.lv_gameUI = c_invalidDialogControlId;
    lib90F7C81D_gv_ammoBar.lv_roundsLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_ammoBar.lv_magazineLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_ammoBar.lv_reloadSpeedLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_cutscene.lv_stasisWeb = c_invalidDialogControlId;
    lib90F7C81D_gv_bossBar = c_invalidDialogControlId;
    lib90F7C81D_gv_bossBarTitle = c_invalidDialogControlId;
    lib90F7C81D_gv_bsod = c_invalidDialogControlId;
    lib90F7C81D_gv_cameraButton = c_invalidDialogControlId;
    lib90F7C81D_gv_chatBarAnchor = c_invalidDialogControlId;
    lib90F7C81D_gv_commandCard.lv_commandCardPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_commandCard.lv_selfCastCC[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_commandCard.lv_selfCastFrame[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_commandCard.lv_aCH = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_commandCard.lv_cCGroup[init_i1] = UnitGroupEmpty();
    }
    lib90F7C81D_gv_commandCard.lv_uiIndex = c_invalidDialogControlId;
    lib90F7C81D_gv_commandCard.lv_unitIndexLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_sU_Container = c_invalidDialogControlId;
    lib90F7C81D_gv_lS_Container = c_invalidDialogControlId;
    lib90F7C81D_gv_dC_Container = c_invalidDialogControlId;
    lib90F7C81D_gv_sD_Container = c_invalidDialogControlId;
    lib90F7C81D_gv_backgroundMain = c_invalidDialogControlId;
    lib90F7C81D_gv_learnSkillsButton = c_invalidDialogControlId;
    lib90F7C81D_gv_skillUpgradesButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_learnSkillsLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_skillUpgradesLabel[init_i] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_fireteam.lv_alphaButton = c_invalidDialogControlId;
    lib90F7C81D_gv_fireteam.lv_deltaButton = c_invalidDialogControlId;
    lib90F7C81D_gv_fireteam.lv_echoButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib90F7C81D_gv_fireteam.lv_alphaSlot[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib90F7C81D_gv_fireteam.lv_deltaSlot[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib90F7C81D_gv_fireteam.lv_echoSlot[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_fireteam.lv_alpha = PlayerGroupEmpty();
    lib90F7C81D_gv_fireteam.lv_delta = PlayerGroupEmpty();
    lib90F7C81D_gv_fireteam.lv_echo = PlayerGroupEmpty();
    lib90F7C81D_gv_graph.lv_frame = c_invalidDialogControlId;
    lib90F7C81D_gv_fPS.lv_editBox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_fPS.lv_framerateLabel[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_fPS.lv_framerateInterval = 3.0;
    lib90F7C81D_gv_fPS.lv_fPSToggled = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_inventory.lv_inventorySlotMax[init_i1] = 8;
    }
    lib90F7C81D_gv_inventory.lv_inventoryButton = c_invalidDialogControlId;
    lib90F7C81D_gv_inventory.lv_inventoryType = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        lib90F7C81D_gv_inventory.lv_bandolierSlots[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_inventory.lv_hotkey_panel = c_invalidDialogControlId;
    lib90F7C81D_gv_inventory.lv_item_eb = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_inventory.lv_hotkey_group[init_i1] = UnitGroupEmpty();
    }
    lib90F7C81D_gv_messageFrame.lv_directive = c_invalidDialogControlId;
    lib90F7C81D_gv_messageFrame.lv_objective = c_invalidDialogControlId;
    lib90F7C81D_gv_messageFrame.lv_debug = c_invalidDialogControlId;
    lib90F7C81D_gv_movie_Player.lv_movie_Frame = c_invalidDialogControlId;
    lib90F7C81D_gv_movie_Player.lv_movie_Player = c_invalidDialogControlId;
    lib90F7C81D_gv_minimap = c_invalidDialogControlId;
    lib90F7C81D_gv_pingDeadHeros = c_invalidDialogControlId;
    lib90F7C81D_gv_deadHeroLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_NewPlayerDeath = c_invalidDialogControlId;
    lib90F7C81D_gv_infestationPanel = c_invalidDialogControlId;
    lib90F7C81D_gv_infestationLevel = c_invalidDialogControlId;
    lib90F7C81D_gv_mutationPanel = c_invalidDialogControlId;
    lib90F7C81D_gv_mutationLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib90F7C81D_gv_pingResetTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib90F7C81D_gv_pingSuppressionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib90F7C81D_gv_pingLockoutTimer[init_i] = TimerCreate();
    }
    lib90F7C81D_gv_pingValidPlayers = PlayerGroupEmpty();
    lib90F7C81D_gv_pingPanelMinimapButton = c_invalidDialogControlId;
    lib90F7C81D_gv_uIicon = c_invalidDialogControlId;
    lib90F7C81D_gv_visorTextDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_visorText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_visorTextTimer[init_i] = TimerCreate();
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        lib90F7C81D_gv_spinner.lv_label[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_spinner.lv_frame = c_invalidDialogControlId;
    lib90F7C81D_gv_timeOfDay.lv_timeOfDayLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_timeOfDay.lv_currentLighting = "UADDay";
    lib90F7C81D_gv_tipPanel.lv_tipDragPanel = c_invalidDialogControlId;
    lib90F7C81D_gv_tipPanel.lv_tipPanel = c_invalidDialogControlId;
    lib90F7C81D_gv_tipPanel.lv_tipCurrent = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_tipPanel.lv_tipNumber[init_i1] = 1;
    }
    lib90F7C81D_gv_tipPanel.lv_nextButton = c_invalidDialogControlId;
    lib90F7C81D_gv_tipPanel.lv_previousButton = c_invalidDialogControlId;
    lib90F7C81D_gv_tipPanel.lv_tipEditBox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_tipPanel.lv_tipLoc[init_i1] = "";
    }
    lib90F7C81D_gv_heroPanel.lv_editBox = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_heroPanel.lv_speedCurrent[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_heroPanel.lv_unitTags[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_scoreScreenPlayers = PlayerGroupEmpty();
    lib90F7C81D_gv_quitButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_savingAllowed[init_i] = true;
    }
    lib90F7C81D_gv_gameMode_C = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_careerWins_PB[init_i] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_gameMode_Img = c_invalidDialogControlId;
    lib90F7C81D_gv_sTATS.lv_hUDButton = c_invalidDialogControlId;
    lib90F7C81D_gv_sTATS.lv_hUDKillButton = c_invalidDialogControlId;
    lib90F7C81D_gv_sTATS.lv_hUD = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Image[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Border[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_MOS_Label[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Name_Label[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Kills[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Hits[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Deaths[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Damage_Dealt[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Damage_Taken[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Revive_Points[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Movement_Speed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Magazines[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_RoundsUsed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Status[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_MOSStatus[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_MKills[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Heals[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Timer[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_PMC_Label[init_i1] = c_invalidDialogControlId;
    }
    lib90F7C81D_gv_sDFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_sDPlayerFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_sDPingPlayerButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_sDPlayerImageFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_sDPlayerFrameBorder[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_sDPlayerNameFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_sDPlayerUnitStatusFrame[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            lib90F7C81D_gv_sDPlayerAilmentImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_sDTimer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            lib90F7C81D_gv_sDPlayerInventorySlot[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_revive_Bar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_revive_Counter_Label[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lib90F7C81D_gv_reviveCountdown_Label[init_i] = 30;
    }
    lib90F7C81D_gv_voteKick.lv_editBox = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_voteKickFrame = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_voteMenuFrame = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_voteMenuTitle = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_yesButton = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_noButton = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_vKB = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_yesLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_noLabel = c_invalidDialogControlId;
    lib90F7C81D_gv_voteKick.lv_voteTimer = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        lib90F7C81D_gv_voteKick.lv_cooldown[init_i1] = 15.0;
    }
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Bootstrap
//--------------------------------------------------------------------------------------------------
include "Scripts/Includes.galaxy"

void lib90F7C81D_InitCustomScript () {
    Core();
}

// Presets
string lib90F7C81D_ge_WeatherType_Ident (string lp_val) {
         if (lp_val == "Fog") { return "Fog"; }
    else if (lp_val == "ThunderStorm") { return "Thunderstorm"; }
    else if (lp_val == "RainStorm") { return "Rainstorm"; }
    else if (lp_val == "Snow") { return "Snow"; }
    else if (lp_val == "RandomWeather") { return "RandomWeather"; }
    else if (lp_val == "Cloudy") { return "Cloudy"; }
    else if (lp_val == "Tornadoes") { return "Tornadoes"; }
    else if (lp_val == "IntenseSunlight") { return "IntenseSunlight"; }
    else if (lp_val == "BloodMoon") { return "BloodMoon"; }
    else if (lp_val == "Clear") { return "Clear"; }
    return null;
}

string lib90F7C81D_ge_Difficulty_Ident (int lp_val) {
         if (lp_val == 1) { return "Recruit"; }
    else if (lp_val == 2) { return "Normal"; }
    else if (lp_val == 3) { return "Hard"; }
    else if (lp_val == 4) { return "Insane"; }
    else if (lp_val == 5) { return "Nightmare"; }
    else if (lp_val == 6) { return "Survival"; }
    else if (lp_val == 7) { return "MissionSurvival"; }
    else if (lp_val == 8) { return "BossRush"; }
    else if (lp_val == 9) { return "PMC"; }
    else if (lp_val == 10) { return "Sandbox"; }
    else if (lp_val == 11) { return "Deathmatch"; }
    return null;
}

string lib90F7C81D_ge_GameMode_Ident (int lp_val) {
         if (lp_val == 1) { return "Campaign"; }
    else if (lp_val == 6) { return "Survival"; }
    else if (lp_val == 7) { return "MissionSurvival"; }
    else if (lp_val == 8) { return "BossRush"; }
    else if (lp_val == 9) { return "PMC"; }
    else if (lp_val == 10) { return "Sandbox"; }
    else if (lp_val == 11) { return "Deathmatch"; }
    else if (lp_val == 12) { return "WeeklyModfiers"; }
    return null;
}

string lib90F7C81D_ge_UndeadSpawnLoopEvent_Ident (string lp_val) {
         if (lp_val == "PlagueSpawns") { return "PlagueSpawns"; }
    else if (lp_val == "Campaign") { return "Campaign"; }
    else if (lp_val == "Main") { return "Main"; }
    else if (lp_val == "T3") { return "T3"; }
    else if (lp_val == "T2") { return "T2"; }
    else if (lp_val == "T1") { return "T1"; }
    else if (lp_val == "Sanies") { return "Sanies"; }
    else if (lp_val == "BossRush") { return "BossRush"; }
    else if (lp_val == "TCPContainment") { return "TCPContainment"; }
    else if (lp_val == "CampaignRA") { return "CampaignRA"; }
    return null;
}

string lib90F7C81D_ge_WeaponsItems_Ident (string lp_val) {
         if (lp_val == "Weapons&Items_1") { return "WeaponsItems1"; }
    else if (lp_val == "Weapons&Items_2") { return "WeaponsItems2"; }
    return null;
}

string lib90F7C81D_ge_GeneralEvent_Ident (string lp_val) {
         if (lp_val == "ModeControl") { return "ModeControl"; }
    else if (lp_val == "AutoPick") { return "AutoPick"; }
    else if (lp_val == "SetupCacheSites") { return "SetupCacheSites"; }
    else if (lp_val == "ScaleDifficulty") { return "ScaleDifficulty"; }
    else if (lp_val == "UpdateStats") { return "UpdateStats"; }
    else if (lp_val == "GameOver") { return "GameOver"; }
    else if (lp_val == "TimeOfDayClock") { return "TimeOfDayClock"; }
    else if (lp_val == "ScoreScreenXPCard") { return "ScoreScreenXPCard"; }
    else if (lp_val == "InitializeAchievements") { return "InitializeAchievements"; }
    else if (lp_val == "SaveTipPanel") { return "SaveTipPanel"; }
    else if (lp_val == "MOSAchievementsUpdate") { return "MOSAchievementsUpdate"; }
    else if (lp_val == "MOSAchievementEarned") { return "MOSAchievementEarned"; }
    else if (lp_val == "MSThreadStart") { return "MSThreadStart"; }
    return null;
}

string lib90F7C81D_ge_CampaignMissionEvent_Ident (string lp_val) {
         if (lp_val == "TestMode") { return "TestMode"; }
    else if (lp_val == "Prologue.Mission00") { return "PrologueMission0"; }
    else if (lp_val == "Prologue.Mission01") { return "PrologueMission1"; }
    else if (lp_val == "Prologue.Mission02") { return "PrologueMission2"; }
    else if (lp_val == "Prologue.Mission03") { return "PrologueMission3"; }
    else if (lp_val == "Prologue.Mission04") { return "PrologueMission4"; }
    else if (lp_val == "Prologue.Mission05") { return "PrologueMission5"; }
    else if (lp_val == "Prologue.Mission06") { return "PrologueMission6"; }
    else if (lp_val == "Chapter-1.Mission1") { return "Chapter1Mission1"; }
    else if (lp_val == "Chapter-1.Mission2") { return "Chapter1Mission2"; }
    else if (lp_val == "Chapter-1.Mission3") { return "Chapter1Mission3"; }
    else if (lp_val == "Chapter-1.Mission4") { return "Chapter1Mission4"; }
    else if (lp_val == "Chapter-1.Mission5") { return "Chapter1Mission5"; }
    else if (lp_val == "Chapter-2.Mission1") { return "Chapter2Mission1"; }
    else if (lp_val == "Chapter-2.Mission2") { return "Chapter2Mission2"; }
    else if (lp_val == "Chapter-2.Mission3") { return "Chapter2Mission3"; }
    else if (lp_val == "Chapter-2.Mission4") { return "Chapter2Mission4"; }
    else if (lp_val == "Chapter-2.Mission5") { return "Chapter2Mission5"; }
    else if (lp_val == "Chapter-2.Mission6") { return "Chapter2Mission6"; }
    else if (lp_val == "Chapter-2.Mission7") { return "Chapter2Mission7"; }
    else if (lp_val == "Chapter-3.Mission1") { return "Chapter3Mission1"; }
    else if (lp_val == "Chapter-3.Mission2") { return "Chapter3Mission2"; }
    else if (lp_val == "Chapter-3.Mission3") { return "Chapter3Mission3"; }
    else if (lp_val == "Chapter-3.Mission4") { return "Chapter3Mission4"; }
    else if (lp_val == "Chapter-3.Mission5") { return "Chapter3Mission5"; }
    else if (lp_val == "Chapter-3.Mission6") { return "Chapter3Mission6"; }
    else if (lp_val == "Chapter-3.Mission7") { return "Chapter3Mission7"; }
    return null;
}

string lib90F7C81D_ge_SurvivalTimeEvent_Ident (string lp_val) {
         if (lp_val == "_3Min") { return "_3Min"; }
    else if (lp_val == "_6Min") { return "_6Min"; }
    else if (lp_val == "_9Min") { return "_9Min"; }
    else if (lp_val == "_12Min") { return "_12Min"; }
    else if (lp_val == "_15Min") { return "_15Min"; }
    else if (lp_val == "_18Min") { return "_18Min"; }
    else if (lp_val == "_21Min") { return "_21Min"; }
    else if (lp_val == "_24Min") { return "_24Min"; }
    else if (lp_val == "_27Min") { return "_27Min"; }
    else if (lp_val == "_30Min") { return "_30Min"; }
    else if (lp_val == "_35Min") { return "_35Min"; }
    else if (lp_val == "Civilians") { return "Civilians"; }
    return null;
}

string lib90F7C81D_ge_WeaponValue_Ident (int lp_val) {
         if (lp_val == 56) { return "HK42"; }
    else if (lp_val == 57) { return "SOFAR"; }
    else if (lp_val == 58) { return "M41"; }
    else if (lp_val == 59) { return "StynerBR2"; }
    else if (lp_val == 60) { return "M5MAR"; }
    else if (lp_val == 61) { return "USMCR"; }
    else if (lp_val == 62) { return "W1200"; }
    else if (lp_val == 63) { return "M241"; }
    else if (lp_val == 54) { return "Mk14"; }
    else if (lp_val == 55) { return "M92Torrent"; }
    else if (lp_val == 53) { return "M9Flamethrower"; }
    else if (lp_val == 52) { return "M1014"; }
    else if (lp_val == 51) { return "IPR"; }
    else if (lp_val == 50) { return "M935Minigun"; }
    else if (lp_val == 49) { return "DeathMachine"; }
    else if (lp_val == 48) { return "XR42"; }
    return null;
}

string lib90F7C81D_ge_Modifier_Ident (int lp_val) {
         if (lp_val == 1) { return "SpeedFreaks"; }
    else if (lp_val == 2) { return "WeMoveUnseen"; }
    else if (lp_val == 3) { return "HardenedWill"; }
    else if (lp_val == 4) { return "BananaSoldiersAmmoShortage"; }
    else if (lp_val == 5) { return "GoingDark"; }
    else if (lp_val == 6) { return "RaceAgainstTimeBarrier"; }
    else if (lp_val == 7) { return "InclementWeatherRifle"; }
    else if (lp_val == 8) { return "ToughAsNails1Life"; }
    else if (lp_val == 9) { return "Tier1"; }
    return null;
}

string lib90F7C81D_ge_MOSAchievementIndex_Ident (int lp_val) {
         if (lp_val == 0) { return "RiflemanACH1"; }
    else if (lp_val == 1) { return "RiflemanACH2"; }
    else if (lp_val == 2) { return "RiflemanACH3"; }
    else if (lp_val == 3) { return "RiflemanACH4"; }
    else if (lp_val == 4) { return "CombatMedicACH1"; }
    else if (lp_val == 5) { return "CombatMedicACH2"; }
    else if (lp_val == 6) { return "CombatMedicACH3"; }
    else if (lp_val == 7) { return "CombatMedicACH4"; }
    else if (lp_val == 8) { return "AutomaticRiflemanACH1"; }
    else if (lp_val == 9) { return "AutomaticRiflemanACH2"; }
    else if (lp_val == 10) { return "AutomaticRiflemanACH3"; }
    else if (lp_val == 11) { return "AutomaticRiflemanACH4"; }
    else if (lp_val == 12) { return "CavalryScoutACH1"; }
    else if (lp_val == 13) { return "CavalryScoutACH2"; }
    else if (lp_val == 14) { return "CavalryScoutACH3"; }
    else if (lp_val == 15) { return "CavalryScoutACH4"; }
    else if (lp_val == 16) { return "SFAATACH1"; }
    else if (lp_val == 17) { return "SFAATACH2"; }
    else if (lp_val == 18) { return "SFAATACH3"; }
    else if (lp_val == 19) { return "SFAATACH4"; }
    else if (lp_val == 20) { return "JavelinGunnerACH1"; }
    else if (lp_val == 21) { return "JavelinGunnerACH2"; }
    else if (lp_val == 22) { return "JavelinGunnerACH3"; }
    else if (lp_val == 23) { return "JavelinGunnerACH4"; }
    else if (lp_val == 24) { return "SDMACH1"; }
    else if (lp_val == 25) { return "SDMACH2"; }
    else if (lp_val == 26) { return "SDMACH3"; }
    else if (lp_val == 27) { return "SDMACH4"; }
    else if (lp_val == 28) { return "PlatoonLeaderACH1"; }
    else if (lp_val == 29) { return "PlatoonLeaderACH2"; }
    else if (lp_val == 30) { return "PlatoonLeaderACH3"; }
    else if (lp_val == 31) { return "PlatoonLeaderACH4"; }
    else if (lp_val == 32) { return "FlamethrowerACH1"; }
    else if (lp_val == 33) { return "FlamethrowerACH2"; }
    else if (lp_val == 34) { return "FlamethrowerACH3"; }
    else if (lp_val == 35) { return "FlamethrowerACH4"; }
    else if (lp_val == 36) { return "CombatEngineerACH1"; }
    else if (lp_val == 37) { return "CombatEngineerACH2"; }
    else if (lp_val == 38) { return "CombatEngineerACH3"; }
    else if (lp_val == 39) { return "CombatEngineerACH4"; }
    else if (lp_val == 40) { return "CyborgACH1"; }
    else if (lp_val == 41) { return "CyborgACH2"; }
    else if (lp_val == 42) { return "CyborgACH3"; }
    else if (lp_val == 43) { return "CyborgACH4"; }
    else if (lp_val == 44) { return "GhostACH1"; }
    else if (lp_val == 45) { return "GhostACH2"; }
    else if (lp_val == 46) { return "GhostACH3"; }
    else if (lp_val == 47) { return "GhostACH4"; }
    else if (lp_val == 74) { return "ConcentratedFire"; }
    else if (lp_val == 75) { return "JackOfAllTrades"; }
    else if (lp_val == 76) { return "PullThePin"; }
    else if (lp_val == 77) { return "NotEnoughEnergy"; }
    else if (lp_val == 78) { return "NoOneLeftBehind"; }
    else if (lp_val == 79) { return "BigPharma"; }
    else if (lp_val == 80) { return "Intern"; }
    else if (lp_val == 81) { return "CombatMedic"; }
    else if (lp_val == 82) { return "FullAutoPlease"; }
    else if (lp_val == 83) { return "PointOfImpact"; }
    else if (lp_val == 84) { return "WeaponsHot"; }
    else if (lp_val == 85) { return "BattleReady"; }
    else if (lp_val == 86) { return "BoobyTrap"; }
    else if (lp_val == 87) { return "EyeSeeYou"; }
    else if (lp_val == 88) { return "TargetLockedIn"; }
    else if (lp_val == 89) { return "FullStock"; }
    else if (lp_val == 90) { return "TwoOfAKind"; }
    else if (lp_val == 91) { return "HeavyHitter"; }
    else if (lp_val == 92) { return "LNKombat"; }
    else if (lp_val == 93) { return "DefenseBudget"; }
    else if (lp_val == 94) { return "Rocketeer"; }
    else if (lp_val == 95) { return "TeamWork"; }
    else if (lp_val == 96) { return "FinishHim"; }
    else if (lp_val == 97) { return "DemolitionMan"; }
    else if (lp_val == 98) { return "Maelstrom"; }
    else if (lp_val == 99) { return "SmokeEm"; }
    else if (lp_val == 100) { return "Supersoldier"; }
    else if (lp_val == 101) { return "FeeltheForce"; }
    else if (lp_val == 102) { return "CombatOrders"; }
    else if (lp_val == 103) { return "Omnipotent"; }
    else if (lp_val == 104) { return "DeathFromAbove"; }
    else if (lp_val == 105) { return "Grenadier"; }
    else if (lp_val == 106) { return "WildfireHarvest"; }
    else if (lp_val == 107) { return "NoPainNoGain"; }
    else if (lp_val == 108) { return "HeavyWeight"; }
    else if (lp_val == 109) { return "LetItBurn"; }
    else if (lp_val == 110) { return "JunkYard"; }
    else if (lp_val == 111) { return "AssembleThis"; }
    else if (lp_val == 112) { return "RageAgainstTheMachine"; }
    else if (lp_val == 113) { return "_121Jigawatts"; }
    else if (lp_val == 114) { return "Robocrap"; }
    else if (lp_val == 115) { return "DazedandConfused"; }
    else if (lp_val == 116) { return "LeadtoLife"; }
    else if (lp_val == 117) { return "Escapist"; }
    else if (lp_val == 118) { return "ShyGuy"; }
    else if (lp_val == 119) { return "SubZero"; }
    else if (lp_val == 120) { return "NowYouSeeMeNowYouDontt"; }
    else if (lp_val == 121) { return "FindersKeepers"; }
    return null;
}

string lib90F7C81D_ge_CampaignAchievements_Ident (int lp_val) {
         if (lp_val == 53) { return "SpeedRacer"; }
    else if (lp_val == 54) { return "IronDefender"; }
    else if (lp_val == 55) { return "SafelyGathered"; }
    else if (lp_val == 56) { return "LockedDownTight"; }
    else if (lp_val == 57) { return "PrologueCompletionist"; }
    else if (lp_val == 58) { return "MrFixIt"; }
    else if (lp_val == 59) { return "AkmasRevenge"; }
    else if (lp_val == 60) { return "MassRecall"; }
    else if (lp_val == 61) { return "Arachnophobia"; }
    else if (lp_val == 62) { return "LurkingFearCompletionist"; }
    else if (lp_val == 63) { return "Saber6"; }
    else if (lp_val == 64) { return "PestControl"; }
    else if (lp_val == 65) { return "SearchRescue"; }
    else if (lp_val == 66) { return "ApexPredator"; }
    else if (lp_val == 67) { return "ShatteredCompletionist"; }
    else if (lp_val == 68) { return "WartimeProduction"; }
    else if (lp_val == 69) { return "DivideConquer"; }
    else if (lp_val == 70) { return "EndOfTime"; }
    else if (lp_val == 71) { return "ReleaseTheKracken"; }
    else if (lp_val == 72) { return "RevelationsCompletionist"; }
    return null;
}

// Functions
void lib90F7C81D_gf_WeatherEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_ge_WeatherType_Ident(lp_event));
}

trigger auto_lib90F7C81D_gf_RunWeatherEvent_Trigger = null;
string auto_lib90F7C81D_gf_RunWeatherEvent_lp_event;

void lib90F7C81D_gf_RunWeatherEvent (string lp_event) {
    auto_lib90F7C81D_gf_RunWeatherEvent_lp_event = lp_event;

    if (auto_lib90F7C81D_gf_RunWeatherEvent_Trigger == null) {
        auto_lib90F7C81D_gf_RunWeatherEvent_Trigger = TriggerCreate("auto_lib90F7C81D_gf_RunWeatherEvent_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_RunWeatherEvent_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_RunWeatherEvent_TriggerFunc (bool testConds, bool runActions) {
    string lp_event = auto_lib90F7C81D_gf_RunWeatherEvent_lp_event;

    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == false)) {
        TriggerSendEvent(lib90F7C81D_ge_WeatherType_Ident(lp_event));
    }
    return true;
}

void lib90F7C81D_gf_BlendFog (fixed lp_colorR, fixed lp_colorG, fixed lp_colorB, fixed lp_density, fixed lp_falloff, fixed lp_start, fixed lp_blendtime) {
    // Automatic Variable Declarations
    // Implementation
    FogSetColorOverTime(Color(lp_colorR, lp_colorG, lp_colorB), lp_blendtime);
    FogSetDensityOverTime(lp_density, lp_blendtime);
    FogSetFallOffOverTime(lp_falloff, lp_blendtime);
    FogSetStartHeightOverTime(lp_start, lp_blendtime);
}

void lib90F7C81D_gf_BlendWeather (fixed lp_r, fixed lp_g, fixed lp_b, string lp_weatherActor, fixed lp_spacing, region lp_region, fixed lp_variance) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = PointGetX(RegionGetBoundsMin(lp_region));
    lv_y = PointGetY(RegionGetBoundsMin(lp_region));

    // Implementation
    lib90F7C81D_gv_weather.lv_actorListTypeIndex += 1;
    while (true) {
        if ((lib90F7C81D_gv_weather.lv_weatherSwitch == true)) {
            break;
        }
        Wait(0.0125, c_timeGame);
        if ((lv_x < libNtve_gf_WidthOfRegion(lp_region))) {
            if ((lp_variance > 0.0)) {
                libNtve_gf_CreateActorAtPoint(lp_weatherActor, RegionRandomPoint(RegionCircle(Point(lv_x, lv_y), lp_variance)));
            }
            else {
                libNtve_gf_CreateActorAtPoint(lp_weatherActor, Point(lv_x, lv_y));
            }
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(lp_r, lp_g, lp_b), 1.0, 0.0));
            lib90F7C81D_gv_weather.lv_actorList[lib90F7C81D_gv_weather.lv_actorListTypeIndex][lib90F7C81D_gv_weather.lv_actorListIndex] = libNtve_gf_ActorLastCreated();
            lib90F7C81D_gv_weather.lv_actorListIndex += 1;
            lv_x += lp_spacing;
        }
        else {
            if ((lv_y < libNtve_gf_HeightOfRegion(lp_region))) {
                lv_x = PointGetX(RegionGetBoundsMin(lp_region));
                lv_y += lp_spacing;
            }
            else {
                lib90F7C81D_gv_weather.lv_actorListIndex -= 1;
                break;
            }
        }
    }
}

void lib90F7C81D_gf_UnblendWeather () {
    // Variable Declarations
    int lv_i;
    int lv_i2;

    // Automatic Variable Declarations
    int auto74719EA9_ae;
    const int auto74719EA9_ai = 1;
    int auto784764ED_ae;
    const int auto784764ED_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlSetAnimationState(lib90F7C81D_gv_weather.lv_weatherFrame, PlayerGroupAll(), "Weather", "Clear");
    auto74719EA9_ae = lib90F7C81D_gv_weather.lv_actorListTypeIndex;
    lv_i2 = 0;
    for ( ; ( (auto74719EA9_ai >= 0 && lv_i2 <= auto74719EA9_ae) || (auto74719EA9_ai < 0 && lv_i2 >= auto74719EA9_ae) ) ; lv_i2 += auto74719EA9_ai ) {
        auto784764ED_ae = lib90F7C81D_gv_weather.lv_actorListIndex;
        lv_i = 0;
        for ( ; ( (auto784764ED_ai >= 0 && lv_i <= auto784764ED_ae) || (auto784764ED_ai < 0 && lv_i >= auto784764ED_ae) ) ; lv_i += auto784764ED_ai ) {
            ActorSend(lib90F7C81D_gv_weather.lv_actorList[lv_i2][lv_i], "Destroy");
        }
    }
    lib90F7C81D_gv_weather.lv_actorListIndex = 0;
    lib90F7C81D_gv_weather.lv_actorListTypeIndex = 0;
    if ((lib90F7C81D_gv_weather.lv_weatherSwitch == true)) {
        lib90F7C81D_gv_weather.lv_weatherSwitch = false;
    }
}

void lib90F7C81D_gf_ResetWeatherIcon () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Clear");
    DialogControlSendAnimationEvent(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Flash");
}

bool lib90F7C81D_gf_WeatherType () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_weather.lv_fogEvent == true)) {
        return lib90F7C81D_gv_weather.lv_fogEvent;
    }
    else if ((lib90F7C81D_gv_weather.lv_rainstormEvent == true)) {
        return lib90F7C81D_gv_weather.lv_rainstormEvent;
    }
    else if ((lib90F7C81D_gv_weather.lv_snowEvent == true)) {
        return lib90F7C81D_gv_weather.lv_snowEvent;
    }
    else if ((lib90F7C81D_gv_weather.lv_cloudyEvent == true)) {
        return lib90F7C81D_gv_weather.lv_cloudyEvent;
    }
    else if ((lib90F7C81D_gv_weather.lv_intenseSunlightEvent == true)) {
        return lib90F7C81D_gv_weather.lv_intenseSunlightEvent;
    }
    else if ((lib90F7C81D_gv_weather.lv_bloodMoonEvent == true)) {
        return lib90F7C81D_gv_weather.lv_bloodMoonEvent;
    }
    return lib90F7C81D_gv_weather.lv_clearEvent;
}

void lib90F7C81D_gf_DebugWeatherEvent (string lp_weatherType) {
    // Automatic Variable Declarations
    bool auto060FBAE9_val;
    playergroup autoC6677147_g;
    int autoC6677147_var;
    playergroup auto41E2CA62_g;
    int auto41E2CA62_var;
    playergroup auto74104E4D_g;
    int auto74104E4D_var;
    playergroup auto3F8C914B_g;
    int auto3F8C914B_var;
    playergroup auto39BACA6F_g;
    int auto39BACA6F_var;
    playergroup autoC126CEB8_g;
    int autoC126CEB8_var;
    playergroup autoBE1190CE_g;
    int autoBE1190CE_var;
    playergroup auto2DD4AD57_g;
    int auto2DD4AD57_var;
    playergroup auto25AEC428_g;
    int auto25AEC428_var;
    playergroup auto937556EF_g;
    int auto937556EF_var;
    playergroup autoE55606CB_g;
    int autoE55606CB_var;
    playergroup auto102A727F_g;
    int auto102A727F_var;
    playergroup auto81B93829_g;
    int auto81B93829_var;
    playergroup autoD060FC93_g;
    int autoD060FC93_var;

    // Implementation
    while (lib90F7C81D_gv_weather.lv_weatherQueue) {
        Wait(1.0, c_timeGame);
    }
    lib90F7C81D_gv_weather.lv_weatherQueue = true;
    if ((lib90F7C81D_gv_weather.lv_weatherEventOn == true)) {
        lib90F7C81D_gv_weather.lv_weatherEventOn = false;
        lib90F7C81D_gf_ResetWeatherIcon();
        lib90F7C81D_gf_UnblendWeather();
        auto060FBAE9_val = lib90F7C81D_gf_WeatherType();
        if (auto060FBAE9_val == lib90F7C81D_gv_weather.lv_fogEvent) {
            lib90F7C81D_gv_weather.lv_fogEvent = false;
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_898E931F"));
            lib90F7C81D_gf_BlendFog(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 2.0);
            autoC6677147_g = PlayerGroupAll();
            autoC6677147_var = -1;
            while (true) {
                autoC6677147_var = PlayerGroupNextPlayer(autoC6677147_g, autoC6677147_var);
                if (autoC6677147_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(autoC6677147_var, "WeatherEffectFog", 0);
            }
        }
        else if (auto060FBAE9_val == lib90F7C81D_gv_weather.lv_snowEvent) {
            lib90F7C81D_gv_weather.lv_snowEvent = false;
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_830EEDBF"));
            auto41E2CA62_g = PlayerGroupAll();
            auto41E2CA62_var = -1;
            while (true) {
                auto41E2CA62_var = PlayerGroupNextPlayer(auto41E2CA62_g, auto41E2CA62_var);
                if (auto41E2CA62_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(auto41E2CA62_var, "WeatherEffectSnow", 0);
            }
        }
        else if (auto060FBAE9_val == lib90F7C81D_gv_weather.lv_rainstormEvent) {
            lib90F7C81D_gv_weather.lv_rainstormEvent = false;
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_0C90E171"));
            auto74104E4D_g = PlayerGroupAll();
            auto74104E4D_var = -1;
            while (true) {
                auto74104E4D_var = PlayerGroupNextPlayer(auto74104E4D_g, auto74104E4D_var);
                if (auto74104E4D_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(auto74104E4D_var, "WeatherEffectRainstorm", 0);
            }
            auto3F8C914B_g = lib90F7C81D_gv_players;
            auto3F8C914B_var = -1;
            while (true) {
                auto3F8C914B_var = PlayerGroupNextPlayer(auto3F8C914B_g, auto3F8C914B_var);
                if (auto3F8C914B_var < 0) { break; }
                lib90F7C81D_gv_reloadbasetime[auto3F8C914B_var] /= 1.25;
                lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[auto3F8C914B_var]);
            }
        }
        else if (auto060FBAE9_val == lib90F7C81D_gv_weather.lv_cloudyEvent) {
            lib90F7C81D_gv_weather.lv_cloudyEvent = false;
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_109C1EC8"));
            auto39BACA6F_g = PlayerGroupAll();
            auto39BACA6F_var = -1;
            while (true) {
                auto39BACA6F_var = PlayerGroupNextPlayer(auto39BACA6F_g, auto39BACA6F_var);
                if (auto39BACA6F_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(auto39BACA6F_var, "WeatherEffectCloudy", 0);
            }
        }
        else if (auto060FBAE9_val == lib90F7C81D_gv_weather.lv_intenseSunlightEvent) {
            lib90F7C81D_gv_weather.lv_intenseSunlightEvent = false;
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_8EA8D665"));
            autoC126CEB8_g = PlayerGroupAll();
            autoC126CEB8_var = -1;
            while (true) {
                autoC126CEB8_var = PlayerGroupNextPlayer(autoC126CEB8_g, autoC126CEB8_var);
                if (autoC126CEB8_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(autoC126CEB8_var, "WeatherEffectIntenseSunlight", 0);
            }
        }
        else if (auto060FBAE9_val == lib90F7C81D_gv_weather.lv_bloodMoonEvent) {
            lib90F7C81D_gv_weather.lv_bloodMoonEvent = false;
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_3DE39526"));
            autoBE1190CE_g = PlayerGroupAll();
            autoBE1190CE_var = -1;
            while (true) {
                autoBE1190CE_var = PlayerGroupNextPlayer(autoBE1190CE_g, autoBE1190CE_var);
                if (autoBE1190CE_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(autoBE1190CE_var, "WeatherEffectIntenseMoonlight", 0);
            }
        }
        else {
            lib90F7C81D_gv_weather.lv_clearEvent = false;
        }
    }
    lib90F7C81D_gv_weather.lv_weatherEventOn = true;
    if ((lp_weatherType == "Fog")) {
        lib90F7C81D_gv_weather.lv_fogEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Fog");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_48233527"));
        auto2DD4AD57_g = PlayerGroupAll();
        auto2DD4AD57_var = -1;
        while (true) {
            auto2DD4AD57_var = PlayerGroupNextPlayer(auto2DD4AD57_g, auto2DD4AD57_var);
            if (auto2DD4AD57_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto2DD4AD57_var, "WeatherEffectFog", 1);
        }
        lib90F7C81D_gf_BlendFog(50.0, 50.0, 50.0, 0.86, 1.0, 8.0, 5.0);
    }
    else if ((lp_weatherType == "RainStorm")) {
        lib90F7C81D_gv_weather.lv_rainstormEvent = true;
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_D84EECAA"));
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Rainstorm");
        auto25AEC428_g = PlayerGroupAll();
        auto25AEC428_var = -1;
        while (true) {
            auto25AEC428_var = PlayerGroupNextPlayer(auto25AEC428_g, auto25AEC428_var);
            if (auto25AEC428_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto25AEC428_var, "WeatherEffectRainstorm", 1);
        }
        auto937556EF_g = lib90F7C81D_gv_players;
        auto937556EF_var = -1;
        while (true) {
            auto937556EF_var = PlayerGroupNextPlayer(auto937556EF_g, auto937556EF_var);
            if (auto937556EF_var < 0) { break; }
            lib90F7C81D_gv_reloadbasetime[auto937556EF_var] *= 1.25;
            lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[auto937556EF_var]);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 100.0, 100.0, "RainSprinkle", 12.0, RegionPlayableMap(), 4.0);
        DialogControlSetAnimationState(lib90F7C81D_gv_weather.lv_weatherFrame, PlayerGroupAll(), "Weather", "Rainstorm");
    }
    else if ((lp_weatherType == "Snow")) {
        lib90F7C81D_gv_weather.lv_snowEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Snow");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_F374CEC9"));
        autoE55606CB_g = PlayerGroupAll();
        autoE55606CB_var = -1;
        while (true) {
            autoE55606CB_var = PlayerGroupNextPlayer(autoE55606CB_g, autoE55606CB_var);
            if (autoE55606CB_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoE55606CB_var, "WeatherEffectSnow", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 100.0, 100.0, "SnowLight", 16.0, RegionPlayableMap(), 4.0);
        DialogControlSetAnimationState(lib90F7C81D_gv_weather.lv_weatherFrame, PlayerGroupAll(), "Weather", "Snowstorm");
    }
    else if ((lp_weatherType == "Cloudy")) {
        lib90F7C81D_gv_weather.lv_cloudyEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Cloudy");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_C55B0770"));
        auto102A727F_g = PlayerGroupAll();
        auto102A727F_var = -1;
        while (true) {
            auto102A727F_var = PlayerGroupNextPlayer(auto102A727F_g, auto102A727F_var);
            if (auto102A727F_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto102A727F_var, "WeatherEffectCloudy", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 100.0, 100.0, "SnowWind", 10.0, RegionPlayableMap(), 4.0);
    }
    else if ((lp_weatherType == "IntenseSunlight")) {
        lib90F7C81D_gv_weather.lv_intenseSunlightEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "IntenseSunlight");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_A6E69EA5"));
        auto81B93829_g = PlayerGroupAll();
        auto81B93829_var = -1;
        while (true) {
            auto81B93829_var = PlayerGroupNextPlayer(auto81B93829_g, auto81B93829_var);
            if (auto81B93829_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto81B93829_var, "WeatherEffectIntenseSunlight", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 100.0, 100.0, "Sunrays", 8.0, RegionPlayableMap(), 4.0);
    }
    else if ((lp_weatherType == "BloodMoon")) {
        lib90F7C81D_gv_weather.lv_bloodMoonEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "BloodMoon");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_8EDA7EBE"));
        autoD060FC93_g = PlayerGroupAll();
        autoD060FC93_var = -1;
        while (true) {
            autoD060FC93_var = PlayerGroupNextPlayer(autoD060FC93_g, autoD060FC93_var);
            if (autoD060FC93_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoD060FC93_var, "WeatherEffectIntenseMoonlight", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 0.0, 0.0, "Sunrays", 8.0, RegionPlayableMap(), 4.0);
    }
    else if ((lp_weatherType == "Clear")) {
        lib90F7C81D_gv_weather.lv_clearEvent = true;
    }
    DialogControlSendAnimationEvent(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Flash");
    lib90F7C81D_gv_weather.lv_weatherQueue = false;
}

string lib90F7C81D_gf_RandomPMC () {
    // Variable Declarations
    int lv_index;
    int lv_weight;
    int lv_randWeight;
    int lv_weightMaxPool;

    // Automatic Variable Declarations
    int auto0F5D50BC_ae;
    const int auto0F5D50BC_ai = 1;

    // Variable Initialization
    lv_weightMaxPool = lib90F7C81D_gv_pMC.lv_totalWeight;

    // Implementation
    auto0F5D50BC_ae = lib90F7C81D_gv_pMC.lv_maxUnitType;
    lv_index = 1;
    for ( ; ( (auto0F5D50BC_ai >= 0 && lv_index <= auto0F5D50BC_ae) || (auto0F5D50BC_ai < 0 && lv_index >= auto0F5D50BC_ae) ) ; lv_index += auto0F5D50BC_ai ) {
        if ((UserDataGetInt("PMCUnits", "All", "Enabled", lv_index) == 0)) {
            continue;
        }
        else {
            lv_randWeight = RandomInt(1, lv_weightMaxPool);
            lv_weight = (lv_randWeight - UserDataGetInt("PMCUnits", "All", "Weight", lv_index));
            if ((lv_weight <= 0)) {
                lib90F7C81D_gf_UpdatePMCPool(lv_index, lib90F7C81D_ge_PMCSlot_Substract);
                break;
            }
            else {
                lv_weightMaxPool -= UserDataGetInt("PMCUnits", "All", "Weight", lv_index);
            }
        }
    }
    return UserDataGetUnit("PMCUnits", "All", "Unit", lv_index);
}

void lib90F7C81D_gf_UpdatePMCPool (int lp_index, int lp_slot) {
    // Variable Declarations
    int lv_limit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_slot == lib90F7C81D_ge_PMCSlot_Add)) {
        lv_limit = (UserDataGetInt("PMCUnits", "All", "Unit Limit", lp_index) + 1);
    }
    else {
        lv_limit = (UserDataGetInt("PMCUnits", "All", "Unit Limit", lp_index) - 1);
    }
    UserDataSetInt("PMCUnits", "All", "Unit Limit", lp_index, lv_limit);
    if ((lv_limit < 1) && (UserDataGetInt("PMCUnits", "All", "Enabled", lp_index) == 1)) {
        UserDataSetInt("PMCUnits", "All", "Enabled", lp_index, 0);
        lib90F7C81D_gv_pMC.lv_totalWeight -= UserDataGetInt("PMCUnits", "All", "Weight", lp_index);
    }
    else if ((lv_limit >= 1) && (UserDataGetInt("PMCUnits", "All", "Enabled", lp_index) == 0)) {
        UserDataSetInt("PMCUnits", "All", "Enabled", lp_index, 1);
        lib90F7C81D_gv_pMC.lv_totalWeight += UserDataGetInt("PMCUnits", "All", "Weight", lp_index);
    }
}

void lib90F7C81D_gf_ResetPMCPool () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto1161C948_ae;
    const int auto1161C948_ai = 1;

    // Variable Initialization

    // Implementation
    lib90F7C81D_gv_pMC.lv_idleAttackOrder = true;
    auto1161C948_ae = lib90F7C81D_gv_pMC.lv_maxUnitType;
    lv_index = 1;
    for ( ; ( (auto1161C948_ai >= 0 && lv_index <= auto1161C948_ae) || (auto1161C948_ai < 0 && lv_index >= auto1161C948_ae) ) ; lv_index += auto1161C948_ai ) {
        UserDataSetInt("PMCUnits", "All", "Enabled", lv_index, 1);
        if ((lv_index == 1)) {
            UserDataSetInt("PMCUnits", "All", "Unit Limit", lv_index, 12);
        }
        else {
            UserDataSetInt("PMCUnits", "All", "Unit Limit", lv_index, 1);
        }
    }
    lib90F7C81D_gv_pMC.lv_totalWeight = UserDataGetInt("PMCUnits", "All", "Weight Max", 1);
}

void lib90F7C81D_gf_PMCDifficulty () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
        lib90F7C81D_gv_pMC.lv_maxUnitType += 2;
        UserDataSetInt("PMCUnits", "All", "Enabled", 6, 1);
        UserDataSetInt("PMCUnits", "All", "Enabled", 7, 1);
    }
}

bool lib90F7C81D_gf_DevHandles (string lp_handle) {
    // Variable Declarations
    string lv_i;

    // Automatic Variable Declarations
    string auto02A1FE60_userType;
    int auto02A1FE60_i;

    // Variable Initialization

    // Implementation
    if ((GameIsTestMap(false) == true)) {
        return true;
    }
    else {
        auto02A1FE60_userType = "DeveloperHandles";
        auto02A1FE60_i = 1;
        for ( ; auto02A1FE60_i <= UserDataInstanceCount(auto02A1FE60_userType) ; auto02A1FE60_i += 1 ) {
            lv_i = UserDataInstance(auto02A1FE60_userType, auto02A1FE60_i);
            if ((UserDataGetString("DeveloperHandles", lv_i, "Bank ID", 1) == lp_handle)) {
                return true;
            }
        }
    }
    return false;
}

void lib90F7C81D_gf_MissionText (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, (StringExternal("Param/Value/lib_90F7C81D_6C8577DB") + lp_text));
    TriggerQueueExit();
}

void lib90F7C81D_gf_SendMissionDialogue (text lp_talker, text lp_text) {
    // Variable Declarations
    text lv_talker;
    text lv_style;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_style = StringExternal("Param/Value/lib_90F7C81D_650652B2");

    // Implementation
    TriggerQueueEnter();
    SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, (lv_style + lv_talker + lp_text));
    TriggerQueueExit();
}

void lib90F7C81D_gf_TextChat (unit lp_unit, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "TextBox/TextTag", lp_unit);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, PlayerGroupAll());
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "DisplayTag");
    DialogControlDestroy(DialogControlLastCreated());
}

trigger auto_lib90F7C81D_gf_AIScatterFromPoint_Trigger = null;
point auto_lib90F7C81D_gf_AIScatterFromPoint_lp_point;
fixed auto_lib90F7C81D_gf_AIScatterFromPoint_lp_radius;

void lib90F7C81D_gf_AIScatterFromPoint (point lp_point, fixed lp_radius) {
    auto_lib90F7C81D_gf_AIScatterFromPoint_lp_point = lp_point;
    auto_lib90F7C81D_gf_AIScatterFromPoint_lp_radius = lp_radius;

    if (auto_lib90F7C81D_gf_AIScatterFromPoint_Trigger == null) {
        auto_lib90F7C81D_gf_AIScatterFromPoint_Trigger = TriggerCreate("auto_lib90F7C81D_gf_AIScatterFromPoint_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_AIScatterFromPoint_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_AIScatterFromPoint_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_lib90F7C81D_gf_AIScatterFromPoint_lp_point;
    fixed lp_radius = auto_lib90F7C81D_gf_AIScatterFromPoint_lp_radius;

    // Automatic Variable Declarations
    unitgroup auto0752BD74_g;
    int auto0752BD74_u;
    unit auto0752BD74_var;

    // Implementation
    auto0752BD74_g = UnitGroup(null, c_playerAny, RegionCircle(lp_point, lp_radius), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0752BD74_u = UnitGroupCount(auto0752BD74_g, c_unitCountAll);
    for (;; auto0752BD74_u -= 1) {
        auto0752BD74_var = UnitGroupUnitFromEnd(auto0752BD74_g, auto0752BD74_u);
        if (auto0752BD74_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto0752BD74_var), c_unitAttributeHeroic) == true) && (lib90F7C81D_gv_gameplay.lv_tacticalSprint[UnitGetOwner(auto0752BD74_var)] == true)) {
            UnitIssueOrder(auto0752BD74_var, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        }
        else {
            if ((UnitGetOwner(auto0752BD74_var) != 14) && ((PlayerType(UnitGetOwner(auto0752BD74_var)) == c_playerTypeComputer) || (PlayerType(UnitGetOwner(auto0752BD74_var)) == c_playerTypeNeutral))) {
                if ((UnitAbilityExists(auto0752BD74_var, "NPCSprint") == true)) {
                    UnitIssueOrder(auto0752BD74_var, Order(AbilityCommand("SprintRA", 0)), c_orderQueueReplace);
                    UnitIssueOrder(auto0752BD74_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_point, (lp_radius + RandomFixed(1.0, 4.0)), AngleBetweenPoints(lp_point, UnitGetPosition(auto0752BD74_var)))), c_orderQueueAddToFront);
                }
                else {
                    UnitIssueOrder(auto0752BD74_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_point, (lp_radius + RandomFixed(1.0, 4.0)), AngleBetweenPoints(lp_point, UnitGetPosition(auto0752BD74_var)))), c_orderQueueAddToFront);
                }
            }

        }
    }
    return true;
}

void lib90F7C81D_gf_SetTTFadeandDuration (int lp_tag, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    TextTagSetTime(lp_tag, c_textTagTimeDuration, lp_duration);
    TextTagSetTime(lp_tag, c_textTagTimeFadeOut, (lp_duration - 1.0));
}

void lib90F7C81D_gf_LandPhantom (point lp_lZ) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 13, PointWithOffset(lp_lZ, -12.0, RandomFixed(-4.0, 4.0)), lp_lZ);
    lib90F7C81D_gv_lastlandedphantom = UnitLastCreated();
    UnitIssueOrder(lib90F7C81D_gv_lastlandedphantom, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), lp_lZ), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lib90F7C81D_gv_lastlandedphantom, true);
}

void lib90F7C81D_gf_TakeoffPhantom () {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lib90F7C81D_gv_lastlandedphantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lib90F7C81D_gv_lastlandedphantom, true);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(lib90F7C81D_gv_lastlandedphantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    UnitRemove(lib90F7C81D_gv_lastlandedphantom);
}

trigger auto_lib90F7C81D_gf_FloatingTextforPlayer_Trigger = null;
unit auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_unit;
text auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_text;
int auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_player;

void lib90F7C81D_gf_FloatingTextforPlayer (unit lp_unit, text lp_text, int lp_player) {
    auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_unit = lp_unit;
    auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_text = lp_text;
    auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_player = lp_player;

    if (auto_lib90F7C81D_gf_FloatingTextforPlayer_Trigger == null) {
        auto_lib90F7C81D_gf_FloatingTextforPlayer_Trigger = TriggerCreate("auto_lib90F7C81D_gf_FloatingTextforPlayer_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_FloatingTextforPlayer_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_FloatingTextforPlayer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_unit;
    text lp_text = auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_text;
    int lp_player = auto_lib90F7C81D_gf_FloatingTextforPlayer_lp_player;

    // Automatic Variable Declarations
    // Implementation
    SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupSingle(lp_player), lp_unit, 0.0, 100.0, 0.0);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "TextBox/TextTag", lp_unit);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, PlayerGroupSingle(lp_player));
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(lp_player), "DisplayTag");
    DialogControlDestroy(DialogControlLastCreated());
    return true;
}

void lib90F7C81D_gf_DebugTextMessageInteger (playergroup lp_players, int lp_messageArea, int lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_players, lp_messageArea, IntToText(lp_message));
}

void lib90F7C81D_gf_DebugTextMessageReal (playergroup lp_players, int lp_messageArea, fixed lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_players, lp_messageArea, FixedToText(lp_message, c_fixedPrecisionAny));
}

void lib90F7C81D_gf_DebugTextMessageString (playergroup lp_players, int lp_messageArea, string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(lp_players, lp_messageArea, StringToText(lp_message));
}

text lib90F7C81D_gf_TextImage (string lp_imgpath, int lp_scale) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Param/Value/lib_90F7C81D_48EBA583") + StringToText(lp_imgpath) + StringExternal("Param/Value/lib_90F7C81D_E97738DA") + IntToText(lp_scale) + StringExternal("Param/Value/lib_90F7C81D_0D367BCA") + IntToText(lp_scale) + StringExternal("Param/Value/lib_90F7C81D_106B02E5"));
}

bool lib90F7C81D_gf_UnitCanSprint (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitBehaviorCount(lp_unit, "SprintEnergy") < 32)) {
        return false;
    }

    return true;
}

fixed lib90F7C81D_gf_MathNumberWrap (fixed lp_value, fixed lp_minAmount, fixed lp_maxAmount) {
    // Variable Declarations
    fixed lv_width;
    fixed lv_OffsetValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_width = (lp_maxAmount - lp_minAmount);
    lv_OffsetValue = (lp_value - lp_minAmount);
    return ((lv_OffsetValue - (Floor((lv_OffsetValue / lv_width)) * lv_width)) + lp_minAmount);
}

string lib90F7C81D_gf_IIF (bool lp_condition, string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

fixed lib90F7C81D_gf_Lerp (fixed lp_valueZero, fixed lp_valueOne, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return ((1 - lp_amount) * lp_valueZero + lp_amount*lp_valueOne);
}

void lib90F7C81D_gf_DrawRegion (string lp_region, color lp_color) {
    // Variable Declarations
    string lv_type;
    fixed lv_wX;
    fixed lv_hY;
    fixed lv_cX;
    fixed lv_cY;
    fixed lv_a;
    fixed lv_r;
    fixed lv_x;
    fixed lv_y;
    int lv_i;
    point[5] lv_p;

    // Automatic Variable Declarations
    const fixed autoD2FE1BF7_ae = 380.0;
    const fixed autoD2FE1BF7_ai = 20.0;

    // Variable Initialization
    lv_type = UserDataGetString("Regions", lp_region, "type", 1);

    // Implementation
    if ((lib90F7C81D_gv_pathDisplay.lv_rCur < lib90F7C81D_gv_regionMax)) {
        lib90F7C81D_gv_pathDisplay.lv_rCur += 1;
        lv_i = (lib90F7C81D_gv_pathDisplay.lv_rCur - 1);
        if ((lv_type == "rect")) {
            lv_p[0] = Point(UserDataGetFixed("Regions", lp_region, "quad", 1), UserDataGetFixed("Regions", lp_region, "quad", 2));
            lv_p[1] = Point(UserDataGetFixed("Regions", lp_region, "quad", 3), UserDataGetFixed("Regions", lp_region, "quad", 2));
            lv_p[2] = Point(UserDataGetFixed("Regions", lp_region, "quad", 1), UserDataGetFixed("Regions", lp_region, "quad", 4));
            lv_p[3] = Point(UserDataGetFixed("Regions", lp_region, "quad", 3), UserDataGetFixed("Regions", lp_region, "quad", 4));
            lv_p[4] = MidPoint(lv_p[0], lv_p[1]);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathDisplayUnitAir", 0, 0, lv_p[0]);
            lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i] = UnitLastCreated();
            PathCreateForUnit(PlayerGroupAll(), lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i]);
            lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i] = PathLastCreated();
            PathSetDestinationPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[4]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[0]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[1]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[3]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[2]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[0]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[1]);
        }
        else if ((lv_type == "circle")) {
            lv_cX = UserDataGetFixed("Regions", lp_region, "center", 1);
            lv_cY = UserDataGetFixed("Regions", lp_region, "center", 2);
            lv_r = UserDataGetFixed("Regions", lp_region, "radius", 1);
            lv_a = 0.0;
            for ( ; ( (autoD2FE1BF7_ai >= 0 && lv_a <= autoD2FE1BF7_ae) || (autoD2FE1BF7_ai < 0 && lv_a >= autoD2FE1BF7_ae) ) ; lv_a += autoD2FE1BF7_ai ) {
                lv_x = (lv_cX + (lv_r * Cos(lv_a)));
                lv_y = (lv_cY + (lv_r * Sin(lv_a)));
                if ((lv_a == 0.0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathDisplayUnitAir", 0, 0, Point(lv_x, lv_y));
                    lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i] = UnitLastCreated();
                    PathCreateForUnit(PlayerGroupAll(), lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i]);
                    lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i] = PathLastCreated();
                }
                else {
                    if ((lv_a == 380.0)) {
                        PathSetDestinationPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], Point(lv_x, lv_y));
                    }
                    else {
                        PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], Point(lv_x, lv_y));
                    }
                }
            }
        }
        else if ((lv_type == "diamond")) {
            lv_cX = UserDataGetFixed("Regions", lp_region, "center", 1);
            lv_cY = UserDataGetFixed("Regions", lp_region, "center", 2);
            lv_wX = UserDataGetFixed("Regions", lp_region, "width", 1);
            lv_hY = UserDataGetFixed("Regions", lp_region, "height", 1);
            lv_p[0] = Point(lv_wX / 2 * 0.7302 - lv_hY / 2 * 0.6833 + lv_cX, lv_wX / 2 * 0.6833 + lv_hY / 2 * 0.7302 + lv_cY);
            lv_p[1] = Point(-lv_wX / 2 * 0.7302 - lv_hY / 2 * 0.6833 + lv_cX, -lv_wX / 2 * 0.6833 + lv_hY / 2 * 0.7302 + lv_cY);
            lv_p[2] = Point(-lv_wX / 2 * 0.7302 - -lv_hY / 2 * 0.6833 + lv_cX, -lv_wX / 2 * 0.6833 + -lv_hY / 2 * 0.7302 + lv_cY);
            lv_p[3] = Point(lv_wX / 2 * 0.7302 - -lv_hY / 2 * 0.6833 + lv_cX, lv_wX / 2 * 0.6833 + -lv_hY / 2 * 0.7302 + lv_cY);
            lv_p[4] = MidPoint(lv_p[0], lv_p[1]);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathDisplayUnitAir", 0, 0, lv_p[0]);
            lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i] = UnitLastCreated();
            PathCreateForUnit(PlayerGroupAll(), lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i]);
            lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i] = PathLastCreated();
            PathSetDestinationPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[4]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[0]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[1]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[2]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[3]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[0]);
            PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p[1]);
        }
        PathSetColor(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, lp_color);
        PathSetStepModel(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
        PathSetLineTileLength(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, 0.8);
        PathSetLineWidth(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, 0.3);
        PathSetVisible(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationMinimap, false);
        PathSetVisible(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, true);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_90F7C81D_D595F182"), SoundLink("UI_GenericError", 0));
    }
}

void lib90F7C81D_gf_DrawRegionRemoveAll () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoFD0E3E54_ae;
    const int autoFD0E3E54_ai = 1;

    // Variable Initialization

    // Implementation
    autoFD0E3E54_ae = lib90F7C81D_gv_pathDisplay.lv_rCur;
    lv_i = 0;
    for ( ; ( (autoFD0E3E54_ai >= 0 && lv_i <= autoFD0E3E54_ae) || (autoFD0E3E54_ai < 0 && lv_i >= autoFD0E3E54_ae) ) ; lv_i += autoFD0E3E54_ai ) {
        if ((lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i] != null)) {
            UnitKill(lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i]);
            PathDestroy(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i]);
        }
    }
}

void lib90F7C81D_gf_DrawRegionRemoveIndex (int lp_index) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib90F7C81D_gv_pathDisplay.lv_rUnit[lp_index] != null)) {
        UnitKill(lib90F7C81D_gv_pathDisplay.lv_rUnit[lp_index]);
        PathDestroy(lib90F7C81D_gv_pathDisplay.lv_rPath[lp_index]);
    }
}

void lib90F7C81D_gf_DrawRegionEllipse (region lp_region, color lp_color) {
    // Variable Declarations
    fixed lv_h;
    fixed lv_r;
    fixed lv_cX;
    fixed lv_cY;
    fixed lv_a;
    fixed lv_x;
    fixed lv_y;
    int lv_i;

    // Automatic Variable Declarations
    const fixed auto84B9559C_ae = 380.0;
    const fixed auto84B9559C_ai = 10.0;

    // Variable Initialization
    lv_h = (libNtve_gf_HeightOfRegion(lp_region) / 2.0);
    lv_r = (libNtve_gf_WidthOfRegion(lp_region) / 2.0);
    lv_cX = PointGetX(RegionGetCenter(lp_region));
    lv_cY = PointGetY(RegionGetCenter(lp_region));

    // Implementation
    if ((lib90F7C81D_gv_pathDisplay.lv_rCur < lib90F7C81D_gv_regionMax)) {
        lib90F7C81D_gv_pathDisplay.lv_rCur += 1;
        lv_i = (lib90F7C81D_gv_pathDisplay.lv_rCur - 1);
        if ((lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i] == null)) {
            lv_a = 0.0;
            for ( ; ( (auto84B9559C_ai >= 0 && lv_a <= auto84B9559C_ae) || (auto84B9559C_ai < 0 && lv_a >= auto84B9559C_ae) ) ; lv_a += auto84B9559C_ai ) {
                lv_x = (lv_cX + (lv_r * Cos(lv_a)));
                lv_y = (lv_cY + (lv_h * Sin(lv_a)));
                if ((lv_a == 0.0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathDisplayUnitAir", 0, 0, Point(lv_x, lv_y));
                    lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i] = UnitLastCreated();
                    PathCreateForUnit(PlayerGroupAll(), lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i]);
                    lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i] = PathLastCreated();
                }
                else {
                    if ((lv_a == 380.0)) {
                        PathSetDestinationPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], Point(lv_x, lv_y));
                    }
                    else {
                        PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], Point(lv_x, lv_y));
                    }
                }
                PathSetColor(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, lp_color);
                PathSetStepModel(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
                PathSetLineTileLength(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, 0.8);
                PathSetLineWidth(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, 0.3);
                PathSetVisible(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationMinimap, false);
                PathSetVisible(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, true);
            }
        }
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_90F7C81D_DDA2A411"), SoundLink("UI_GenericError", 0));
    }
}

void lib90F7C81D_gf_DrawRegionRectangle (region lp_region, color lp_color) {
    // Variable Declarations
    fixed lv_wX;
    fixed lv_hY;
    fixed lv_cX;
    fixed lv_cY;
    point lv_p1;
    point lv_p2;
    point lv_p3;
    point lv_p4;
    point lv_p5;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_wX = libNtve_gf_WidthOfRegion(lp_region);
    lv_hY = libNtve_gf_HeightOfRegion(lp_region);
    lv_cX = PointGetX(RegionGetCenter(lp_region));
    lv_cY = PointGetY(RegionGetCenter(lp_region));
    lv_p1 = Point((lv_cX - (lv_wX / 2.0)), (lv_cY - (lv_hY / 2.0)));
    lv_p2 = Point((lv_cX + (lv_wX / 2.0)), (lv_cY - (lv_hY / 2.0)));
    lv_p3 = Point((lv_cX - (lv_wX / 2.0)), (lv_cY + (lv_hY / 2.0)));
    lv_p4 = Point((lv_cX + (lv_wX / 2.0)), (lv_cY + (lv_hY / 2.0)));
    lv_p5 = MidPoint(lv_p1, lv_p2);

    // Deprecated
    if ((lib90F7C81D_gv_pathDisplay.lv_rCur < lib90F7C81D_gv_regionMax)) {
        lib90F7C81D_gv_pathDisplay.lv_rCur += 1;
        lv_i = (lib90F7C81D_gv_pathDisplay.lv_rCur - 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathDisplayUnitAir", 0, 0, lv_p1);
        lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i] = UnitLastCreated();
        PathCreateForUnit(PlayerGroupAll(), lib90F7C81D_gv_pathDisplay.lv_rUnit[lv_i]);
        lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i] = PathLastCreated();
        PathSetDestinationPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p5);
        PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p1);
        PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p2);
        PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p4);
        PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p3);
        PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p1);
        PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], lv_p2);
        PathSetColor(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, lp_color);
        PathSetStepModel(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
        PathSetLineTileLength(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, 0.8);
        PathSetLineWidth(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, 0.3);
        PathSetVisible(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationMinimap, false);
        PathSetVisible(lib90F7C81D_gv_pathDisplay.lv_rPath[lv_i], c_pathLocationWorld, true);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_90F7C81D_93D0CDF3"), SoundLink("UI_GenericError", 0));
    }
}

void lib90F7C81D_gf_InitConvoyPathDisplay (point lp_startPoint, point lp_destinationPoint, int lp_path, bool lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_pathDisplay.lv_cUnit[lp_path] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PathDisplayUnitGround", 0, 0, lp_startPoint);
        lib90F7C81D_gv_pathDisplay.lv_cUnit[lp_path] = UnitLastCreated();
        PathCreateForUnit(PlayerGroupAll(), lib90F7C81D_gv_pathDisplay.lv_cUnit[lp_path]);
        lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path] = PathLastCreated();
        PathSetDestinationPoint(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], lp_destinationPoint);
        PathSetStepModel(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], c_pathLocationAll, "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3");
        PathSetLineTexture(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], c_pathLocationAll, "Assets\\Textures\\ui_tutorial_guidearrow.dds");
        PathSetLineTileLength(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], c_pathLocationWorld, 2.578);
        PathSetLineWidth(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], c_pathLocationWorld, 1.7);
        PathSetLineTileLength(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], c_pathLocationMinimap, 6.0);
        PathSetLineWidth(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], c_pathLocationMinimap, 5.0);
        lib90F7C81D_gf_ShowHidePathConvoy(lp_state, lp_path);
    }
}

void lib90F7C81D_gf_AddConvoyPathPoint (point lp_point, int lp_path) {
    // Automatic Variable Declarations
    // Implementation
    PathAddWayPoint(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], lp_point);
}

void lib90F7C81D_gf_ShowHidePathConvoy (bool lp_state, int lp_path) {
    // Automatic Variable Declarations
    // Implementation
    PathSetVisible(lib90F7C81D_gv_pathDisplay.lv_cPath[lp_path], c_pathLocationAll, lp_state);
}

void lib90F7C81D_gf_RemoveConvoyPathDisplay () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoC6C0B8C9_ae = 1;
    const int autoC6C0B8C9_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 0;
    for ( ; ( (autoC6C0B8C9_ai >= 0 && lv_i <= autoC6C0B8C9_ae) || (autoC6C0B8C9_ai < 0 && lv_i >= autoC6C0B8C9_ae) ) ; lv_i += autoC6C0B8C9_ai ) {
        lib90F7C81D_gf_ShowHidePathConvoy(false, lv_i);
        lib90F7C81D_gv_pathDisplay.lv_cUnit[lv_i] = null;
        UnitRemove(lib90F7C81D_gv_pathDisplay.lv_cUnit[lv_i]);
        PathClearWayPoints(lib90F7C81D_gv_pathDisplay.lv_cPath[lv_i]);
        PathDestroy(lib90F7C81D_gv_pathDisplay.lv_cPath[lv_i]);
    }
}

text lib90F7C81D_gf_GetModeText (string lp_instance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("XPGainAllModes", lp_instance, "Text", 1);
}

fixed lib90F7C81D_gf_GetModeXP (string lp_instance) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("XPGainAllModes", lp_instance, "XP", 1);
}

void lib90F7C81D_gf_GameVictory () {
    // Variable Declarations
    int[13] lv_previous_Wins;

    // Automatic Variable Declarations
    playergroup autoDE9D9807_g;
    int autoDE9D9807_var;

    // Variable Initialization

    // Implementation
    lib90F7C81D_gv_victory = true;
    if ((lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
        lib90F7C81D_gf_RunEvent("MOSAchievementsUpdate");
        if (lib90F7C81D_gf_GetGameMode(1)) {
            lib90F7C81D_gf_CampaignWins();
        }
        else {
            autoDE9D9807_g = lib90F7C81D_gv_players;
            autoDE9D9807_var = -1;
            while (true) {
                autoDE9D9807_var = PlayerGroupNextPlayer(autoDE9D9807_g, autoDE9D9807_var);
                if (autoDE9D9807_var < 0) { break; }
                lv_previous_Wins[autoDE9D9807_var] = lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gv_gamemode][autoDE9D9807_var];
                lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][autoDE9D9807_var] += 1;
                lib90F7C81D_gf_GetGameWins(autoDE9D9807_var, lv_previous_Wins[autoDE9D9807_var], true);
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[51][autoDE9D9807_var] == false)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[51][autoDE9D9807_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("First Win", autoDE9D9807_var);
                }
            }
        }
        if ((lib90F7C81D_gv_weeklyModifier.lv_enabled == true)) {
            lib90F7C81D_gf_ModifierReward(lib90F7C81D_gv_weeklyModifier.lv_modifier);
        }
    }
}

trigger auto_lib90F7C81D_gf_GamesPlayedUpdate_Trigger = null;

void lib90F7C81D_gf_GamesPlayedUpdate () {
    if (auto_lib90F7C81D_gf_GamesPlayedUpdate_Trigger == null) {
        auto_lib90F7C81D_gf_GamesPlayedUpdate_Trigger = TriggerCreate("auto_lib90F7C81D_gf_GamesPlayedUpdate_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_GamesPlayedUpdate_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_GamesPlayedUpdate_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_devInGame;
    int[13] lv_games_Previous;
    int lv_index;
    text lv_max;

    // Automatic Variable Declarations
    playergroup auto2D5C3DCB_g;
    int auto2D5C3DCB_var;
    const int auto3B236314_ae = 33;
    const int auto3B236314_ai = 1;
    playergroup autoFF352576_g;
    int autoFF352576_var;

    // Variable Initialization

    // Implementation
    auto2D5C3DCB_g = lib90F7C81D_gv_players;
    auto2D5C3DCB_var = -1;
    while (true) {
        auto2D5C3DCB_var = PlayerGroupNextPlayer(auto2D5C3DCB_g, auto2D5C3DCB_var);
        if (auto2D5C3DCB_var < 0) { break; }
        lv_games_Previous[auto2D5C3DCB_var] = lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var];
        lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] += 1;
        if ((lib90F7C81D_gf_GetGameMode(10) == false)) {
            if ((lv_games_Previous[auto2D5C3DCB_var] < 100) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] >= 100) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] < 200)) {
                lib90F7C81D_gf_FlashAchievementBadge("Just Getting Started", auto2D5C3DCB_var);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][28], PlayerGroupSingle(auto2D5C3DCB_var), "AchievementBadge", "Earned");
                lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Retro", "Rank Insignia", auto2D5C3DCB_var, true);
            }
            else if ((lv_games_Previous[auto2D5C3DCB_var] < 200) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] >= 200) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] < 200)) {
                lib90F7C81D_gf_FlashAchievementBadge("UAD Fan", auto2D5C3DCB_var);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][29], PlayerGroupSingle(auto2D5C3DCB_var), "AchievementBadge", "Earned");
            }
            else if ((lv_games_Previous[auto2D5C3DCB_var] < 300) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] >= 300) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] < 300)) {
                lib90F7C81D_gf_FlashAchievementBadge("I'm No Rookie", auto2D5C3DCB_var);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][30], PlayerGroupSingle(auto2D5C3DCB_var), "AchievementBadge", "Earned");
            }
            else if ((lv_games_Previous[auto2D5C3DCB_var] < 400) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] >= 400) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] < 400)) {
                lib90F7C81D_gf_FlashAchievementBadge("Veteran", auto2D5C3DCB_var);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][31], PlayerGroupSingle(auto2D5C3DCB_var), "AchievementBadge", "Earned");
            }
            else if ((lv_games_Previous[auto2D5C3DCB_var] < 500) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] >= 500) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] < 500)) {
                lib90F7C81D_gf_FlashAchievementBadge("I Have A Problem", auto2D5C3DCB_var);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][32], PlayerGroupSingle(auto2D5C3DCB_var), "AchievementBadge", "Earned");
            }
        }
        lv_index = 29;
        for ( ; ( (auto3B236314_ai >= 0 && lv_index <= auto3B236314_ae) || (auto3B236314_ai < 0 && lv_index >= auto3B236314_ae) ) ; lv_index += auto3B236314_ai ) {
            if ((lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var] < UserDataGetInt("AchievementModes", "Career", "Progress Max Int", lv_index))) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][(lv_index - 1)], IntToText(lib90F7C81D_gv_bankData.lv_gamesPlayed[auto2D5C3DCB_var]), PlayerGroupSingle(auto2D5C3DCB_var));
            }
        }
        if ((lib90F7C81D_gf_DevHandles(PlayerHandle(auto2D5C3DCB_var)) || (GameIsTestMap(false) == true))) {
            if ((lv_devInGame == false)) {
                lv_devInGame = true;
            }
        }
    }
    if ((lv_devInGame == true)) {
        Wait(30.0, c_timeGame);
        autoFF352576_g = lib90F7C81D_gv_players;
        autoFF352576_var = -1;
        while (true) {
            autoFF352576_var = PlayerGroupNextPlayer(autoFF352576_g, autoFF352576_var);
            if (autoFF352576_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[19][autoFF352576_var] == false)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[19][autoFF352576_var] = true;
                lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Gold", "Rank Insignia", autoFF352576_var, true);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][2], PlayerGroupSingle(autoFF352576_var), "AchievementBadge", "Earned");
                lib90F7C81D_gf_FlashAchievementBadge("Dev Team", autoFF352576_var);
            }
        }
    }
    return true;
}

int lib90F7C81D_gf_DifficultyIndex (int lp_difficulty) {
    // Automatic Variable Declarations
    int autoC06A43C2_val;

    // Implementation
    autoC06A43C2_val = lp_difficulty;
    if (autoC06A43C2_val == 1) {
        return 1;
    }
    else if (autoC06A43C2_val == 2) {
        return 2;
    }
    else if (autoC06A43C2_val == 3) {
        return 3;
    }
    else if (autoC06A43C2_val == 4) {
        return 4;
    }
    else if (autoC06A43C2_val == 5) {
        return 5;
    }
    else if (autoC06A43C2_val == 6) {
        return 6;
    }
    else if (autoC06A43C2_val == 7) {
        return 7;
    }
    else if (autoC06A43C2_val == 8) {
        return 8;
    }
    else if (autoC06A43C2_val == 9) {
        return 9;
    }
    else if (autoC06A43C2_val == 10) {
        return 10;
    }
    else if (autoC06A43C2_val == 11) {
        return 11;
    }
    else {
        return 0;
    }
}

int lib90F7C81D_gf_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int autoA5BCD5D5_val;

    // Implementation
    autoA5BCD5D5_val = lp_index;
    if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(1)) {
        return 1;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(2)) {
        return 2;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(3)) {
        return 3;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(4)) {
        return 4;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(5)) {
        return 5;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(6)) {
        return 6;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(7)) {
        return 7;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(8)) {
        return 8;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(9)) {
        return 9;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(10)) {
        return 10;
    }
    else if (autoA5BCD5D5_val == lib90F7C81D_gf_DifficultyIndex(11)) {
        return 11;
    }
    else {
        return 1;
    }
}

string lib90F7C81D_gf_SendGameModeEvent () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("GameModes", UserDataInstance("GameModes", lib90F7C81D_gf_GameMode()), "Event", 1);
}

int lib90F7C81D_gf_GameMode () {
    // Automatic Variable Declarations
    // Implementation
    return lib90F7C81D_gv_gamemode;
}

bool lib90F7C81D_gf_DifficultyisLOE (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_gamemode <= (lp_difficulty))) {
        return true;
    }

    return false;
}

bool lib90F7C81D_gf_DifficultyisGOE (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_gamemode >= (lp_difficulty))) {
        return true;
    }

    return false;
}

bool lib90F7C81D_gf_DifficultyisBetweenBounds (int lp_difficulty, int lp_difficulty1) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib90F7C81D_gv_gamemode >= (lp_difficulty)) && (lib90F7C81D_gv_gamemode <= (lp_difficulty1)))) {
        return true;
    }

    return false;
}

bool lib90F7C81D_gf_CompareDifficulty (int lp_difficulty, int lp_difficulty1, int lp_difficulty2) {
    // Automatic Variable Declarations
    // Implementation
    if (((lib90F7C81D_gv_gamemode == (lp_difficulty)) || (lib90F7C81D_gv_gamemode == (lp_difficulty1)) || (lib90F7C81D_gv_gamemode == (lp_difficulty2)))) {
        return true;
    }

    return false;
}

int lib90F7C81D_gf_GetSkillLevel () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (1) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (2))) {
        return 1;
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (3)) {
        return 2;
    }
    else if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (4) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (5))) {
        return 3;
    }
    return 0;
}

void lib90F7C81D_gf_StartGameMode (trigger t, string lp_gameMode) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, UserDataGetString("GameModes", lp_gameMode, "Event", 1));
}

void lib90F7C81D_gf_StartCampaign (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, "Campaign Init");
}

void lib90F7C81D_gf_DifficultyCampaignSettings () {
    // Variable Declarations
    fixed lv_damageTaken;
    fixed lv_damageDealt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (1)) {
        lv_damageTaken = 1.0;
        lv_damageDealt = 1.0;
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (2)) {
        lv_damageTaken = 1.0;
        lv_damageDealt = 1.0;
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (3)) {
        lv_damageTaken = 1.0;
        lv_damageDealt = 1.0;
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (4)) {
        lv_damageTaken = 1.0;
        lv_damageDealt = 1.0;
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (5)) {
        lv_damageTaken = 1.0;
        lv_damageDealt = 1.0;
    }
    PlayerModifyPropertyFixed(14, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, (lv_damageTaken * 100.0));
    PlayerModifyPropertyFixed(14, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, (lv_damageDealt * 100.0));
    PlayerModifyPropertyFixed(15, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, (lv_damageTaken * 100.0));
    PlayerModifyPropertyFixed(15, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, (lv_damageDealt * 100.0));
}

void lib90F7C81D_gf_SetDifficulty (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    lib90F7C81D_gv_gamemode = lib90F7C81D_gf_DifficultyIndex (lp_difficulty);
}

void lib90F7C81D_gf_RunGameMode () {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(lib90F7C81D_gf_SendGameModeEvent());
}

bool lib90F7C81D_gf_GetGameMode (int lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mode == 1)) {
        if ((lib90F7C81D_gf_DifficultyisLOE(5) == true)) {
            return true;
        }
    }
    else {
        if (((lp_mode) == lib90F7C81D_gf_GameMode())) {
            return true;
        }
    }
    return false;
}

void lib90F7C81D_gf_UndeadSpawnEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_ge_UndeadSpawnLoopEvent_Ident(lp_event));
}

trigger auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_Trigger = null;
string auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_lp_event;

void lib90F7C81D_gf_RunUndeadSpawnLoopEvent (string lp_event) {
    auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_lp_event = lp_event;

    if (auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_Trigger == null) {
        auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_Trigger = TriggerCreate("auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_TriggerFunc (bool testConds, bool runActions) {
    string lp_event = auto_lib90F7C81D_gf_RunUndeadSpawnLoopEvent_lp_event;

    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(lib90F7C81D_ge_UndeadSpawnLoopEvent_Ident(lp_event));
    return true;
}

void lib90F7C81D_gf_SetSpawnLoopTimer (int lp_spawnLoop, fixed lp_time) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_Main)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopMain = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_T3)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopT3 = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_T2)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopT2 = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_T1)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopT1 = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_Sanies)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopSanies = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_BossRush)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopBossRush = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_TCPContainment)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopTCPContainment = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_Campaign)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopCampaign = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_PlagueSpawns)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopPlagueSpawns = lp_time;
    }
    else if ((lp_spawnLoop == lib90F7C81D_ge_LoopType_CampaignRA)) {
        lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopCampaignRASpawns = lp_time;
    }
}

void lib90F7C81D_gf_WeaponsItemsEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_ge_WeaponsItems_Ident(lp_event));
}

trigger auto_lib90F7C81D_gf_RunWeaponsItemsEvent_Trigger = null;
string auto_lib90F7C81D_gf_RunWeaponsItemsEvent_lp_event;

void lib90F7C81D_gf_RunWeaponsItemsEvent (string lp_event) {
    auto_lib90F7C81D_gf_RunWeaponsItemsEvent_lp_event = lp_event;

    if (auto_lib90F7C81D_gf_RunWeaponsItemsEvent_Trigger == null) {
        auto_lib90F7C81D_gf_RunWeaponsItemsEvent_Trigger = TriggerCreate("auto_lib90F7C81D_gf_RunWeaponsItemsEvent_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_RunWeaponsItemsEvent_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_RunWeaponsItemsEvent_TriggerFunc (bool testConds, bool runActions) {
    string lp_event = auto_lib90F7C81D_gf_RunWeaponsItemsEvent_lp_event;

    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(lib90F7C81D_ge_WeaponsItems_Ident(lp_event));
    return true;
}

void lib90F7C81D_gf_ModifyWeaponsItemsLoop (string lp_loop, fixed lp_time, int lp_operation) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_loop == "Weapons&Items_1")) {
        if ((lp_operation == c_playerPropOperAdd)) {
            lib90F7C81D_gv_weaponsItemsTimer.lv_weaponsItemsTime_1 += lp_time;
        }
        else if ((lp_operation == c_playerPropOperSetTo)) {
            lib90F7C81D_gv_weaponsItemsTimer.lv_weaponsItemsTime_1 = lp_time;
        }
        else if ((lp_operation == c_playerPropOperSubtract)) {
            lib90F7C81D_gv_weaponsItemsTimer.lv_weaponsItemsTime_1 -= lp_time;
        }
    }
    else {
        if ((lp_operation == c_playerPropOperAdd)) {
            lib90F7C81D_gv_weaponsItemsTimer.lv_weaponsItemsTime_2 += lp_time;
        }
        else if ((lp_operation == c_playerPropOperSetTo)) {
            lib90F7C81D_gv_weaponsItemsTimer.lv_weaponsItemsTime_2 = lp_time;
        }
        else if ((lp_operation == c_playerPropOperSubtract)) {
            lib90F7C81D_gv_weaponsItemsTimer.lv_weaponsItemsTime_2 -= lp_time;
        }
    }
}

void lib90F7C81D_gf_TurnWeaponsItemsOnOff (string lp_loop, bool lp_option) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_option == true)) {
        if ((lp_loop == "Weapons&Items_1")) {
            TriggerEnable(lib90F7C81D_gt_WeaponsItems1NEW, true);
            lib90F7C81D_gf_RunWeaponsItemsEvent("Weapons&Items_1");
        }
        else {
            TriggerEnable(lib90F7C81D_gt_WeaponsItems2, true);
            lib90F7C81D_gf_RunWeaponsItemsEvent("Weapons&Items_2");
        }
    }
    else {
        if ((lp_loop == "Weapons&Items_1")) {
            TriggerEnable(lib90F7C81D_gt_WeaponsItems1NEW, false);
        }
        else {
            TriggerEnable(lib90F7C81D_gt_WeaponsItems2, false);
        }
    }
}

void lib90F7C81D_gf_GameEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_ge_GeneralEvent_Ident(lp_event));
}

trigger auto_lib90F7C81D_gf_RunEvent_Trigger = null;
string auto_lib90F7C81D_gf_RunEvent_lp_event;

void lib90F7C81D_gf_RunEvent (string lp_event) {
    auto_lib90F7C81D_gf_RunEvent_lp_event = lp_event;

    if (auto_lib90F7C81D_gf_RunEvent_Trigger == null) {
        auto_lib90F7C81D_gf_RunEvent_Trigger = TriggerCreate("auto_lib90F7C81D_gf_RunEvent_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_RunEvent_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_RunEvent_TriggerFunc (bool testConds, bool runActions) {
    string lp_event = auto_lib90F7C81D_gf_RunEvent_lp_event;

    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(lib90F7C81D_ge_GeneralEvent_Ident(lp_event));
    return true;
}

void lib90F7C81D_gf_CampaignEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_ge_CampaignMissionEvent_Ident(lp_event));
}

trigger auto_lib90F7C81D_gf_RunCampaignEvent_Trigger = null;
string auto_lib90F7C81D_gf_RunCampaignEvent_lp_event;

void lib90F7C81D_gf_RunCampaignEvent (string lp_event) {
    auto_lib90F7C81D_gf_RunCampaignEvent_lp_event = lp_event;

    if (auto_lib90F7C81D_gf_RunCampaignEvent_Trigger == null) {
        auto_lib90F7C81D_gf_RunCampaignEvent_Trigger = TriggerCreate("auto_lib90F7C81D_gf_RunCampaignEvent_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_RunCampaignEvent_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_RunCampaignEvent_TriggerFunc (bool testConds, bool runActions) {
    string lp_event = auto_lib90F7C81D_gf_RunCampaignEvent_lp_event;

    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(lib90F7C81D_ge_CampaignMissionEvent_Ident(lp_event));
    return true;
}

void lib90F7C81D_gf_SurvivalEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_ge_SurvivalTimeEvent_Ident(lp_event));
}

trigger auto_lib90F7C81D_gf_RunSurvivalEvent_Trigger = null;
string auto_lib90F7C81D_gf_RunSurvivalEvent_lp_event;

void lib90F7C81D_gf_RunSurvivalEvent (string lp_event) {
    auto_lib90F7C81D_gf_RunSurvivalEvent_lp_event = lp_event;

    if (auto_lib90F7C81D_gf_RunSurvivalEvent_Trigger == null) {
        auto_lib90F7C81D_gf_RunSurvivalEvent_Trigger = TriggerCreate("auto_lib90F7C81D_gf_RunSurvivalEvent_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_RunSurvivalEvent_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_RunSurvivalEvent_TriggerFunc (bool testConds, bool runActions) {
    string lp_event = auto_lib90F7C81D_gf_RunSurvivalEvent_lp_event;

    // Automatic Variable Declarations
    string auto5722958E_val;

    // Implementation
    auto5722958E_val = lp_event;
    if (auto5722958E_val == "_6Min") {
        TriggerSendEvent(lib90F7C81D_ge_SurvivalTimeEvent_Ident(lp_event));
        lib90F7C81D_gf_RunWeatherEvent("RandomWeather");
    }
    else if (auto5722958E_val == "_12Min") {
        TriggerSendEvent(lib90F7C81D_ge_SurvivalTimeEvent_Ident(lp_event));
        lib90F7C81D_gf_RunWeatherEvent("RandomWeather");
    }
    else if (auto5722958E_val == "_18Min") {
        TriggerSendEvent(lib90F7C81D_ge_SurvivalTimeEvent_Ident(lp_event));
        lib90F7C81D_gf_RunWeatherEvent("RandomWeather");
    }
    else if (auto5722958E_val == "_24Min") {
        TriggerSendEvent(lib90F7C81D_ge_SurvivalTimeEvent_Ident(lp_event));
        lib90F7C81D_gf_RunWeatherEvent("RandomWeather");
    }
    else if (auto5722958E_val == "_30Min") {
        TriggerSendEvent(lib90F7C81D_ge_SurvivalTimeEvent_Ident(lp_event));
        lib90F7C81D_gf_RunWeatherEvent("RandomWeather");
    }
    else {
        TriggerSendEvent(lib90F7C81D_ge_SurvivalTimeEvent_Ident(lp_event));
    }
    return true;
}

void lib90F7C81D_gf_GenericEventCombatDamage (unit lp_casterUnit, unit lp_targetUnit, string lp_eventEffect) {
    // Variable Declarations
    string lv_genericEvent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_genericEvent = "CombatDamage";
    DataTableSetString(false, lib90F7C81D_gf_PresetGenericEventParameter(lv_genericEvent, "TriggeringEffect"), (lp_eventEffect));
    DataTableSetUnit(false, lib90F7C81D_gf_PresetGenericEventParameter(lv_genericEvent, "CasterUnit"), lp_casterUnit);
    DataTableSetUnit(false, lib90F7C81D_gf_PresetGenericEventParameter(lv_genericEvent, "TargetUnit"), lp_targetUnit);
    TriggerSendEvent(lib90F7C81D_gf_PresetGenericEvent(lv_genericEvent));
}

void lib90F7C81D_gf_GenericEventCombatCriticalHit (unit lp_casterUnit, unit lp_targetUnit, string lp_eventEffect) {
    // Variable Declarations
    string lv_genericEvent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_genericEvent = "CombatCriticalHit";
    DataTableSetString(false, lib90F7C81D_gf_PresetGenericEventParameter(lv_genericEvent, "TriggeringEffect"), (lp_eventEffect));
    DataTableSetUnit(false, lib90F7C81D_gf_PresetGenericEventParameter(lv_genericEvent, "CasterUnit"), lp_casterUnit);
    DataTableSetUnit(false, lib90F7C81D_gf_PresetGenericEventParameter(lv_genericEvent, "TargetUnit"), lp_targetUnit);
    TriggerSendEvent(lib90F7C81D_gf_PresetGenericEvent(lv_genericEvent));
}

void lib90F7C81D_gf_GenericEventCombatUnitLeavesRegion (unit lp_triggeringUnit, region lp_triggeringRegion) {
    // Variable Declarations
    string lv_genericEvent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_genericEvent = "CombatUnitLeavesRegion";
    DataTableSetUnit(false, lib90F7C81D_gf_PresetGenericEventParameter(lv_genericEvent, "TriggeringUnit"), lp_triggeringUnit);
    DataTableSetRegion(false, lib90F7C81D_gf_PresetGenericEventParameter("CombatUnitLeavesRegion", "TriggeringRegion"), lp_triggeringRegion);
    DataTableSetInt(false, lib90F7C81D_gf_PresetGenericEventParameter(lv_genericEvent, "TriggeringPlayer"), UnitGetOwner(lp_triggeringUnit));
    TriggerSendEvent(lib90F7C81D_gf_PresetGenericEvent(lv_genericEvent));
}

void lib90F7C81D_gf_GenericEventPlayerUsesDialogItem (int lp_player, int lp_dialogItem, string lp_genericEvent) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, lib90F7C81D_gf_PresetGenericEventParameter(lp_genericEvent, "TriggeringPlayer"), lp_player);
    libNtve_gf_SaveDataTableValueDialogItem(false, lib90F7C81D_gf_PresetGenericEventParameter(lp_genericEvent, "DialogItemUsed"), lp_dialogItem);
    TriggerSendEvent(lib90F7C81D_gf_PresetGenericEvent(lp_genericEvent));
}

void lib90F7C81D_gf_GenericEventBackupPlayerBank (int lp_player, string lp_genericEvent) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(false, lib90F7C81D_gf_PresetGenericEventParameter(lp_genericEvent, "TriggeringPlayer"), lp_player);
    TriggerSendEvent(lib90F7C81D_gf_PresetGenericEvent(lp_genericEvent));
}

void lib90F7C81D_gf_GenericEventBossRushWaveDisplay (int lp_waveNumber, int lp_maxWave, int lp_waveInstanceID, string lp_genericEvent) {
    // Variable Declarations
    string lv_genericEvent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_genericEvent = "BossRushWaveDisplay";
    DataTableSetInt(false, lib90F7C81D_gf_PresetGenericEventParameter(lp_genericEvent, "Integer"), lp_waveNumber);
    DataTableSetInt(false, lib90F7C81D_gf_PresetGenericEventParameter(lp_genericEvent, "Real"), lp_maxWave);
    DataTableSetInt(false, lib90F7C81D_gf_PresetGenericEventParameter(lp_genericEvent, "String"), lp_waveInstanceID);
    TriggerSendEvent(lib90F7C81D_gf_PresetGenericEvent(lp_genericEvent));
}

void lib90F7C81D_gf_RegisterMOSToEvents (unit lp_mOS) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitDied(lib90F7C81D_gt_HeroDeath, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)));
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_WeaponLogic, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_WeaponLogic, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_WeaponLogic, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_WeaponLogic, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), c_unitInventoryChangeGives, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_WeaponLogic, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), c_unitInventoryChangeMoves, null);
    TriggerAddEventUnitBehaviorChangeFromCategory(lib90F7C81D_gt_SDAilmentBar, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), c_unitBehaviorFlagUser1, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(lib90F7C81D_gt_SDAilmentBar, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), c_unitBehaviorFlagUser1, c_unitBehaviorChangeDestroy);
    lib90F7C81D_gf_RegisterMosAchievements(libE6C8C21C_gf_ReturnUnit(lp_mOS), UnitGetOwner(lp_mOS));
}

void lib90F7C81D_gf_RegisterMOSToWeaponsCache (trigger lp_weaponCacheTrig, unit lp_mOS) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventUnitRegion(lp_weaponCacheTrig, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), RegionFromId(33), true);
    TriggerAddEventUnitRegion(lp_weaponCacheTrig, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), RegionFromId(34), true);
    TriggerAddEventUnitRegion(lp_weaponCacheTrig, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), RegionFromId(35), true);
    TriggerAddEventUnitRegion(lp_weaponCacheTrig, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), RegionFromId(36), true);
    TriggerAddEventUnitRegion(lp_weaponCacheTrig, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mOS)), RegionFromId(37), true);
}

void lib90F7C81D_gf_CombatCriticalHit (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_gf_PresetGenericEvent("CombatCriticalHit"));
}

void lib90F7C81D_gf_CombatDamage (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_gf_PresetGenericEvent("CombatDamage"));
}

void lib90F7C81D_gf_CombatUnitLeavesRegion (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_gf_PresetGenericEvent("CombatUnitLeavesRegion"));
}

void lib90F7C81D_gf_BossRushWaveDisplay (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, lib90F7C81D_gf_PresetGenericEvent("BossRushWaveDisplay"));
}

string lib90F7C81D_gf_PresetGenericEvent (string lp_genericEvent) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_genericEvent);
}

string lib90F7C81D_gf_PresetGenericEventParameter (string lp_genericEvent, string lp_genericEventParameter) {
    // Automatic Variable Declarations
    // Implementation
    return TriggerEventParamName((lp_genericEvent), (lp_genericEventParameter));
}

int lib90F7C81D_gf_GetWeaponPreset (unit lp_item) {
    // Variable Declarations
    int lv_preset;

    // Automatic Variable Declarations
    string autoEB1C9C0B_val;

    // Variable Initialization

    // Implementation
    autoEB1C9C0B_val = UnitGetType(lp_item);
    if (autoEB1C9C0B_val == "HK42") {
        lv_preset = 56;
    }
    else if (autoEB1C9C0B_val == "SOFAR") {
        lv_preset = 57;
    }
    else if (autoEB1C9C0B_val == "M41SAW") {
        lv_preset = 58;
    }
    else if (autoEB1C9C0B_val == "StynerBR2") {
        lv_preset = 59;
    }
    else if (autoEB1C9C0B_val == "M5MAR") {
        lv_preset = 60;
    }
    else if (autoEB1C9C0B_val == "USMCR") {
        lv_preset = 61;
    }
    else if (autoEB1C9C0B_val == "W1200") {
        lv_preset = 62;
    }
    else if (autoEB1C9C0B_val == "M241MMG") {
        lv_preset = 63;
    }
    else if (autoEB1C9C0B_val == "Mk14") {
        lv_preset = 54;
    }
    else if (autoEB1C9C0B_val == "M92Torrent") {
        lv_preset = 55;
    }
    else if (autoEB1C9C0B_val == "M9Flamethrower") {
        lv_preset = 53;
    }
    else if (autoEB1C9C0B_val == "M1014") {
        lv_preset = 52;
    }
    else if (autoEB1C9C0B_val == "IPR") {
        lv_preset = 51;
    }
    else if (autoEB1C9C0B_val == "M935Minigun") {
        lv_preset = 50;
    }
    else if (autoEB1C9C0B_val == "DeathMachine") {
        lv_preset = 49;
    }
    else if (autoEB1C9C0B_val == "XR42") {
        lv_preset = 48;
    }
    else {
    }
    return lv_preset;
}

text lib90F7C81D_gf_GetWeaponTooltipIcons (string lp_weapon) {
    // Variable Declarations
    string lv_instanceIndex;
    text lv_text;

    // Automatic Variable Declarations
    string auto9CEFF36E_userType;
    int auto9CEFF36E_i;

    // Variable Initialization

    // Implementation
    auto9CEFF36E_userType = "Weapons";
    auto9CEFF36E_i = 1;
    for ( ; auto9CEFF36E_i <= UserDataInstanceCount(auto9CEFF36E_userType) ; auto9CEFF36E_i += 1 ) {
        lv_instanceIndex = UserDataInstance(auto9CEFF36E_userType, auto9CEFF36E_i);
        if ((UserDataGetGameLink("Weapons", lv_instanceIndex, "Weapon", 1) == lp_weapon)) {
            lv_text = UserDataGetText("Weapons", lv_instanceIndex, "Tooltip", 1);
            break;
        }

    }
    return lv_text;
}

void lib90F7C81D_gf_StoreWeaponIndex (unit lp_weapon) {
    // Automatic Variable Declarations
    string autoDD83C45A_val;

    // Implementation
    autoDD83C45A_val = UnitGetType(lp_weapon);
    if (autoDD83C45A_val == "HK42") {
        UnitSetCustomValue(lp_weapon, (56), UserDataGetFixed("Weapons", "HK42", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "SOFAR") {
        UnitSetCustomValue(lp_weapon, (57), UserDataGetFixed("Weapons", "SO-FAR", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "M41SAW") {
        UnitSetCustomValue(lp_weapon, (58), UserDataGetFixed("Weapons", "M41 SAW", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "StynerBR2") {
        UnitSetCustomValue(lp_weapon, (59), UserDataGetFixed("Weapons", "Styner BR-2", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "M5MAR") {
        UnitSetCustomValue(lp_weapon, (60), UserDataGetFixed("Weapons", "M5 MAR", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "USMCR") {
        UnitSetCustomValue(lp_weapon, (61), UserDataGetFixed("Weapons", "US MCR", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "W1200") {
        UnitSetCustomValue(lp_weapon, (62), UserDataGetFixed("Weapons", "W1200", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "M241MMG") {
        UnitSetCustomValue(lp_weapon, (63), UserDataGetFixed("Weapons", "M241 MMG", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "Mk14") {
        UnitSetCustomValue(lp_weapon, (54), UserDataGetFixed("Weapons", "Mk-14", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "M92Torrent") {
        UnitSetCustomValue(lp_weapon, (55), UserDataGetFixed("Weapons", "M92 Torrent", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "M9Flamethrower") {
        UnitSetCustomValue(lp_weapon, (53), UserDataGetFixed("Weapons", "M9 Flamethrower", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "M1014") {
        UnitSetCustomValue(lp_weapon, (52), UserDataGetFixed("Weapons", "M1014", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "IPR") {
        UnitSetCustomValue(lp_weapon, (51), UserDataGetFixed("Weapons", "IPR", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "M935Minigun") {
        UnitSetCustomValue(lp_weapon, (50), UserDataGetFixed("Weapons", "M935 Minigun", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "DeathMachine") {
        UnitSetCustomValue(lp_weapon, (49), UserDataGetFixed("Weapons", "Death Machine", "Rounds", 1));
    }
    else if (autoDD83C45A_val == "XR42") {
        UnitSetCustomValue(lp_weapon, (48), UserDataGetFixed("Weapons", "XR-42", "Rounds", 1));
    }
    else {
    }
}

void lib90F7C81D_gf_EnableWeapon (int lp_index) {
    // Variable Declarations
    string lv_weapon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_weapon = UserDataGetString("MOSSetup", UserDataInstance("MOSSetup", lp_index), "Weapon Type", 1);

    // Implementation
    if ((lv_weapon == "Rifles")) {
        if ((lib90F7C81D_gv_allowWeapon.lv_rifles == false)) {
            lib90F7C81D_gv_allowWeapon.lv_rifles = true;
        }
    }
    else if ((lv_weapon == "Automatics")) {
        if ((lib90F7C81D_gv_allowWeapon.lv_automatics == false)) {
            lib90F7C81D_gv_allowWeapon.lv_automatics = true;
        }
    }
    else if ((lv_weapon == "Shotguns")) {
        if ((lib90F7C81D_gv_allowWeapon.lv_shotguns == false)) {
            lib90F7C81D_gv_allowWeapon.lv_shotguns = true;
        }
    }
    else if ((lv_weapon == "DMR")) {
        if ((lib90F7C81D_gv_allowWeapon.lv_dMR == false)) {
            lib90F7C81D_gv_allowWeapon.lv_dMR = true;
        }
    }
    else if ((lv_weapon == "Sniper")) {
        if ((lib90F7C81D_gv_allowWeapon.lv_sniper == false)) {
            lib90F7C81D_gv_allowWeapon.lv_sniper = true;
        }
    }
    else if ((lv_weapon == "Plasmas")) {
        if ((lib90F7C81D_gv_allowWeapon.lv_plasmas == false)) {
            lib90F7C81D_gv_allowWeapon.lv_plasmas = true;
        }
    }
    else if ((lv_weapon == "Flamethrowers")) {
        if ((lib90F7C81D_gv_allowWeapon.lv_flamethrowers == false)) {
            lib90F7C81D_gv_allowWeapon.lv_flamethrowers = true;
        }
    }
    else if ((lv_weapon == "Minigun")) {
        if ((lib90F7C81D_gv_allowWeapon.lv_minigun == false)) {
            lib90F7C81D_gv_allowWeapon.lv_minigun = true;
        }
    }
}

int lib90F7C81D_gf_GetDataTableArmorIndex (unit lp_armor) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto2B0F0A7F_ae;
    const int auto2B0F0A7F_ai = 1;

    // Variable Initialization

    // Implementation
    auto2B0F0A7F_ae = lib90F7C81D_gv_armor.lv_count;
    lv_index = 1;
    for ( ; ( (auto2B0F0A7F_ai >= 0 && lv_index <= auto2B0F0A7F_ae) || (auto2B0F0A7F_ai < 0 && lv_index >= auto2B0F0A7F_ae) ) ; lv_index += auto2B0F0A7F_ai ) {
        if ((DataTableGetUnit(true, ("ArmorType" + IntToString(lv_index))) == lp_armor)) {
            return lv_index;
        }

    }
    return lv_index;
}

void lib90F7C81D_gf_StoreArmorStats (fixed lp_shieldsRemaining, unit lp_unit, bool lp_removeArmor) {
    // Variable Declarations
    int lv_index;
    int lv_armorSlot;
    bool lv_armorModified;

    // Automatic Variable Declarations
    int auto2B2F9326_ae;
    const int auto2B2F9326_ai = 1;
    int autoFAD519F9_ae;
    const int autoFAD519F9_ai = 1;

    // Variable Initialization

    // Implementation
    auto2B2F9326_ae = lib90F7C81D_gv_armor.lv_count;
    lv_index = 1;
    for ( ; ( (auto2B2F9326_ai >= 0 && lv_index <= auto2B2F9326_ae) || (auto2B2F9326_ai < 0 && lv_index >= auto2B2F9326_ae) ) ; lv_index += auto2B2F9326_ai ) {
        if ((lv_armorModified == false)) {
            autoFAD519F9_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
            lv_armorSlot = 1;
            for ( ; ( (autoFAD519F9_ai >= 0 && lv_armorSlot <= autoFAD519F9_ae) || (autoFAD519F9_ai < 0 && lv_armorSlot >= autoFAD519F9_ae) ) ; lv_armorSlot += autoFAD519F9_ai ) {
                if ((UnitInventoryItem(lp_unit, lv_armorSlot) == DataTableGetUnit(true, ("ArmorType" + IntToString(lv_index)))) && (DataTableValueExists(true, ("ArmorType" + IntToString(lv_index))) == true) && (UnitHasBehavior2(UnitInventoryItem(lp_unit, lv_armorSlot), "ArmorMain") == true)) {
                    lv_armorModified = true;
                    if ((lp_removeArmor == true)) {
                        UnitRemove(UnitInventoryItem(lp_unit, lv_armorSlot));
                        DataTableValueRemove(true, ("ArmorHealth" + IntToString(lv_index)));
                        DataTableValueRemove(true, ("ArmorType" + IntToString(lv_index)));
                    }
                    else {
                        DataTableSetFixed(true, ("ArmorHealth" + IntToString(lv_index)), lp_shieldsRemaining);
                    }
                    break;
                }
            }
        }
        else {
            break;
        }
    }
}

void lib90F7C81D_gf_StoreArmorIndex (unit lp_armor) {
    // Variable Declarations
    int lv_index;
    string lv_shieldMaxBonus;

    // Automatic Variable Declarations
    int auto42D3FD81_ae;
    const int auto42D3FD81_ai = 1;

    // Variable Initialization

    // Implementation
    lib90F7C81D_gv_armor.lv_count += 1;
    auto42D3FD81_ae = lib90F7C81D_gv_armor.lv_count;
    lv_index = 1;
    for ( ; ( (auto42D3FD81_ai >= 0 && lv_index <= auto42D3FD81_ae) || (auto42D3FD81_ai < 0 && lv_index >= auto42D3FD81_ae) ) ; lv_index += auto42D3FD81_ai ) {
        if ((DataTableValueExists(true, ("ArmorType" + IntToString(lv_index))) == false)) {
            DataTableSetUnit(true, ("ArmorType" + IntToString(lv_index)), lp_armor);
            if ((UnitGetType(lp_armor) == "KevlarBodyArmor")) {
                lv_shieldMaxBonus = "Behavior,KevlarBodyArmor,Modification.VitalMaxArray[Shields]";
            }
            else if ((UnitGetType(lp_armor) == "SPCS")) {
                lv_shieldMaxBonus = "Behavior,SPCS,Modification.VitalMaxArray[Shields]";
            }
            DataTableSetFixed(true, ("ArmorHealth" + IntToString(lv_index)), libNtve_gf_CatalogReferenceGetAsReal(lv_shieldMaxBonus, c_playerAny));
            break;
        }

    }
}

trigger auto_lib90F7C81D_gf_DropArmor_Trigger = null;
unit auto_lib90F7C81D_gf_DropArmor_lp_dropper;
fixed auto_lib90F7C81D_gf_DropArmor_lp_spread;

void lib90F7C81D_gf_DropArmor (unit lp_dropper, fixed lp_spread) {
    auto_lib90F7C81D_gf_DropArmor_lp_dropper = lp_dropper;
    auto_lib90F7C81D_gf_DropArmor_lp_spread = lp_spread;

    if (auto_lib90F7C81D_gf_DropArmor_Trigger == null) {
        auto_lib90F7C81D_gf_DropArmor_Trigger = TriggerCreate("auto_lib90F7C81D_gf_DropArmor_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_DropArmor_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_DropArmor_TriggerFunc (bool testConds, bool runActions) {
    unit lp_dropper = auto_lib90F7C81D_gf_DropArmor_lp_dropper;
    fixed lp_spread = auto_lib90F7C81D_gf_DropArmor_lp_spread;

    // Variable Declarations
    fixed lv_difference;
    unit lv_item;
    point lv_pos;
    point lv_pos2;
    int lv_i;
    string lv_shieldMaxBonus;

    // Automatic Variable Declarations
    unitgroup auto2EFADF76_g;
    int auto2EFADF76_u;

    // Variable Initialization
    lv_pos = UnitGetPosition(lp_dropper);

    // Implementation
    auto2EFADF76_g = UnitInventoryGroup(lp_dropper);
    auto2EFADF76_u = UnitGroupCount(auto2EFADF76_g, c_unitCountAll);
    for (;; auto2EFADF76_u -= 1) {
        lv_item = UnitGroupUnitFromEnd(auto2EFADF76_g, auto2EFADF76_u);
        if (lv_item == null) { break; }
        if ((UnitHasBehavior2(lv_item, "ArmorMain") == false) && ((UnitGetType(lv_item) == "KevlarBodyArmor") || (UnitGetType(lv_item) == "SPCS"))) {
            while ((lv_i < 16)) {
                lv_pos2 = PointWithOffset(lv_pos, RandomFixed(((-lp_spread)), lp_spread), RandomFixed(((-lp_spread)), lp_spread));
                if ((PointPathingIsConnected(lv_pos, lv_pos2) == true)) {
                    break;
                }

                lv_pos2 = null;
                lv_i += 1;
            }
            if ((lv_pos2 == null)) {
                lv_pos2 = lv_pos;
            }

            UnitSetPosition(lv_item, lv_pos2, false);
            if ((UnitGetType(lv_item) == "KevlarBodyArmor")) {
                lv_shieldMaxBonus = "Behavior,KevlarBodyArmor,Modification.VitalMaxArray[Shields]";
            }
            else if ((UnitGetType(lv_item) == "SPCS")) {
                lv_shieldMaxBonus = "Behavior,SPCS,Modification.VitalMaxArray[Shields]";
            }
            UnitSetInfoTip(lv_item, (StringExternal("Param/Value/lib_90F7C81D_D4692B51") + UnitGetName(lv_item) + StringExternal("Param/Value/lib_90F7C81D_07081AB0") + StringExternal("Param/Value/lib_90F7C81D_59ACC47B") + FixedToText((100.0 * (DataTableGetFixed(true, ("ArmorHealth" + IntToString(lib90F7C81D_gf_GetDataTableArmorIndex(lv_item)))) / libNtve_gf_CatalogReferenceGetAsReal(lv_shieldMaxBonus, c_playerAny))), 0) + StringExternal("Param/Value/lib_90F7C81D_5DA355B0")));
            UnitSetFacing(lv_item, RandomFixed(360.0, 180.0), 0.0);
        }

    }
    return true;
}

trigger auto_lib90F7C81D_gf_SpawnItem_Trigger = null;
string auto_lib90F7C81D_gf_SpawnItem_lp_item;
int auto_lib90F7C81D_gf_SpawnItem_lp_chance;

void lib90F7C81D_gf_SpawnItem (string lp_item, int lp_chance) {
    auto_lib90F7C81D_gf_SpawnItem_lp_item = lp_item;
    auto_lib90F7C81D_gf_SpawnItem_lp_chance = lp_chance;

    if (auto_lib90F7C81D_gf_SpawnItem_Trigger == null) {
        auto_lib90F7C81D_gf_SpawnItem_Trigger = TriggerCreate("auto_lib90F7C81D_gf_SpawnItem_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_SpawnItem_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_SpawnItem_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_lib90F7C81D_gf_SpawnItem_lp_item;
    int lp_chance = auto_lib90F7C81D_gf_SpawnItem_lp_chance;

    // Variable Declarations
    point lv_point;
    unit lv_droppod;
    unit lv_itemspawned;
    bool lv_itemisvisible;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = RegionRandomPoint(RegionPlayableMap());
    lv_itemisvisible = true;

    // Implementation
    Wait(RandomFixed(0.0, 1.5), c_timeGame);
    lv_point = RegionRandomPoint(RegionPlayableMap());
    if ((RandomInt(1, lp_chance) == 1) && (PointPathingPassable(lv_point) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lv_point);
        lv_itemspawned = UnitLastCreated();
        UnitBehaviorAdd(lv_itemspawned, "NoDraw", lv_itemspawned, 1);
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(lv_itemspawned, "AmmoCharges", -2.0);
            lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(lv_itemspawned, "AmmoCharges", 3.0);
            UnitSetInfoTip(lv_itemspawned, (StringExternal("Param/Value/lib_90F7C81D_35D23939") + UnitGetName(lv_itemspawned) + StringExternal("Param/Value/lib_90F7C81D_08596B4E") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_1AF17268")));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lv_point);
        lv_droppod = UnitLastCreated();
        UnitSetScale(lv_droppod, 50.0, 50.0, 50.0);
        Wait(2.5, c_timeGame);
        UnitKill(lv_droppod);
        Wait(1.5625, c_timeGame);
        UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
        UnitRemove(lv_droppod);
    }

    return true;
}

trigger auto_lib90F7C81D_gf_SpawnItemNEW_Trigger = null;
string auto_lib90F7C81D_gf_SpawnItemNEW_lp_item;
int auto_lib90F7C81D_gf_SpawnItemNEW_lp_chance;
int auto_lib90F7C81D_gf_SpawnItemNEW_lp_weightMax;
int auto_lib90F7C81D_gf_SpawnItemNEW_lp_minimumAmount;
int auto_lib90F7C81D_gf_SpawnItemNEW_lp_maximumAmount;

void lib90F7C81D_gf_SpawnItemNEW (string lp_item, int lp_chance, int lp_weightMax, int lp_minimumAmount, int lp_maximumAmount) {
    auto_lib90F7C81D_gf_SpawnItemNEW_lp_item = lp_item;
    auto_lib90F7C81D_gf_SpawnItemNEW_lp_chance = lp_chance;
    auto_lib90F7C81D_gf_SpawnItemNEW_lp_weightMax = lp_weightMax;
    auto_lib90F7C81D_gf_SpawnItemNEW_lp_minimumAmount = lp_minimumAmount;
    auto_lib90F7C81D_gf_SpawnItemNEW_lp_maximumAmount = lp_maximumAmount;

    if (auto_lib90F7C81D_gf_SpawnItemNEW_Trigger == null) {
        auto_lib90F7C81D_gf_SpawnItemNEW_Trigger = TriggerCreate("auto_lib90F7C81D_gf_SpawnItemNEW_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_SpawnItemNEW_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_SpawnItemNEW_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_lib90F7C81D_gf_SpawnItemNEW_lp_item;
    int lp_chance = auto_lib90F7C81D_gf_SpawnItemNEW_lp_chance;
    int lp_weightMax = auto_lib90F7C81D_gf_SpawnItemNEW_lp_weightMax;
    int lp_minimumAmount = auto_lib90F7C81D_gf_SpawnItemNEW_lp_minimumAmount;
    int lp_maximumAmount = auto_lib90F7C81D_gf_SpawnItemNEW_lp_maximumAmount;

    // Variable Declarations
    int lv_index;
    point lv_point;
    unit lv_droppod;
    unit lv_itemspawned;
    bool lv_itemisvisible;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    int auto10411EB1_ae;
    const int auto10411EB1_ai = 1;

    // Variable Initialization
    lv_itemisvisible = true;

    // Implementation
    Wait(RandomFixed(0.0, 1.5), c_timeGame);
    auto10411EB1_ae = lp_maximumAmount;
    lv_index = 1;
    for ( ; ( (auto10411EB1_ai >= 0 && lv_index <= auto10411EB1_ae) || (auto10411EB1_ai < 0 && lv_index >= auto10411EB1_ae) ) ; lv_index += auto10411EB1_ai ) {
        if ((RandomInt(1, lp_weightMax) <= lp_chance)) {
            while (true) {
                lv_point = RegionRandomPoint(RegionPlayableMap());
                if ((PointPathingPassable(lv_point) == true)) {
                    break;
                }
                else {
                    Wait(0.0625, c_timeGame);
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lv_point);
            lv_itemspawned = UnitLastCreated();
            UnitBehaviorAdd(lv_itemspawned, "NoDraw", lv_itemspawned, 1);
            if ((lp_item == "Magazines")) {
                UnitAddChargeUsed(lv_itemspawned, "AmmoCharges", -2.0);
                lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(lv_itemspawned, "AmmoCharges", 3.0);
                UnitSetInfoTip(lv_itemspawned, (StringExternal("Param/Value/lib_90F7C81D_68143DA9") + UnitGetName(lv_itemspawned) + StringExternal("Param/Value/lib_90F7C81D_B6DAEC42") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_B3044CA4")));
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lv_point);
            lv_droppod = UnitLastCreated();
            UnitSetScale(lv_droppod, 50.0, 50.0, 50.0);
            Wait(2.5, c_timeGame);
            UnitKill(lv_droppod);
            Wait(1.5625, c_timeGame);
            UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
            UnitRemove(lv_droppod);
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

void lib90F7C81D_gf_SpawnItemAtLocation (string lp_item, int lp_chance, point lp_point) {
    // Variable Declarations
    unit lv_itemspawned;
    unit lv_droppod;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RandomInt(1, lp_chance) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lp_point);
        lv_itemspawned = UnitLastCreated();
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
            lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(UnitLastCreated(), "AmmoCharges", 3.0);
            UnitSetInfoTip(lv_itemspawned, (StringExternal("Param/Value/lib_90F7C81D_2BEDCDF2") + UnitGetName(lv_itemspawned) + StringExternal("Param/Value/lib_90F7C81D_D7464BB9") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_F0210320")));
        }

    }

}

void lib90F7C81D_gf_SpawnItemAtLocationNEW (string lp_item, int lp_chance, point lp_point, int lp_weightMax, int lp_minimumAmount, int lp_maximumAmount) {
    // Variable Declarations
    unit lv_itemspawned;
    int lv_index;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    int autoA8FF8EA3_ae;
    const int autoA8FF8EA3_ai = 1;

    // Variable Initialization

    // Implementation
    autoA8FF8EA3_ae = lp_maximumAmount;
    lv_index = 1;
    for ( ; ( (autoA8FF8EA3_ai >= 0 && lv_index <= autoA8FF8EA3_ae) || (autoA8FF8EA3_ai < 0 && lv_index >= autoA8FF8EA3_ae) ) ; lv_index += autoA8FF8EA3_ai ) {
        if ((RandomInt(1, lp_weightMax) <= lp_chance)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lp_point);
            lv_itemspawned = UnitLastCreated();
            if ((lp_item == "Magazines")) {
                UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
                lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(UnitLastCreated(), "AmmoCharges", 3.0);
                UnitSetInfoTip(lv_itemspawned, (StringExternal("Param/Value/lib_90F7C81D_DBF2F6EC") + UnitGetName(lv_itemspawned) + StringExternal("Param/Value/lib_90F7C81D_1926F028") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_3DE96A0E")));
            }

        }

    }
    Wait(0.0625, c_timeGame);
}

trigger auto_lib90F7C81D_gf_AirDropItemToRegion_Trigger = null;
string auto_lib90F7C81D_gf_AirDropItemToRegion_lp_item;
region auto_lib90F7C81D_gf_AirDropItemToRegion_lp_region;
int auto_lib90F7C81D_gf_AirDropItemToRegion_lp_chance;

void lib90F7C81D_gf_AirDropItemToRegion (string lp_item, region lp_region, int lp_chance) {
    auto_lib90F7C81D_gf_AirDropItemToRegion_lp_item = lp_item;
    auto_lib90F7C81D_gf_AirDropItemToRegion_lp_region = lp_region;
    auto_lib90F7C81D_gf_AirDropItemToRegion_lp_chance = lp_chance;

    if (auto_lib90F7C81D_gf_AirDropItemToRegion_Trigger == null) {
        auto_lib90F7C81D_gf_AirDropItemToRegion_Trigger = TriggerCreate("auto_lib90F7C81D_gf_AirDropItemToRegion_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_AirDropItemToRegion_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_AirDropItemToRegion_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_lib90F7C81D_gf_AirDropItemToRegion_lp_item;
    region lp_region = auto_lib90F7C81D_gf_AirDropItemToRegion_lp_region;
    int lp_chance = auto_lib90F7C81D_gf_AirDropItemToRegion_lp_chance;

    // Variable Declarations
    point lv_point;
    unit lv_droppod;
    unit lv_itemspawned;
    bool lv_itemisvisible;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = RegionRandomPoint(lp_region);
    lv_itemisvisible = true;

    // Implementation
    Wait(RandomFixed(0.0, 1.5), c_timeGame);
    lv_point = RegionRandomPoint(lp_region);
    if ((RandomInt(1, lp_chance) == 1) && (PointPathingPassable(lv_point) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lv_point);
        lv_itemspawned = UnitLastCreated();
        UnitBehaviorAdd(lv_itemspawned, "NoDraw", lv_itemspawned, 1);
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(lv_itemspawned, "AmmoCharges", -2.0);
            lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(lv_itemspawned, "AmmoCharges", 3.0);
            UnitSetInfoTip(lv_itemspawned, (StringExternal("Param/Value/lib_90F7C81D_F6A5DA19") + UnitGetName(lv_itemspawned) + StringExternal("Param/Value/lib_90F7C81D_A43C517D") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_07C567CA")));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lv_point);
        lv_droppod = UnitLastCreated();
        UnitSetScale(lv_droppod, 50.0, 50.0, 50.0);
        Wait(2.5, c_timeGame);
        UnitKill(lv_droppod);
        Wait(1.5625, c_timeGame);
        UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
        UnitRemove(lv_droppod);
    }

    return true;
}

trigger auto_lib90F7C81D_gf_AirDropItemToRegionNEW_Trigger = null;
string auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_item;
region auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_region;
int auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_chance;
int auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_weightMax;
int auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_minimumAmount;
int auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_maximumAmount;

void lib90F7C81D_gf_AirDropItemToRegionNEW (string lp_item, region lp_region, int lp_chance, int lp_weightMax, int lp_minimumAmount, int lp_maximumAmount) {
    auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_item = lp_item;
    auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_region = lp_region;
    auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_chance = lp_chance;
    auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_weightMax = lp_weightMax;
    auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_minimumAmount = lp_minimumAmount;
    auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_maximumAmount = lp_maximumAmount;

    if (auto_lib90F7C81D_gf_AirDropItemToRegionNEW_Trigger == null) {
        auto_lib90F7C81D_gf_AirDropItemToRegionNEW_Trigger = TriggerCreate("auto_lib90F7C81D_gf_AirDropItemToRegionNEW_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_AirDropItemToRegionNEW_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_AirDropItemToRegionNEW_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_item;
    region lp_region = auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_region;
    int lp_chance = auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_chance;
    int lp_weightMax = auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_weightMax;
    int lp_minimumAmount = auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_minimumAmount;
    int lp_maximumAmount = auto_lib90F7C81D_gf_AirDropItemToRegionNEW_lp_maximumAmount;

    // Variable Declarations
    point lv_point;
    unit lv_droppod;
    unit lv_itemspawned;
    bool lv_itemisvisible;
    fixed lv_chargecount;
    int lv_index;

    // Automatic Variable Declarations
    int auto9C4913ED_ae;
    const int auto9C4913ED_ai = 1;

    // Variable Initialization
    lv_itemisvisible = true;

    // Implementation
    Wait(RandomFixed(0.0, 1.5), c_timeGame);
    auto9C4913ED_ae = lp_maximumAmount;
    lv_index = 1;
    for ( ; ( (auto9C4913ED_ai >= 0 && lv_index <= auto9C4913ED_ae) || (auto9C4913ED_ai < 0 && lv_index >= auto9C4913ED_ae) ) ; lv_index += auto9C4913ED_ai ) {
        if ((RandomInt(1, lp_weightMax) <= lp_chance)) {
            while (true) {
                lv_point = RegionRandomPoint(lp_region);
                if ((PointPathingPassable(lv_point) == true)) {
                    break;
                }
                else {
                    Wait(0.0625, c_timeGame);
                }
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lv_point);
            lv_itemspawned = UnitLastCreated();
            UnitBehaviorAdd(lv_itemspawned, "NoDraw", lv_itemspawned, 1);
            if ((lp_item == "Magazines")) {
                UnitAddChargeUsed(lv_itemspawned, "AmmoCharges", -2.0);
                lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(lv_itemspawned, "AmmoCharges", 3.0);
                UnitSetInfoTip(lv_itemspawned, (StringExternal("Param/Value/lib_90F7C81D_7C36E834") + UnitGetName(lv_itemspawned) + StringExternal("Param/Value/lib_90F7C81D_02A27036") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_31FEAFC3")));
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lv_point);
            lv_droppod = UnitLastCreated();
            UnitSetScale(lv_droppod, 50.0, 50.0, 50.0);
            Wait(2.5, c_timeGame);
            UnitKill(lv_droppod);
            Wait(1.5625, c_timeGame);
            UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
            UnitRemove(lv_droppod);
        }

    }
    Wait(0.0625, c_timeGame);
    return true;
}

trigger auto_lib90F7C81D_gf_AirDropItemToLocation_Trigger = null;
string auto_lib90F7C81D_gf_AirDropItemToLocation_lp_item;
point auto_lib90F7C81D_gf_AirDropItemToLocation_lp_point;
int auto_lib90F7C81D_gf_AirDropItemToLocation_lp_chance;

void lib90F7C81D_gf_AirDropItemToLocation (string lp_item, point lp_point, int lp_chance) {
    auto_lib90F7C81D_gf_AirDropItemToLocation_lp_item = lp_item;
    auto_lib90F7C81D_gf_AirDropItemToLocation_lp_point = lp_point;
    auto_lib90F7C81D_gf_AirDropItemToLocation_lp_chance = lp_chance;

    if (auto_lib90F7C81D_gf_AirDropItemToLocation_Trigger == null) {
        auto_lib90F7C81D_gf_AirDropItemToLocation_Trigger = TriggerCreate("auto_lib90F7C81D_gf_AirDropItemToLocation_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_AirDropItemToLocation_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_AirDropItemToLocation_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_lib90F7C81D_gf_AirDropItemToLocation_lp_item;
    point lp_point = auto_lib90F7C81D_gf_AirDropItemToLocation_lp_point;
    int lp_chance = auto_lib90F7C81D_gf_AirDropItemToLocation_lp_chance;

    // Variable Declarations
    unit lv_itemspawned;
    unit lv_droppod;
    int lv_ping;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    Wait(RandomFixed(0.0, 1.5), c_timeGame);
    if ((RandomInt(1, lp_chance) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, c_unitCreateIgnorePlacement, 0, lp_point);
        lv_itemspawned = UnitLastCreated();
        UnitBehaviorAdd(lv_itemspawned, "NoDraw", lv_itemspawned, 1);
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(lv_itemspawned, "AmmoCharges", -2.0);
            lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(lv_itemspawned, "AmmoCharges", 3.0);
            UnitSetInfoTip(lv_itemspawned, (StringExternal("Param/Value/lib_90F7C81D_3EDFC5C0") + UnitGetName(lv_itemspawned) + StringExternal("Param/Value/lib_90F7C81D_F64312F2") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_26B2A8B5")));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lp_point);
        lv_droppod = UnitLastCreated();
        UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
        Wait(2.5, c_timeGame);
        UnitKill(lv_droppod);
        Wait(1.5625, c_timeGame);
        UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
        UnitRemove(lv_droppod);
    }

    return true;
}

trigger auto_lib90F7C81D_gf_AirDropItemToLocationNEW_Trigger = null;
string auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_item;
point auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_point;
int auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_chance;
int auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_weightMax;
int auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_minimumAmount;
int auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_maximumAmount;

void lib90F7C81D_gf_AirDropItemToLocationNEW (string lp_item, point lp_point, int lp_chance, int lp_weightMax, int lp_minimumAmount, int lp_maximumAmount) {
    auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_item = lp_item;
    auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_point = lp_point;
    auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_chance = lp_chance;
    auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_weightMax = lp_weightMax;
    auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_minimumAmount = lp_minimumAmount;
    auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_maximumAmount = lp_maximumAmount;

    if (auto_lib90F7C81D_gf_AirDropItemToLocationNEW_Trigger == null) {
        auto_lib90F7C81D_gf_AirDropItemToLocationNEW_Trigger = TriggerCreate("auto_lib90F7C81D_gf_AirDropItemToLocationNEW_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_AirDropItemToLocationNEW_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_AirDropItemToLocationNEW_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_item;
    point lp_point = auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_point;
    int lp_chance = auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_chance;
    int lp_weightMax = auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_weightMax;
    int lp_minimumAmount = auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_minimumAmount;
    int lp_maximumAmount = auto_lib90F7C81D_gf_AirDropItemToLocationNEW_lp_maximumAmount;

    // Variable Declarations
    unit lv_itemspawned;
    unit lv_droppod;
    int lv_ping;
    fixed lv_chargecount;
    int lv_index;

    // Automatic Variable Declarations
    int auto135E0315_ae;
    const int auto135E0315_ai = 1;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    Wait(RandomFixed(0.0, 1.5), c_timeGame);
    auto135E0315_ae = lp_maximumAmount;
    lv_index = 1;
    for ( ; ( (auto135E0315_ai >= 0 && lv_index <= auto135E0315_ae) || (auto135E0315_ai < 0 && lv_index >= auto135E0315_ae) ) ; lv_index += auto135E0315_ai ) {
        if ((RandomInt(1, lp_weightMax) <= lp_chance)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, c_unitCreateIgnorePlacement, 0, lp_point);
            lv_itemspawned = UnitLastCreated();
            UnitBehaviorAdd(lv_itemspawned, "NoDraw", lv_itemspawned, 1);
            if ((lp_item == "Magazines")) {
                UnitAddChargeUsed(lv_itemspawned, "AmmoCharges", -2.0);
                lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(lv_itemspawned, "AmmoCharges", 3.0);
                UnitSetInfoTip(lv_itemspawned, (StringExternal("Param/Value/lib_90F7C81D_69176404") + UnitGetName(lv_itemspawned) + StringExternal("Param/Value/lib_90F7C81D_88CAF2FE") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_E2EB41AF")));
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lp_point);
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(2.5, c_timeGame);
            UnitKill(lv_droppod);
            Wait(1.5625, c_timeGame);
            UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
            UnitRemove(lv_droppod);
        }

    }
    Wait(0.0625, c_timeGame);
    return true;
}

unit lib90F7C81D_gf_GetItemType (string lp_itemtype, unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto460EEF22_ae;
    const int auto460EEF22_ai = 1;

    // Variable Initialization

    // Implementation
    auto460EEF22_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (auto460EEF22_ai >= 0 && lv_index <= auto460EEF22_ae) || (auto460EEF22_ai < 0 && lv_index >= auto460EEF22_ae) ) ; lv_index += auto460EEF22_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == lp_itemtype)) {
            return UnitInventoryItem(lp_unit, lv_index);
        }

    }
    return null;
}

bool lib90F7C81D_gf_UnitHasItem (string lp_itemtype, unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto73EFAFB5_ae;
    const int auto73EFAFB5_ai = 1;

    // Variable Initialization

    // Implementation
    auto73EFAFB5_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (auto73EFAFB5_ai >= 0 && lv_index <= auto73EFAFB5_ae) || (auto73EFAFB5_ai < 0 && lv_index >= auto73EFAFB5_ae) ) ; lv_index += auto73EFAFB5_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == lp_itemtype)) {
            return true;
        }

    }
    return false;
}

int lib90F7C81D_gf_ItemCount (string lp_itemtype, unit lp_unit) {
    // Variable Declarations
    int lv_index;
    int lv_count;

    // Automatic Variable Declarations
    int autoFD0E4FAF_ae;
    const int autoFD0E4FAF_ai = 1;

    // Variable Initialization

    // Implementation
    autoFD0E4FAF_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (autoFD0E4FAF_ai >= 0 && lv_index <= autoFD0E4FAF_ae) || (autoFD0E4FAF_ai < 0 && lv_index >= autoFD0E4FAF_ae) ) ; lv_index += autoFD0E4FAF_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == lp_itemtype)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

int lib90F7C81D_gf_ItemCountChargesAreGOE (string lp_itemtype, unit lp_unit, string lp_chargestring) {
    // Variable Declarations
    int lv_index;
    int lv_count;

    // Automatic Variable Declarations
    int autoD68FF8F2_ae;
    const int autoD68FF8F2_ai = 1;

    // Variable Initialization

    // Implementation
    autoD68FF8F2_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (autoD68FF8F2_ai >= 0 && lv_index <= autoD68FF8F2_ae) || (autoD68FF8F2_ai < 0 && lv_index >= autoD68FF8F2_ae) ) ; lv_index += autoD68FF8F2_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == lp_itemtype) && (UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_index), lp_chargestring) >= 1.0)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

fixed lib90F7C81D_gf_ItemChargesRemaining (unit lp_item, string lp_chargestring, fixed lp_maxcharges) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_maxcharges - UnitGetChargeUsed(lp_item, lp_chargestring));
}

void lib90F7C81D_gf_DropAllItems (unit lp_dropper, fixed lp_spread) {
    // Variable Declarations
    fixed lv_difference;
    unit lv_u;
    point lv_pos;
    point lv_pos2;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoD5ABB32B_g;
    int autoD5ABB32B_u;

    // Variable Initialization
    lv_pos = UnitGetPosition(lp_dropper);

    // Implementation
    autoD5ABB32B_g = UnitInventoryGroup(lp_dropper);
    autoD5ABB32B_u = UnitGroupCount(autoD5ABB32B_g, c_unitCountAll);
    for (;; autoD5ABB32B_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoD5ABB32B_g, autoD5ABB32B_u);
        if (lv_u == null) { break; }
        if (((UnitGetType(lv_u) == "BandolierSlot1") || (UnitGetType(lv_u) == "BandolierSlot2") || (UnitGetType(lv_u) == "BandolierSlot3") || (UnitGetType(lv_u) == "BandolierSlot4") || (UnitGetType(lv_u) == "BandolierSlot5") || (UnitGetType(lv_u) == "BandolierSlot6"))) {
            continue;
        }
        else {
            while ((lv_i < 16)) {
                lv_pos2 = PointWithOffset(lv_pos, RandomFixed(((-lp_spread)), lp_spread), RandomFixed(((-lp_spread)), lp_spread));
                if ((PointPathingIsConnected(lv_pos, lv_pos2) == true)) {
                    break;
                }

                lv_pos2 = null;
                lv_i += 1;
            }
            if ((lv_pos2 == null)) {
                lv_pos2 = lv_pos;
            }

            UnitSetPosition(lv_u, lv_pos2, false);
        }
    }
}

void lib90F7C81D_gf_DropItem (unit lp_dropper, string lp_item, fixed lp_spread) {
    // Variable Declarations
    fixed lv_difference;
    unit lv_u;
    point lv_pos;
    point lv_pos2;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoF9D29710_g;
    int autoF9D29710_u;

    // Variable Initialization
    lv_pos = UnitGetPosition(lp_dropper);

    // Implementation
    autoF9D29710_g = UnitInventoryGroup(lp_dropper);
    autoF9D29710_u = UnitGroupCount(autoF9D29710_g, c_unitCountAll);
    for (;; autoF9D29710_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoF9D29710_g, autoF9D29710_u);
        if (lv_u == null) { break; }
        if ((UnitGetType(lv_u) == lp_item)) {
            while ((lv_i < 16)) {
                lv_pos2 = PointWithOffset(lv_pos, RandomFixed(((-lp_spread)), lp_spread), RandomFixed(((-lp_spread)), lp_spread));
                if ((PointPathingIsConnected(lv_pos, lv_pos2) == true)) {
                    break;
                }

                lv_pos2 = null;
                lv_i += 1;
            }
            if ((lv_pos2 == null)) {
                lv_pos2 = lv_pos;
            }

            UnitSetPosition(lv_u, lv_pos2, false);
        }

    }
}

fixed lib90F7C81D_gf_NegativeReal (fixed lp_real) {
    // Automatic Variable Declarations
    // Implementation
    return (0.0 - lp_real);
}

unit lib90F7C81D_gf_FirstAmmoUsed (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto70DDC3B3_ae;
    const int auto70DDC3B3_ai = 1;

    // Variable Initialization

    // Implementation
    auto70DDC3B3_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (auto70DDC3B3_ai >= 0 && lv_index <= auto70DDC3B3_ae) || (auto70DDC3B3_ai < 0 && lv_index >= auto70DDC3B3_ae) ) ; lv_index += auto70DDC3B3_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_index), "AmmoCharges") >= 1.0) && ((UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == "Magazines") || (UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == "AmmoCase"))) {
            return UnitInventoryItem(lp_unit, lv_index);
        }

    }
    return null;
}

unit lib90F7C81D_gf_FirstAmmoCaseUsed (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoAC624BB1_ae;
    const int autoAC624BB1_ai = 1;

    // Variable Initialization

    // Implementation
    autoAC624BB1_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (autoAC624BB1_ai >= 0 && lv_index <= autoAC624BB1_ae) || (autoAC624BB1_ai < 0 && lv_index >= autoAC624BB1_ae) ) ; lv_index += autoAC624BB1_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_index), "AmmoCharges") >= 1.0) && (UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == "AmmoCase")) {
            return UnitInventoryItem(lp_unit, lv_index);
        }

    }
    return null;
}

unit lib90F7C81D_gf_FirstMGLUsed (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto2DA28721_ae;
    const int auto2DA28721_ai = 1;

    // Variable Initialization

    // Implementation
    auto2DA28721_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (auto2DA28721_ai >= 0 && lv_index <= auto2DA28721_ae) || (auto2DA28721_ai < 0 && lv_index >= auto2DA28721_ae) ) ; lv_index += auto2DA28721_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_index), "ItemCharges") >= 1.0) && (UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == "MGL")) {
            return UnitInventoryItem(lp_unit, lv_index);
        }

    }
    return null;
}

unit lib90F7C81D_gf_FirstMRLUsed (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto510773A9_ae;
    const int auto510773A9_ai = 1;

    // Variable Initialization

    // Implementation
    auto510773A9_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (auto510773A9_ai >= 0 && lv_index <= auto510773A9_ae) || (auto510773A9_ai < 0 && lv_index >= auto510773A9_ae) ) ; lv_index += auto510773A9_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_index), "ItemCharges") >= 1.0) && (UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == "MRL")) {
            return UnitInventoryItem(lp_unit, lv_index);
        }

    }
    return null;
}

unit lib90F7C81D_gf_FirstSMLUsed (unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto72CB4AA8_ae;
    const int auto72CB4AA8_ai = 1;

    // Variable Initialization

    // Implementation
    auto72CB4AA8_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];
    lv_index = 1;
    for ( ; ( (auto72CB4AA8_ai >= 0 && lv_index <= auto72CB4AA8_ae) || (auto72CB4AA8_ai < 0 && lv_index >= auto72CB4AA8_ae) ) ; lv_index += auto72CB4AA8_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_index), "ItemCharges") >= 1.0) && (UnitGetType(UnitInventoryItem(lp_unit, lv_index)) == "StingerMissileLauncher")) {
            return UnitInventoryItem(lp_unit, lv_index);
        }

    }
    return null;
}

unit lib90F7C81D_gf_SameItemTypeUsed (unit lp_host, unit lp_firstitem, string lp_chargestring) {
    // Variable Declarations
    int lv_index;
    string lv_itemType;

    // Automatic Variable Declarations
    int auto741AAB49_ae;
    const int auto741AAB49_ai = 1;

    // Variable Initialization
    lv_itemType = UnitGetType(lp_firstitem);

    // Implementation
    auto741AAB49_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_host)];
    lv_index = 1;
    for ( ; ( (auto741AAB49_ai >= 0 && lv_index <= auto741AAB49_ae) || (auto741AAB49_ai < 0 && lv_index >= auto741AAB49_ae) ) ; lv_index += auto741AAB49_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_host, lv_index)) == lv_itemType) && (lp_firstitem != UnitInventoryItem(lp_host, lv_index)) && (UnitGetChargeUsed(UnitInventoryItem(lp_host, lv_index), lp_chargestring) >= 1.0)) {
            return UnitInventoryItem(lp_host, lv_index);
        }

    }
    return null;
}

int lib90F7C81D_gf_GetItemListIndex (unit lp_item) {
    // Variable Declarations
    string lv_instanceIndex;

    // Automatic Variable Declarations
    string auto09AB0D6F_userType;
    int auto09AB0D6F_i;

    // Variable Initialization

    // Implementation
    auto09AB0D6F_userType = "Items";
    auto09AB0D6F_i = 1;
    for ( ; auto09AB0D6F_i <= UserDataInstanceCount(auto09AB0D6F_userType) ; auto09AB0D6F_i += 1 ) {
        lv_instanceIndex = UserDataInstance(auto09AB0D6F_userType, auto09AB0D6F_i);
        if ((UserDataGetGameLink("Items", lv_instanceIndex, "Item", 1) == UnitGetType(lp_item))) {
            return libNtve_gf_UserDataInstanceGetIndex("Items", lv_instanceIndex);
        }
    }
    return -1;
}

bool lib90F7C81D_gf_UnitHasEmptyInventorySlot (unit lp_unit) {
    // Variable Declarations
    int lv_slotsUsed;
    bool lv_weapon;
    bool lv_armor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_slotsUsed = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lp_unit)];

    // Implementation
    if (((UnitHasBehavior2(lp_unit, "HK42") == true) || (UnitHasBehavior2(lp_unit, "SOFAR") == true) || (UnitHasBehavior2(lp_unit, "M41SAW") == true) || (UnitHasBehavior2(lp_unit, "StynerBR2") == true) || (UnitHasBehavior2(lp_unit, "M5MAR") == true) || (UnitHasBehavior2(lp_unit, "USMCR") == true) || (UnitHasBehavior2(lp_unit, "W1200") == true) || (UnitHasBehavior2(lp_unit, "M241MMG") == true) || (UnitHasBehavior2(lp_unit, "Mk14") == true) || (UnitHasBehavior2(lp_unit, "M92Torrent") == true) || (UnitHasBehavior2(lp_unit, "M9Flamethrower") == true) || (UnitHasBehavior2(lp_unit, "M1014") == true) || (UnitHasBehavior2(lp_unit, "IPR") == true) || (UnitHasBehavior2(lp_unit, "XR42") == true) || (UnitHasBehavior2(lp_unit, "DeathMachine") == true) || (UnitHasBehavior2(lp_unit, "M935Minigun") == true))) {
        lv_weapon = true;
    }
    if (((UnitHasBehavior2(lp_unit, "KevlarBodyArmor") == true) || (UnitHasBehavior2(lp_unit, "SPCS") == true) || (UnitHasBehavior2(lp_unit, "OPA") == true))) {
        lv_armor = true;
    }
    if ((UnitInventoryCount(lp_unit, c_unitInventoryCountCarried) == lv_slotsUsed)) {
        return false;
    }
    else if ((UnitInventoryCount(lp_unit, c_unitInventoryCountCarried) == (lv_slotsUsed - 2)) && (lv_armor == false) && (lv_weapon == false)) {
        return false;
    }
    else if ((UnitInventoryCount(lp_unit, c_unitInventoryCountCarried) == (lv_slotsUsed - 1)) && ((lv_armor == true) || (lv_weapon == true))) {
        return false;
    }
    return true;
}

void lib90F7C81D_gf_RemoveItemIfChargesAreExausted (unit lp_unit, string lp_chargestring, fixed lp_maxcharges) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetChargeUsed(lp_unit, lp_chargestring) == lp_maxcharges)) {
        UnitRemove(lp_unit);
    }
}

void lib90F7C81D_gf_CombineItems (unit lp_receiver, unit lp_donator, string lp_chargestring, fixed lp_maxcharges) {
    // Variable Declarations
    fixed lv_difference;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitGetChargeUsed(lp_donator, lp_chargestring) >= 1.0)) {
        lv_difference = UnitGetChargeUsed(lp_receiver, lp_chargestring);
        if ((lv_difference > (lp_maxcharges - UnitGetChargeUsed(lp_donator, lp_chargestring)))) {
            lv_difference = (lib90F7C81D_gf_NegativeReal(lp_maxcharges) + UnitGetChargeUsed(lp_donator, lp_chargestring));
            UnitRemove(lp_donator);
            UnitAddChargeUsed(lp_receiver, lp_chargestring, lv_difference);
        }
        else {
            UnitAddChargeUsed(lp_receiver, lp_chargestring, lib90F7C81D_gf_NegativeReal(lv_difference));
            UnitAddChargeUsed(lp_donator, lp_chargestring, lv_difference);
            lib90F7C81D_gf_RemoveItemIfChargesAreExausted(lp_donator, lp_chargestring, lp_maxcharges);
        }
    }

}

void lib90F7C81D_gf_DonateItems (unit lp_receiver, unit lp_donator, string lp_chargestring, fixed lp_maxchargesdonator) {
    // Variable Declarations
    fixed lv_difference;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_difference = UnitGetChargeUsed(lp_receiver, lp_chargestring);
    if ((lv_difference >= lp_maxchargesdonator) && (UnitGetChargeUsed(lp_donator, lp_chargestring) == 0.0)) {
        UnitRemove(lp_donator);
        UnitAddChargeUsed(lp_receiver, lp_chargestring, lib90F7C81D_gf_NegativeReal(lp_maxchargesdonator));
    }
    else {
        if ((lv_difference >= lib90F7C81D_gf_ItemChargesRemaining(lp_donator, lp_chargestring, lp_maxchargesdonator))) {
            lv_difference = lib90F7C81D_gf_ItemChargesRemaining(lp_donator, lp_chargestring, lp_maxchargesdonator);
            UnitRemove(lp_donator);
        }
        else {
            UnitAddChargeUsed(lp_donator, lp_chargestring, lv_difference);
        }
        UnitAddChargeUsed(lp_receiver, lp_chargestring, lib90F7C81D_gf_NegativeReal(lv_difference));
    }
    lib90F7C81D_gf_RemoveItemIfChargesAreExausted(lp_donator, lp_chargestring, lp_maxchargesdonator);
}

void lib90F7C81D_gf_UpdateItemTextChargeDisplay (unit lp_item) {
    // Variable Declarations
    unit lv_droppeditem;
    string lv_shieldMaxBonus;
    string lv_texture_Red;
    string lv_texture_Origin;
    fixed lv_chargecount;
    int lv_instanceIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_droppeditem = lp_item;
    lv_texture_Red = "TextureSelectById ItemCrateRed";
    lv_texture_Origin = "TextureSelectById ItemCrateOrigin";

    // Implementation
    if (((UnitGetType(lv_droppeditem) == "KevlarBodyArmor") || (UnitGetType(lv_droppeditem) == "SPCS"))) {
        if ((UnitGetType(lv_droppeditem) == "KevlarBodyArmor")) {
            lv_shieldMaxBonus = "Behavior,KevlarBodyArmor,Modification.VitalMaxArray[Shields]";
        }
        else if ((UnitGetType(lv_droppeditem) == "SPCS")) {
            lv_shieldMaxBonus = "Behavior,SPCS,Modification.VitalMaxArray[Shields]";
        }
        UnitSetInfoTip(lp_item, (StringExternal("Param/Value/lib_90F7C81D_0DF2E3D9") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/lib_90F7C81D_DD476AB4") + StringExternal("Param/Value/lib_90F7C81D_022F6CA8") + FixedToText((100.0 * (DataTableGetFixed(true, ("ArmorHealth" + IntToString(lib90F7C81D_gf_GetDataTableArmorIndex(lp_item)))) / libNtve_gf_CatalogReferenceGetAsReal(lv_shieldMaxBonus, c_playerAny))), 0) + StringExternal("Param/Value/lib_90F7C81D_F64889E1")));
    }
    else {
        lv_instanceIndex = lib90F7C81D_gf_GetItemListIndex(lp_item);
        if ((UserDataGetGameLink("Items", UserDataInstance("Items", lv_instanceIndex), "Item", 1) == UnitGetType(lp_item))) {
            lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(lv_droppeditem, UserDataGetString("Items", UserDataInstance("Items", lv_instanceIndex), "Charge String", 1), UserDataGetFixed("Items", UserDataInstance("Items", lv_instanceIndex), "Max Charges", 1));
            if ((UnitGetChargeUsed(lv_droppeditem, UserDataGetString("Items", UserDataInstance("Items", lv_instanceIndex), "Charge String", 1)) == UserDataGetFixed("Items", UserDataInstance("Items", lv_instanceIndex), "Max Charges", 1))) {
                UnitSetInfoTip(lp_item, (StringExternal("Param/Value/lib_90F7C81D_E7FD2EEF") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/lib_90F7C81D_B0D8A853")));
                if ((UnitHasBehavior2(lv_droppeditem, "ItemEmpty") == false)) {
                    UnitBehaviorAdd(lv_droppeditem, "ItemEmpty", lv_droppeditem, 1);
                    libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_texture_Red);
                }
            }
            else {
                UnitSetInfoTip(lp_item, (StringExternal("Param/Value/lib_90F7C81D_A1814027") + UnitGetName(lv_droppeditem) + StringExternal("Param/Value/lib_90F7C81D_615293F5") + FixedToText(lv_chargecount, 0) + StringExternal("Param/Value/lib_90F7C81D_D0D6CA8D") + UserDataGetText("Items", UserDataInstance("Items", lv_instanceIndex), "Tooltip", 1)));
                if ((UnitHasBehavior2(lv_droppeditem, "ItemEmpty") == true)) {
                    UnitBehaviorRemove(lv_droppeditem, "ItemEmpty", 1);
                    libNtve_gf_SendActorMessageToUnit(lv_droppeditem, lv_texture_Origin);
                }
            }
        }
        UnitSetFacing(lv_droppeditem, RandomFixed(360.0, 180.0), 0.0);
    }
    lv_texture_Red = null;
    lv_texture_Origin = null;
    lv_droppeditem = null;
    lv_shieldMaxBonus = null;
}

trigger auto_lib90F7C81D_gf_RemoveAilmentsFromHero_Trigger = null;
int auto_lib90F7C81D_gf_RemoveAilmentsFromHero_lp_player;

void lib90F7C81D_gf_RemoveAilmentsFromHero (int lp_player) {
    auto_lib90F7C81D_gf_RemoveAilmentsFromHero_lp_player = lp_player;

    if (auto_lib90F7C81D_gf_RemoveAilmentsFromHero_Trigger == null) {
        auto_lib90F7C81D_gf_RemoveAilmentsFromHero_Trigger = TriggerCreate("auto_lib90F7C81D_gf_RemoveAilmentsFromHero_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_RemoveAilmentsFromHero_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_RemoveAilmentsFromHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib90F7C81D_gf_RemoveAilmentsFromHero_lp_player;

    // Variable Declarations
    string lv_index;

    // Automatic Variable Declarations
    int autoAA6F3CE9_e;
    int autoAA6F3CE9_i;

    // Variable Initialization

    // Implementation
    autoAA6F3CE9_e = UserDataInstanceCount("Ailments");
    for (autoAA6F3CE9_i = 1; autoAA6F3CE9_i <= autoAA6F3CE9_e; autoAA6F3CE9_i += 1) {
        lv_index = UserDataInstance("Ailments", autoAA6F3CE9_i);
        if ((UnitHasBehavior2(lib90F7C81D_gv_playerHeroes[lp_player], UserDataGetGameLink("Ailments", lv_index, "Ailment Behavior", 1)) == true)) {
            UnitBehaviorRemove(lib90F7C81D_gv_playerHeroes[lp_player], UserDataGetGameLink("Ailments", lv_index, "Ailment Behavior", 1), 1);
        }

    }
    return true;
}

void lib90F7C81D_gf_LNRemoveCombatInexperience () {
    // Automatic Variable Declarations
    unitgroup auto9693FB43_g;
    int auto9693FB43_u;
    unit auto9693FB43_var;

    // Implementation
    auto9693FB43_g = lib90F7C81D_gv_sFAAT.lv_localNationals;
    auto9693FB43_u = UnitGroupCount(auto9693FB43_g, c_unitCountAll);
    for (;; auto9693FB43_u -= 1) {
        auto9693FB43_var = UnitGroupUnitFromEnd(auto9693FB43_g, auto9693FB43_u);
        if (auto9693FB43_var == null) { break; }
        UnitBehaviorRemove(auto9693FB43_var, "CombatInexperience", 1);
    }
}

string lib90F7C81D_gf_RandomLN () {
    // Variable Declarations
    int lv_index;
    int lv_weight;
    int lv_randWeight;
    int lv_weightMaxPool;

    // Automatic Variable Declarations
    int auto6E49E224_ae;
    const int auto6E49E224_ai = 1;

    // Variable Initialization
    lv_weightMaxPool = lib90F7C81D_gv_sFAAT.lv_totalWeight;

    // Implementation
    auto6E49E224_ae = lib90F7C81D_gv_sFAAT.lv_lNMax;
    lv_index = 1;
    for ( ; ( (auto6E49E224_ai >= 0 && lv_index <= auto6E49E224_ae) || (auto6E49E224_ai < 0 && lv_index >= auto6E49E224_ae) ) ; lv_index += auto6E49E224_ai ) {
        if ((UserDataGetInt("LocalNationals", "Local Nationals", "Enabled", lv_index) == 0)) {
            continue;
        }
        else {
            lv_randWeight = RandomInt(1, lv_weightMaxPool);
            lv_weight = (lv_randWeight - UserDataGetInt("LocalNationals", "Local Nationals", "Weight", lv_index));
            if ((lv_weight <= 0)) {
                lib90F7C81D_gf_UpdateLNPool(lv_index, lib90F7C81D_ge_LNSlot_Substract);
                break;
            }
            else {
                lv_weightMaxPool -= UserDataGetInt("LocalNationals", "Local Nationals", "Weight", lv_index);
            }
        }
    }
    return UserDataGetUnit("LocalNationals", "Local Nationals", "Unit", lv_index);
}

void lib90F7C81D_gf_UpdateLNPool (int lp_index, int lp_slot) {
    // Variable Declarations
    int lv_limit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_slot == lib90F7C81D_ge_LNSlot_Add)) {
        lv_limit = (UserDataGetInt("LocalNationals", "Local Nationals", "LN Limit", lp_index) + 1);
    }
    else {
        lv_limit = (UserDataGetInt("LocalNationals", "Local Nationals", "LN Limit", lp_index) - 1);
    }
    UserDataSetInt("LocalNationals", "Local Nationals", "LN Limit", lp_index, lv_limit);
    if ((lv_limit < 1) && (UserDataGetInt("LocalNationals", "Local Nationals", "Enabled", lp_index) == 1)) {
        UserDataSetInt("LocalNationals", "Local Nationals", "Enabled", lp_index, 0);
        lib90F7C81D_gv_sFAAT.lv_totalWeight -= UserDataGetInt("LocalNationals", "Local Nationals", "Weight", lp_index);
    }
    else if ((lv_limit >= 1) && (UserDataGetInt("LocalNationals", "Local Nationals", "Enabled", lp_index) == 0)) {
        UserDataSetInt("LocalNationals", "Local Nationals", "Enabled", lp_index, 1);
        lib90F7C81D_gv_sFAAT.lv_totalWeight += UserDataGetInt("LocalNationals", "Local Nationals", "Weight", lp_index);
    }
}

void lib90F7C81D_gf_PingBeaconAdd (string lp_beaconEffect, point lp_location, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerCreateEffectPoint(lp_player, lp_beaconEffect, lp_location);
}

void lib90F7C81D_gf_RefreshAirSupportCharges () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = lib90F7C81D_gf_ReturnPlatoonLeaderIndex();

    // Implementation
    if ((lv_index >= 1)) {
        UnitAbilityAddChargeUsed(lib90F7C81D_gv_playerHeroes[lv_index], "CloseAirSupport", "Abil/CloseAirSupport", -6.0);
        UnitAbilityAddChargeUsed(lib90F7C81D_gv_playerHeroes[lv_index], "AttackWeaponsTeam", "Abil/AttackWeaponsTeam", -3.0);
    }
}

int lib90F7C81D_gf_ReturnPlatoonLeaderIndex () {
    // Automatic Variable Declarations
    playergroup auto2FD0254E_g;
    int auto2FD0254E_var;

    // Implementation
    auto2FD0254E_g = lib90F7C81D_gv_players;
    auto2FD0254E_var = -1;
    while (true) {
        auto2FD0254E_var = PlayerGroupNextPlayer(auto2FD0254E_g, auto2FD0254E_var);
        if (auto2FD0254E_var < 0) { break; }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[auto2FD0254E_var]) == "PlatoonLeader")) {
            return auto2FD0254E_var;
        }
    }
    return -1;
}

trigger auto_lib90F7C81D_gf_SpawnScrapEngineerBay_Trigger = null;

void lib90F7C81D_gf_SpawnScrapEngineerBay () {
    if (auto_lib90F7C81D_gf_SpawnScrapEngineerBay_Trigger == null) {
        auto_lib90F7C81D_gf_SpawnScrapEngineerBay_Trigger = TriggerCreate("auto_lib90F7C81D_gf_SpawnScrapEngineerBay_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_SpawnScrapEngineerBay_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_SpawnScrapEngineerBay_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = RegionFromId(87);
    lv_point = RegionRandomPoint(lv_region);

    // Implementation
    lib90F7C81D_gv_combatEngineer.lv_scrapEngineerBayRespawning = true;
    Wait(lib90F7C81D_gv_combatEngineer.lv_scrapEngineerBayDelay, c_timeGame);
    while ((PointPathingIsConnected(lv_point, RegionGetCenter(RegionFromId(45))) == false)) {
        lv_point = RegionRandomPoint(lv_region);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScrapPartsPickup", 0, 0, lv_point);
    UnitBehaviorAdd(UnitLastCreated(), "ScrapPartsPickup", UnitLastCreated(), 1);
    lib90F7C81D_gv_combatEngineer.lv_scrapEngineerBay = UnitLastCreated();
    lib90F7C81D_gv_combatEngineer.lv_scrapEngineerBayRespawning = false;
    return true;
}

trigger auto_lib90F7C81D_gf_SpawnScrapRandom_Trigger = null;

void lib90F7C81D_gf_SpawnScrapRandom () {
    if (auto_lib90F7C81D_gf_SpawnScrapRandom_Trigger == null) {
        auto_lib90F7C81D_gf_SpawnScrapRandom_Trigger = TriggerCreate("auto_lib90F7C81D_gf_SpawnScrapRandom_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_SpawnScrapRandom_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_SpawnScrapRandom_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = RegionFromId(198);
    lv_point = RegionRandomPoint(lv_region);

    // Implementation
    lib90F7C81D_gv_combatEngineer.lv_scrapRandomRespawning = true;
    Wait(lib90F7C81D_gv_combatEngineer.lv_scrapRandomDelay, c_timeGame);
    while ((PointPathingIsConnected(lv_point, RegionGetCenter(RegionFromId(45))) == false)) {
        lv_point = RegionRandomPoint(lv_region);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScrapPartsPickup", 0, 0, lv_point);
    UnitBehaviorAdd(UnitLastCreated(), "ScrapPartsPickup", UnitLastCreated(), 1);
    lib90F7C81D_gv_combatEngineer.lv_scrapRandom = UnitLastCreated();
    lib90F7C81D_gv_combatEngineer.lv_scrapRandomRespawning = false;
    return true;
}

void lib90F7C81D_gf_StoreMinimapPings (unit lp_unit, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    if ((UnitGroupHasUnit(lib90F7C81D_gv_minimapPingIndex, lp_unit) == false)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_unit), lp_pingColor, 0.0, 270.0);
        lv_ping = PingLastCreated();
        PingSetTooltip(lv_ping, lp_pingTooltip);
        PingSetScale(lv_ping, lp_pingScale);
        PingSetUnit(lv_ping, lp_unit);
        libHots_gf_StorePingForUnit(lp_unit, 1, lv_ping);
        UnitGroupAdd(lib90F7C81D_gv_minimapPingIndex, lp_unit);
    }
}

void lib90F7C81D_gf_RemoveMinimapPingIndex (unit lp_unit) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = libHots_gf_PingStoredForUnit(lp_unit, 1);

    // Implementation
    if ((UnitGroupHasUnit(lib90F7C81D_gv_minimapPingIndex, lp_unit) == true)) {
        PingDestroy(lv_ping);
        UnitGroupRemove(lib90F7C81D_gv_minimapPingIndex, lp_unit);
    }
}

void lib90F7C81D_gf_MissionItemPingEnable (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(lib90F7C81D_gt_MissionItemPickedUp, lp_onOff);
    TriggerEnable(lib90F7C81D_gt_MissionItemDropped, lp_onOff);
}

void lib90F7C81D_gf_MissionItemPingAddItem (unit lp_item) {
    // Variable Declarations
    int lv_ping;
    int lv_ping2;
    int lv_carryingitem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_ping2 = c_invalidPingId;
    lv_carryingitem = UnitGetOwner(UnitInventoryUnit(lp_item));

    // Implementation
    if ((UnitGroupHasUnit(lib90F7C81D_gv_missionItemPingItems, lp_item) == false)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        lv_ping = PingLastCreated();
        PingSetTooltip(lv_ping, UnitTypeGetName(UnitGetType(lp_item)));
        PingSetScale(lv_ping, 0.5);
        PingSetUnit(lv_ping, lp_item);
        libHots_gf_StorePingForUnit(lp_item, 1, lv_ping);
        UnitGroupAdd(lib90F7C81D_gv_missionItemPingItems, lp_item);
    }

}

void lib90F7C81D_gf_MissionItemPingRemoveItem (unit lp_item) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = libHots_gf_PingStoredForUnit(lp_item, 1);

    // Implementation
    if ((UnitGroupHasUnit(lib90F7C81D_gv_missionItemPingItems, lp_item) == true)) {
        PingDestroy(lv_ping);
        UnitGroupRemove(lib90F7C81D_gv_missionItemPingItems, lp_item);
    }

}

void lib90F7C81D_gf_MissionItemCarried (unit lp_item, int lp_player) {
    // Variable Declarations
    int lv_ping;
    int lv_ping2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = libHots_gf_PingStoredForUnit(lp_item, 1);
    lv_ping2 = c_invalidPingId;

    // Implementation
    if ((UnitGroupHasUnit(lib90F7C81D_gv_missionItemPingItems, lp_item) == true)) {
        PingDestroy(lv_ping);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        lv_ping2 = PingLastCreated();
        PingSetTooltip(lv_ping2, (PlayerName(lp_player) + (StringExternal("Param/Value/lib_90F7C81D_5897DA19") + UnitTypeGetName(UnitGetType(lp_item)))));
        PingSetScale(lv_ping2, 0.5);
        PingSetUnit(lv_ping2, lp_item);
        libHots_gf_StorePingForUnit(lp_item, 1, lv_ping2);
    }

}

void lib90F7C81D_gf_MissionItemDropped (int lp_player, unit lp_item) {
    // Variable Declarations
    int lv_ping;
    int lv_ping2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = libHots_gf_PingStoredForUnit(lp_item, 1);
    lv_ping2 = c_invalidPingId;

    // Implementation
    if ((UnitGroupHasUnit(lib90F7C81D_gv_missionItemPingItems, lp_item) == true)) {
        PingDestroy(lv_ping);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        lv_ping2 = PingLastCreated();
        PingSetTooltip(lv_ping2, UnitTypeGetName(UnitGetType(lp_item)));
        PingSetScale(lv_ping2, 0.5);
        PingSetUnit(lv_ping2, lp_item);
        libHots_gf_StorePingForUnit(lp_item, 1, lv_ping2);
    }

}

void lib90F7C81D_gf_ModifierEvent (trigger t, int lp_modifier) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (IntToString(lp_modifier)));
}

int lib90F7C81D_gf_GetModifier () {
    // Variable Declarations
    int lv_unix_start;
    int lv_unix_cur;
    int lv_unix_diff;
    int lv_week;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unix_start = 1622332800;
    lv_unix_cur = DateTimeToInt(lib90F7C81D_gv_weeklyModifier.lv_date_Time);
    lv_unix_diff = (lv_unix_cur - lv_unix_start);
    lv_week = (lv_unix_diff / 604800);

    // Implementation
    return FixedToInt(lib90F7C81D_gf_MathNumberWrap(IntToFixed(lv_week), 1.0, IntToFixed((UserDataInstanceCount("Modifiers") + 1))));
}

void lib90F7C81D_gf_ModifierReward (int lp_mutation) {
    // Variable Declarations
    int lv_type;
    int lv_c_Index;
    int lv_d_Index;
    int lv_a_Index;

    // Automatic Variable Declarations
    playergroup auto5B3A4F8E_g;
    int auto5B3A4F8E_var;

    // Variable Initialization
    lv_type = lib90F7C81D_gf_Type(UserDataGetInt("Modifiers", UserDataInstance("Modifiers", lp_mutation), "Type", 1));
    lv_c_Index = libNtve_gf_UserDataInstanceGetIndex("Camos", UserDataGetUserInstance("Modifiers", UserDataInstance("Modifiers", lp_mutation), "Camo", 1));
    lv_d_Index = libNtve_gf_UserDataInstanceGetIndex("Decals", UserDataGetUserInstance("Modifiers", UserDataInstance("Modifiers", lp_mutation), "Decal", 1));
    lv_a_Index = libNtve_gf_UserDataInstanceGetIndex("AchievementBadge", UserDataGetUserInstance("Modifiers", UserDataInstance("Modifiers", lp_mutation), "Achievement", 1));

    // Implementation
    auto5B3A4F8E_g = lib90F7C81D_gv_players;
    auto5B3A4F8E_var = -1;
    while (true) {
        auto5B3A4F8E_var = PlayerGroupNextPlayer(auto5B3A4F8E_g, auto5B3A4F8E_var);
        if (auto5B3A4F8E_var < 0) { break; }
        lib90F7C81D_gf_UnlockTexture(lv_type, UserDataInstance("Camos", lv_c_Index), UserDataInstance("Decals", lv_d_Index), auto5B3A4F8E_var, true);
        lib90F7C81D_gf_FlashAchievementBadge(UserDataInstance("AchievementBadge", lv_a_Index), auto5B3A4F8E_var);
    }
}

void lib90F7C81D_gf_ModifierCompleted (int lp_player) {
    // Variable Declarations
    int lv_c_index;
    int lv_d_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_c_index = libNtve_gf_UserDataInstanceGetIndex("Camos", UserDataGetUserInstance("Modifiers", UserDataInstance("Modifiers", lib90F7C81D_gv_weeklyModifier.lv_modifier), "Camo", 1));
    lv_d_index = libNtve_gf_UserDataInstanceGetIndex("Decals", UserDataGetUserInstance("Modifiers", UserDataInstance("Modifiers", lib90F7C81D_gv_weeklyModifier.lv_modifier), "Decal", 1));

    // Implementation
    if ((lv_c_index != -1)) {
        if ((lib90F7C81D_gv_bankData.lv_camosUnlocked[lv_c_index][lp_player] == true)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_weeklyModifier.lv_frame, PlayerGroupSingle(lp_player), "Modifier", "Completed");
        }
    }
    else {
        if ((lib90F7C81D_gv_bankData.lv_camosUnlocked[lv_d_index][lp_player] == true)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_weeklyModifier.lv_frame, PlayerGroupSingle(lp_player), "Modifier", "Completed");
        }
    }
}

void lib90F7C81D_gf_StartModifierChallenge () {
    // Automatic Variable Declarations
    // Implementation
    lib90F7C81D_gv_weeklyModifier.lv_enabled = true;
    TriggerSendEvent(IntToString(lib90F7C81D_gv_weeklyModifier.lv_modifier));
}

void lib90F7C81D_gf_DebugModifier (int lp_modifier) {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(IntToString((lp_modifier)));
}

text lib90F7C81D_gf_DebugModifierType () {
    // Automatic Variable Declarations
    // Implementation
    return StringToText(lib90F7C81D_gf_IIF(lib90F7C81D_gv_weeklyModifier.lv_enabled, UserDataGetString("Modifiers", UserDataInstance("Modifiers", lib90F7C81D_gv_weeklyModifier.lv_modifier), "Name", 1), "No Modifiers"));
}

void lib90F7C81D_gf_SetupSkinPanel (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoD2EFD2D6_ae = 52;
    const int autoD2EFD2D6_ai = 1;
    int autoCD66A283_ae;
    const int autoCD66A283_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 2;
    for ( ; ( (autoD2EFD2D6_ai >= 0 && lv_index <= autoD2EFD2D6_ae) || (autoD2EFD2D6_ai < 0 && lv_index >= autoD2EFD2D6_ae) ) ; lv_index += autoD2EFD2D6_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[19][lp_player] == true) && (lv_index == 24)) {
            lib90F7C81D_gv_bankData.lv_camosUnlocked[lv_index][lp_player] = true;
            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, UserDataInstance("Camos", lv_index), "Rank Insignia", lp_player, false);
            continue;
        }
        if ((lib90F7C81D_gv_bankData.lv_camosUnlocked[lv_index][lp_player] == true) && (lv_index == 32)) {
            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, UserDataInstance("Camos", lv_index), "Rank Insignia", lp_player, false);
            continue;
        }
        if ((lib90F7C81D_gv_bankData.lv_camosUnlocked[lv_index][lp_player] == true)) {
            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, UserDataInstance("Camos", lv_index), "Rank Insignia", lp_player, false);
        }
    }
    autoCD66A283_ae = UserDataInstanceCount("Decals");
    lv_index = 3;
    for ( ; ( (autoCD66A283_ai >= 0 && lv_index <= autoCD66A283_ae) || (autoCD66A283_ai < 0 && lv_index >= autoCD66A283_ae) ) ; lv_index += autoCD66A283_ai ) {
        if ((lv_index == 17) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[23][lp_player] == true) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[24][lp_player] == true) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[25][lp_player] == true)) {
            lib90F7C81D_gv_bankData.lv_decalsUnlocked[lv_index][lp_player] = true;
            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", UserDataInstance("Decals", lv_index), lp_player, false);
        }
        else {
            if ((lib90F7C81D_gv_bankData.lv_decalsUnlocked[lv_index][lp_player] == true)) {
                lib90F7C81D_gv_bankData.lv_decalsUnlocked[lv_index][lp_player] = true;
                lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", UserDataInstance("Decals", lv_index), lp_player, false);
            }
        }
    }
}

void lib90F7C81D_gf_SetupModeAchievementsPanel (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_count;

    // Automatic Variable Declarations
    int auto0F54651B_ae;
    const int auto0F54651B_ai = 1;
    const int auto023BB28F_ae = 49;
    const int auto023BB28F_ai = 1;
    const int auto4CB8A5B1_ae = 18;
    const int auto4CB8A5B1_ai = 1;
    const int autoA344FD95_ae = 129;
    const int autoA344FD95_ai = 1;
    const int auto78D475D6_ae = 72;
    const int auto78D475D6_ai = 1;
    const int autoC26BE75F_ae = 17;
    const int autoC26BE75F_ai = 1;

    // Variable Initialization

    // Implementation
    lib90F7C81D_gf_GetGameWins(lp_player, 0, false);
    lib90F7C81D_gf_CampaignWins();
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[20][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[0][5], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[21][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[0][6], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[23][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[0][7], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][3], PlayerGroupSingle(lp_player), "ExtraIcon1", "Unlocked");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[32][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[0][8], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[33][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[0][9], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[22][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[1][5], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[27][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[1][6], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[24][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[1][7], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][3], PlayerGroupSingle(lp_player), "ExtraIcon2", "Unlocked");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[30][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[1][8], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[31][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[1][9], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[25][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[2][5], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][3], PlayerGroupSingle(lp_player), "ExtraIcon3", "Unlocked");
    }
    if ((lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] >= 500)) {
        lv_count = 32;
    }
    else if ((lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] >= 400) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] < 500)) {
        lv_count = 31;
    }
    else if ((lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] >= 300) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] < 400)) {
        lv_count = 30;
    }
    else if ((lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] >= 200) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] < 300)) {
        lv_count = 29;
    }
    else if ((lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] >= 100) && (lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player] < 200)) {
        lv_count = 28;
    }
    if ((lv_count >= 28)) {
        auto0F54651B_ae = lv_count;
        lv_index = 28;
        for ( ; ( (auto0F54651B_ai >= 0 && lv_index <= auto0F54651B_ae) || (auto0F54651B_ai < 0 && lv_index >= auto0F54651B_ae) ) ; lv_index += auto0F54651B_ai ) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][lv_index], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        }
        if ((lib90F7C81D_gv_bankData.lv_camosUnlocked[32][lp_player] == false)) {
            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Retro", "Rank Insignia", lp_player, true);
        }
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[28][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][0], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gf_ReturnWin(lp_player) == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][1], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Dark Green", "Rank Insignia", lp_player, false);
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[51][lp_player] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[51][lp_player] = true;
        }
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[19][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][2], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[23][lp_player] == true) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[24][lp_player] == true) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[25][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][3], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[29][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][4], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    else {
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][4], IntToText(lib90F7C81D_gv_bankData.lv_totalDeaths[lp_player]), PlayerGroupSingle(lp_player));
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[34][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][5], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Red Tiger 2.0", "Rank Insignia", lp_player, false);
    }
    else {
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][5], IntToText(lib90F7C81D_gv_achievementPanel.lv_winBonusStreak[lp_player]), PlayerGroupSingle(lp_player));
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[52][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][6], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Mosaic", "Rank Insignia", lp_player, false);
    }
    else {
        if ((lib90F7C81D_gv_iIIIIIlllllll[2][lp_player] > 100)) {
            lib90F7C81D_gv_iIIIIIlllllll[2][lp_player] = 0;
        }
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][6], IntToText(lib90F7C81D_gv_iIIIIIlllllll[2][lp_player]), PlayerGroupSingle(lp_player));
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[50][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][7], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
    }
    else {
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][7], IntToText(lib90F7C81D_gv_bankData.lv_totalHeals[lp_player]), PlayerGroupSingle(lp_player));
    }
    lv_index = 35;
    for ( ; ( (auto023BB28F_ai >= 0 && lv_index <= auto023BB28F_ae) || (auto023BB28F_ai < 0 && lv_index >= auto023BB28F_ae) ) ; lv_index += auto023BB28F_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == true)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        }
        else {
            if ((lv_index == 35)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][8], IntToText(lib90F7C81D_gv_bankData.lv_totalHits[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 36)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][9], IntToText(lib90F7C81D_gv_bankData.lv_totalKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 37)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][10], IntToText(lib90F7C81D_gv_bankData.lv_totalKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 38)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][11], IntToText(lib90F7C81D_gv_bankData.lv_totalKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 39)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][12], IntToText(lib90F7C81D_gv_bankData.lv_totalKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 40)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][13], IntToText(lib90F7C81D_gv_bankData.lv_totalKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 41)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][14], IntToText(lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 42)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][15], IntToText(lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 43)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][16], IntToText(lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 44)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][17], IntToText(lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 45)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][18], IntToText(lib90F7C81D_gv_bankData.lv_totalHeals[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 46)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][19], IntToText(lib90F7C81D_gv_bankData.lv_totalRevivePoints[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 47)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][20], IntToText(lib90F7C81D_gv_bankData.lv_totalRevivePoints[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 48)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][21], IntToText(lib90F7C81D_gv_bankData.lv_totalRevivePoints[lp_player]), PlayerGroupSingle(lp_player));
            }
            else if ((lv_index == 49)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][22], IntToText(lib90F7C81D_gv_bankData.lv_totalRevivePoints[lp_player]), PlayerGroupSingle(lp_player));
            }
        }
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[130][lp_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[130][lp_player] = true;
        lv_index = 1;
        for ( ; ( (auto4CB8A5B1_ai >= 0 && lv_index <= auto4CB8A5B1_ae) || (auto4CB8A5B1_ai < 0 && lv_index >= auto4CB8A5B1_ae) ) ; lv_index += auto4CB8A5B1_ai ) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = false;
        }
        lv_index = 100;
        for ( ; ( (autoA344FD95_ai >= 0 && lv_index <= autoA344FD95_ae) || (autoA344FD95_ai < 0 && lv_index >= autoA344FD95_ae) ) ; lv_index += autoA344FD95_ai ) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = false;
        }
    }
    lv_index = 53;
    for ( ; ( (auto78D475D6_ai >= 0 && lv_index <= auto78D475D6_ae) || (auto78D475D6_ai < 0 && lv_index >= auto78D475D6_ae) ) ; lv_index += auto78D475D6_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == true)) {
            if ((lv_index >= 53) && (lv_index <= 57)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[5][(lv_index - 53)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            }
            else if ((lv_index >= 58) && (lv_index <= 62)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[6][(lv_index - 58)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            }
            else if ((lv_index >= 63) && (lv_index <= 67)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[7][(lv_index - 63)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            }
            else if ((lv_index >= 68) && (lv_index <= 72)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[8][(lv_index - 68)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            }
        }
    }
    lv_index = 0;
    for ( ; ( (autoC26BE75F_ai >= 0 && lv_index <= autoC26BE75F_ae) || (autoC26BE75F_ai < 0 && lv_index >= autoC26BE75F_ae) ) ; lv_index += autoC26BE75F_ai ) {
        lib90F7C81D_gf_RewardMedal(lv_index, lp_player);
    }
}

void lib90F7C81D_gf_GetGameWins (int lp_player, int lp_previousWins, bool lp_flashAchievementBadge) {
    // Variable Declarations
    int lv_index;
    int lv_game_Mode;
    int lv_indexInner;
    int lv_earned;

    // Automatic Variable Declarations
    const int auto79A38101_ae = 2;
    const int auto79A38101_ai = 1;
    const int auto66C47214_ae = 4;
    const int auto66C47214_ai = 1;
    const int autoAE028FE6_ae = 4;
    const int autoAE028FE6_ai = 1;
    const int autoF67C6031_ae = 4;
    const int autoF67C6031_ai = 1;
    int autoA165297E_ae;
    const int autoA165297E_ai = 1;

    // Variable Initialization
    lv_game_Mode = lib90F7C81D_gv_gamemode;

    // Implementation
    lv_index = 0;
    for ( ; ( (auto79A38101_ai >= 0 && lv_index <= auto79A38101_ae) || (auto79A38101_ai < 0 && lv_index >= auto79A38101_ae) ) ; lv_index += auto79A38101_ai ) {
        if ((lp_flashAchievementBadge == false)) {
            if ((lv_index == 0)) {
                lv_game_Mode = 6;
                lv_indexInner = 0;
                for ( ; ( (auto66C47214_ai >= 0 && lv_indexInner <= auto66C47214_ae) || (auto66C47214_ai < 0 && lv_indexInner >= auto66C47214_ae) ) ; lv_indexInner += auto66C47214_ai ) {
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[lv_index][lv_indexInner], IntToText(lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player]), PlayerGroupSingle(lp_player));
                }
                if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] >= 25)) {
                    lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Desert I", "Rank Insignia", lp_player, false);
                }
            }
            else if ((lv_index == 1)) {
                lv_game_Mode = 7;
                lv_indexInner = 0;
                for ( ; ( (autoAE028FE6_ai >= 0 && lv_indexInner <= autoAE028FE6_ae) || (autoAE028FE6_ai < 0 && lv_indexInner >= autoAE028FE6_ae) ) ; lv_indexInner += autoAE028FE6_ai ) {
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[lv_index][lv_indexInner], IntToText(lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player]), PlayerGroupSingle(lp_player));
                }
                if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] >= 25)) {
                    lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Desert II", "Rank Insignia", lp_player, false);
                }
            }
            else if ((lv_index == 2)) {
                lv_game_Mode = 8;
                lv_indexInner = 0;
                for ( ; ( (autoF67C6031_ai >= 0 && lv_indexInner <= autoF67C6031_ae) || (autoF67C6031_ai < 0 && lv_indexInner >= autoF67C6031_ae) ) ; lv_indexInner += autoF67C6031_ai ) {
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[lv_index][lv_indexInner], IntToText(lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player]), PlayerGroupSingle(lp_player));
                }
                if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] >= 25)) {
                    lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Desert III", "Rank Insignia", lp_player, false);
                }
            }
        }
        if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] < 10)) {
            if ((lp_flashAchievementBadge == true)) {
                break;
            }
            else {
                continue;
            }
        }
        else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] >= 10) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] < 25)) {
            if ((lp_flashAchievementBadge == true)) {
                if ((lp_previousWins < 10)) {
                    if ((lib90F7C81D_gv_gamemode == 6)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Survival: 10", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 7)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Mission Survival: 10", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 8)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Boss Rush: 10", lp_player);
                    }
                }
                break;
            }
            else {
                lv_earned = 0;
            }
        }
        else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] >= 25) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] < 50)) {
            if ((lp_flashAchievementBadge == true)) {
                if ((lp_previousWins < 25)) {
                    if ((lib90F7C81D_gv_gamemode == 6)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Survival: 25", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 7)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Mission Survival: 25", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 8)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Boss Rush: 25", lp_player);
                    }
                }
                break;
            }
            else {
                lv_earned = 1;
            }
        }
        else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] >= 50) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] < 75)) {
            if ((lp_flashAchievementBadge == true)) {
                if ((lp_previousWins < 50)) {
                    if ((lib90F7C81D_gv_gamemode == 6)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Survival: 50", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 7)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Mission Survival: 50", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 8)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Boss Rush: 50", lp_player);
                    }
                }
                break;
            }
            else {
                lv_earned = 2;
            }
        }
        else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] >= 75) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] < 100)) {
            if ((lp_flashAchievementBadge == true)) {
                if ((lp_previousWins < 75)) {
                    if ((lib90F7C81D_gv_gamemode == 6)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Survival: 75", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 7)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Mission Survival: 75", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 8)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Boss Rush: 75", lp_player);
                    }
                }
                break;
            }
            else {
                lv_earned = 3;
            }
        }
        else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_game_Mode][lp_player] >= 100)) {
            if ((lp_flashAchievementBadge == true)) {
                if ((lp_previousWins < 100)) {
                    if ((lib90F7C81D_gv_gamemode == 6)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Survival: 100", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 7)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Mission Survival: 100", lp_player);
                    }
                    else if ((lib90F7C81D_gv_gamemode == 8)) {
                        lib90F7C81D_gf_FlashAchievementBadge("Boss Rush: 100", lp_player);
                    }
                }
                break;
            }
            else {
                lv_earned = 4;
            }
        }
        autoA165297E_ae = lv_earned;
        lv_indexInner = 0;
        for ( ; ( (autoA165297E_ai >= 0 && lv_indexInner <= autoA165297E_ae) || (autoA165297E_ai < 0 && lv_indexInner >= autoA165297E_ae) ) ; lv_indexInner += autoA165297E_ai ) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[lv_index][lv_indexInner], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        }
    }
}

bool lib90F7C81D_gf_ReturnWin (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_b;

    // Automatic Variable Declarations
    const int auto1D5B5C0B_ae = 9;
    const int auto1D5B5C0B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto1D5B5C0B_ai >= 0 && lv_i <= auto1D5B5C0B_ae) || (auto1D5B5C0B_ai < 0 && lv_i >= auto1D5B5C0B_ae) ) ; lv_i += auto1D5B5C0B_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][lp_player] >= 1)) {
            return true;
        }
    }
    return false;
}

void lib90F7C81D_gf_SetupRankAchievements (int lp_achievementIndex, int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_aCHCount;

    // Automatic Variable Declarations
    int auto42E24468_ae;
    const int auto42E24468_ai = 1;

    // Variable Initialization
    lv_aCHCount = lp_achievementIndex;

    // Implementation
    if ((lp_achievementIndex > 1)) {
        lv_aCHCount += 32;
        auto42E24468_ae = lv_aCHCount;
        lv_index = 34;
        for ( ; ( (auto42E24468_ai >= 0 && lv_index <= auto42E24468_ae) || (auto42E24468_ai < 0 && lv_index >= auto42E24468_ae) ) ; lv_index += auto42E24468_ai ) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 1)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        }
    }

}

void lib90F7C81D_gf_SetupMOSAchievementLevelBadges (int lp_mOS, int lp_achievementIndex, int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_aCHCount;

    // Automatic Variable Declarations
    int autoF7C57A6E_ae;
    const int autoF7C57A6E_ai = 1;

    // Variable Initialization
    lv_aCHCount = lp_achievementIndex;

    // Implementation
    if ((lp_achievementIndex > 0)) {
        lv_aCHCount += 3;
        autoF7C57A6E_ae = lv_aCHCount;
        lv_index = 4;
        for ( ; ( (autoF7C57A6E_ai >= 0 && lv_index <= autoF7C57A6E_ae) || (autoF7C57A6E_ai < 0 && lv_index >= autoF7C57A6E_ae) ) ; lv_index += autoF7C57A6E_ai ) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lp_mOS - 1)][lv_index], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        }
        if ((lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[lp_player] < 5) && (lv_aCHCount >= 8)) {
            lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[lp_player] += 1;
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(22 + lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[lp_player])], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", UserDataInstance("Decals", (31 + lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[lp_player])), lp_player, false);
        }
    }

}

trigger auto_lib90F7C81D_gf_FlashAchievementBadge_Trigger = null;
string auto_lib90F7C81D_gf_FlashAchievementBadge_lp_achievementBadge;
int auto_lib90F7C81D_gf_FlashAchievementBadge_lp_player;

void lib90F7C81D_gf_FlashAchievementBadge (string lp_achievementBadge, int lp_player) {
    auto_lib90F7C81D_gf_FlashAchievementBadge_lp_achievementBadge = lp_achievementBadge;
    auto_lib90F7C81D_gf_FlashAchievementBadge_lp_player = lp_player;

    if (auto_lib90F7C81D_gf_FlashAchievementBadge_Trigger == null) {
        auto_lib90F7C81D_gf_FlashAchievementBadge_Trigger = TriggerCreate("auto_lib90F7C81D_gf_FlashAchievementBadge_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_FlashAchievementBadge_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_FlashAchievementBadge_TriggerFunc (bool testConds, bool runActions) {
    string lp_achievementBadge = auto_lib90F7C81D_gf_FlashAchievementBadge_lp_achievementBadge;
    int lp_player = auto_lib90F7C81D_gf_FlashAchievementBadge_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
        while (lib90F7C81D_gv_achievementBadge.lv_queue[lp_player]) {
            Wait(1.0, c_timeGame);
        }
        lib90F7C81D_gv_achievementBadge.lv_queue[lp_player] = true;
        libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_achievementBadge.lv_iconImage, UserDataGetImagePath("AchievementBadge", lp_achievementBadge, "Icon", 1), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementBadge.lv_nameLabel, UserDataGetText("AchievementBadge", lp_achievementBadge, "Name", 1), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementBadge.lv_descriptionLabel, UserDataGetText("AchievementBadge", lp_achievementBadge, "Description", 1), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementBadge.lv_earnedLabel, UserDataGetText("AchievementBadge", lp_achievementBadge, "Unlock", 1), PlayerGroupSingle(lp_player));
        DialogControlSendAnimationEvent(lib90F7C81D_gv_achievementBadge.lv_flashFrame, PlayerGroupSingle(lp_player), "Display");
        Wait(3.6, c_timeReal);
        lib90F7C81D_gv_achievementBadge.lv_queue[lp_player] = false;
    }
    return true;
}

int lib90F7C81D_gf_RiflemanSUIndex (abilcmd lp_ability) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 13))) {
        lv_index = 0;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 12))) {
        lv_index = 1;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 7))) {
        lv_index = 2;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 6))) {
        lv_index = 3;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 3))) {
        lv_index = 4;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 2))) {
        lv_index = 5;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 10))) {
        lv_index = 6;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 11))) {
        lv_index = 7;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 4))) {
        lv_index = 8;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 5))) {
        lv_index = 9;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 0))) {
        lv_index = 10;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 1))) {
        lv_index = 11;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 8))) {
        lv_index = 12;
    }
    else if ((lp_ability == AbilityCommand("RiflemanSkillUpgrades", 9))) {
        lv_index = 13;
    }
    return lv_index;
}

trigger auto_lib90F7C81D_gf_NoOneLeftBehind_Trigger = null;
int auto_lib90F7C81D_gf_NoOneLeftBehind_lp_player;

void lib90F7C81D_gf_NoOneLeftBehind (int lp_player) {
    auto_lib90F7C81D_gf_NoOneLeftBehind_lp_player = lp_player;

    if (auto_lib90F7C81D_gf_NoOneLeftBehind_Trigger == null) {
        auto_lib90F7C81D_gf_NoOneLeftBehind_Trigger = TriggerCreate("auto_lib90F7C81D_gf_NoOneLeftBehind_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_NoOneLeftBehind_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_NoOneLeftBehind_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib90F7C81D_gf_NoOneLeftBehind_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
        lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[4][lp_player] += 1;
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[1][0], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[4][EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)]), PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)));
        if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[4][lp_player] >= 1000)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[78][lp_player] = true;
            lib90F7C81D_gf_FlashAchievementBadge("No One Left Behind", lp_player);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[1][0], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        }
    }
    return true;
}

int lib90F7C81D_gf_TwoOfAKindIndex (string lp_lN) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_lN == "LNRifleman")) {
        lv_index = 0;
    }
    else if ((lp_lN == "LNAutomaticRifleman")) {
        lv_index = 1;
    }
    else if ((lp_lN == "LNShotgunner")) {
        lv_index = 2;
    }
    else if ((lp_lN == "LNMarksman")) {
        lv_index = 3;
    }
    else if ((lp_lN == "LNJavelinGunner")) {
        lv_index = 4;
    }
    else if ((lp_lN == "LNRanger")) {
        lv_index = 5;
    }
    return lv_index;
}

text lib90F7C81D_gf_TwoOfAKindCount (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_count = lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[lp_index][lp_player];

    // Implementation
    if ((lp_index == 0)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_20291028", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_20291028");
    }
    else if ((lp_index == 1)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_3FB48E64", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_3FB48E64");
    }
    else if ((lp_index == 2)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_BAFF129C", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_BAFF129C");
    }
    else if ((lp_index == 3)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_419BFE4D", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_419BFE4D");
    }
    else if ((lp_index == 4)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_EF3B9868", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_EF3B9868");
    }
    else if ((lp_index == 5)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_010D8EA8", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_010D8EA8");
    }
    return lv_tooltip;
}

int lib90F7C81D_gf_JavelinGunnerSUIndex (abilcmd lp_ability) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_ability == AbilityCommand("JavelinGunnerSkillUpgrades", 6))) {
        lv_index = 0;
    }
    else if ((lp_ability == AbilityCommand("JavelinGunnerSkillUpgrades", 7))) {
        lv_index = 1;
    }
    else if ((lp_ability == AbilityCommand("JavelinGunnerSkillUpgrades", 8))) {
        lv_index = 2;
    }
    else if ((lp_ability == AbilityCommand("JavelinGunnerSkillUpgrades", 9))) {
        lv_index = 3;
    }
    else if ((lp_ability == AbilityCommand("JavelinGunnerSkillUpgrades", 10))) {
        lv_index = 4;
    }
    else if ((lp_ability == AbilityCommand("JavelinGunnerSkillUpgrades", 11))) {
        lv_index = 5;
    }
    else if ((lp_ability == AbilityCommand("JavelinGunnerSkillUpgrades", 12))) {
        lv_index = 6;
    }
    else if ((lp_ability == AbilityCommand("JavelinGunnerSkillUpgrades", 13))) {
        lv_index = 7;
    }
    return lv_index;
}

int lib90F7C81D_gf_CombatOrdersBuff (string lp_behavior) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_behavior == "CombatOrdersAttackSpeed")) {
        lv_index = 0;
    }
    else if ((lp_behavior == "CombatOrdersDamageResist")) {
        lv_index = 1;
    }
    else if ((lp_behavior == "CombatOrdersExplosiveDamage")) {
        lv_index = 2;
    }
    else if ((lp_behavior == "CombatOrdersMovementSpeed")) {
        lv_index = 3;
    }
    else if ((lp_behavior == "CombatOrdersRange")) {
        lv_index = 4;
    }
    else if ((lp_behavior == "CombatOrdersWeaponDamage")) {
        lv_index = 5;
    }
    return lv_index;
}

text lib90F7C81D_gf_CombatOrdersCount (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_count = lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[lp_index][lp_player];

    // Implementation
    if ((lp_index == 0)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_CBEB82AB", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_CBEB82AB");
    }
    else if ((lp_index == 1)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_07E28F73", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_07E28F73");
    }
    else if ((lp_index == 2)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_120CC0BE", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_120CC0BE");
    }
    else if ((lp_index == 3)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_10CDA2D1", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_10CDA2D1");
    }
    else if ((lp_index == 4)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_BEEAD1EC", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_BEEAD1EC");
    }
    else if ((lp_index == 5)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_AA33FCD7", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_AA33FCD7");
    }
    return lv_tooltip;
}

text lib90F7C81D_gf_ConstructCount (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_count = lib90F7C81D_gv_mOSAchievements.lv_constructCount[lp_index][lp_player];

    // Implementation
    if ((lp_index == 0)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_B86D9E28", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_B86D9E28");
    }
    else if ((lp_index == 1)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_D2E701E5", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_D2E701E5");
    }
    else if ((lp_index == 2)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_25E1F067", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_25E1F067");
    }
    else if ((lp_index == 3)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_F852CE68", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_F852CE68");
    }
    else if ((lp_index == 3)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_A71EF1B7", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_A71EF1B7");
    }
    else if ((lp_index == 4)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_FB8D0479", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_FB8D0479");
    }
    else if ((lp_index == 5)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_2FDF6003", "A", IntToText(lv_count));
        lv_tooltip = TextExpressionAssemble("Param/Expression/lib_90F7C81D_2FDF6003");
    }
    return lv_tooltip;
}

void lib90F7C81D_gf_RegisterMosAchievements (unit lp_mos, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "NewRifleman")) {
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[76][lp_player] == false)) {
            TriggerAddEventUnitAbility(lib90F7C81D_gt_PullThePin, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mos)), AbilityCommand("NewFragGrenade", 0), c_unitAbilStageExecute, false);
            TriggerAddEventUnitAbility(lib90F7C81D_gt_PullThePin, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mos)), AbilityCommand("NewMGL", 0), c_unitAbilStageExecute, false);
            TriggerAddEventUnitAbility(lib90F7C81D_gt_PullThePin, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mos)), AbilityCommand("NewSmokeGrenade", 0), c_unitAbilStageExecute, false);
            TriggerAddEventUnitAbility(lib90F7C81D_gt_PullThePin, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lp_mos)), AbilityCommand("SmokeScreen", 0), c_unitAbilStageExecute, false);
        }
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "CavalryScout")) {
        lib90F7C81D_gv_mOSAchievements.lv_playerCS[lp_player] = true;
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "JavelinGunner")) {
        lib90F7C81D_gv_mOSAchievements.lv_playerJV[lp_player] = true;
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "Flamethrower")) {
        lib90F7C81D_gv_mOSAchievements.lv_playerFL[lp_player] = true;
    }
}

void lib90F7C81D_gf_SaveMOSAchievementStats (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_mos;
    int lv_index;
    int lv_indexInner;
    int lv_bool;
    string lv_string;

    // Automatic Variable Declarations
    string auto16D8DDC1_val;
    const int auto088FF42C_ae = 77;
    const int auto088FF42C_ai = 1;
    const int auto8D756A59_ae = 13;
    const int auto8D756A59_ai = 1;
    const int autoC377A4CB_ae = 80;
    const int autoC377A4CB_ai = 1;
    const int auto48997627_ae = 85;
    const int auto48997627_ai = 1;
    const int autoA5ACF402_ae = 89;
    const int autoA5ACF402_ai = 1;
    const int auto845ACE3D_ae = 93;
    const int auto845ACE3D_ai = 1;
    const int autoA0F30FFD_ae = 97;
    const int autoA0F30FFD_ai = 1;
    const int autoC6971789_ae = 7;
    const int autoC6971789_ai = 1;
    const int auto18A4B852_ae = 101;
    const int auto18A4B852_ai = 1;
    const int auto133F7651_ae = 105;
    const int auto133F7651_ai = 1;
    const int autoCB843906_ae = 109;
    const int autoCB843906_ai = 1;
    const int auto3A6592AA_ae = 113;
    const int auto3A6592AA_ai = 1;
    const int autoEE42A125_ae = 117;
    const int autoEE42A125_ai = 1;
    const int auto53E0BC07_ae = 121;
    const int auto53E0BC07_ai = 1;

    // Variable Initialization
    lv_string = "";

    // Implementation
    if ((lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
        auto16D8DDC1_val = UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]);
        if (auto16D8DDC1_val == "NewRifleman") {
            lv_mos = 0;
            lv_index = 74;
            for ( ; ( (auto088FF42C_ai >= 0 && lv_index <= auto088FF42C_ae) || (auto088FF42C_ai < 0 && lv_index >= auto088FF42C_ae) ) ; lv_index += auto088FF42C_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    if ((lv_index != 75)) {
                        BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 74))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                    }
                    else {
                        lv_indexInner = 0;
                        for ( ; ( (auto8D756A59_ai >= 0 && lv_indexInner <= auto8D756A59_ae) || (auto8D756A59_ai < 0 && lv_indexInner >= auto8D756A59_ae) ) ; lv_indexInner += auto8D756A59_ai ) {
                            if ((lib90F7C81D_gv_mOSAchievements.lv_rifleman_JOAT[lv_indexInner][lp_player] == true)) {
                                lv_bool = BoolToInt(true);
                            }
                            else {
                                lv_bool = BoolToInt(false);
                            }
                            lv_string = (lv_string + IntToString(lv_bool));
                        }
                        BankValueSetFromString(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 74))), lv_string);
                    }
                }
            }
        }
        else if (auto16D8DDC1_val == "CombatMedic") {
            lv_mos = 1;
            lv_index = 78;
            for ( ; ( (autoC377A4CB_ai >= 0 && lv_index <= autoC377A4CB_ae) || (autoC377A4CB_ai < 0 && lv_index >= autoC377A4CB_ae) ) ; lv_index += autoC377A4CB_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 78))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                }
            }
        }
        else if (auto16D8DDC1_val == "AutomaticRifleman") {
            lv_mos = 2;
            lv_index = 82;
            for ( ; ( (auto48997627_ai >= 0 && lv_index <= auto48997627_ae) || (auto48997627_ai < 0 && lv_index >= auto48997627_ae) ) ; lv_index += auto48997627_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 82))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                }
            }
        }
        else if (auto16D8DDC1_val == "CavalryScout") {
            lv_mos = 3;
            lv_index = 86;
            for ( ; ( (autoA5ACF402_ai >= 0 && lv_index <= autoA5ACF402_ae) || (autoA5ACF402_ai < 0 && lv_index >= autoA5ACF402_ae) ) ; lv_index += autoA5ACF402_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 86))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                }
            }
        }
        else if (auto16D8DDC1_val == "SFAAT") {
            lv_mos = 4;
            lv_index = 90;
            for ( ; ( (auto845ACE3D_ai >= 0 && lv_index <= auto845ACE3D_ae) || (auto845ACE3D_ai < 0 && lv_index >= auto845ACE3D_ae) ) ; lv_index += auto845ACE3D_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    if ((lv_index != 90)) {
                        BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 90))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                    }
                    else {
                        lv_string = (IntToString(lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[0][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[1][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[2][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[3][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[4][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[5][lp_player]));
                        BankValueSetFromString(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 90))), lv_string);
                    }
                }
            }
        }
        else if (auto16D8DDC1_val == "JavelinGunner") {
            lv_mos = 5;
            lv_index = 94;
            for ( ; ( (autoA0F30FFD_ai >= 0 && lv_index <= autoA0F30FFD_ae) || (autoA0F30FFD_ai < 0 && lv_index >= autoA0F30FFD_ae) ) ; lv_index += autoA0F30FFD_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    if ((lv_index != 94)) {
                        BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 94))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                    }
                    else {
                        lv_indexInner = 0;
                        for ( ; ( (autoC6971789_ai >= 0 && lv_indexInner <= autoC6971789_ae) || (autoC6971789_ai < 0 && lv_indexInner >= autoC6971789_ae) ) ; lv_indexInner += autoC6971789_ai ) {
                            if ((lib90F7C81D_gv_mOSAchievements.lv_jV_Rocketeer[lv_indexInner][lp_player] == true)) {
                                lv_bool = BoolToInt(true);
                            }
                            else {
                                lv_bool = BoolToInt(false);
                            }
                            lv_string = (lv_string + IntToString(lv_bool));
                        }
                        BankValueSetFromString(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 94))), lv_string);
                    }
                }
            }
        }
        else if (auto16D8DDC1_val == "SquadDesignatedMarksman") {
            lv_mos = 6;
            lv_index = 98;
            for ( ; ( (auto18A4B852_ai >= 0 && lv_index <= auto18A4B852_ae) || (auto18A4B852_ai < 0 && lv_index >= auto18A4B852_ae) ) ; lv_index += auto18A4B852_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 98))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                }
            }
        }
        else if (auto16D8DDC1_val == "PlatoonLeader") {
            lv_mos = 7;
            lv_index = 102;
            for ( ; ( (auto133F7651_ai >= 0 && lv_index <= auto133F7651_ae) || (auto133F7651_ai < 0 && lv_index >= auto133F7651_ae) ) ; lv_index += auto133F7651_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    if ((lv_index != 102)) {
                        BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 102))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                    }
                    else {
                        lv_string = (IntToString(lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[0][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[1][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[2][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[3][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[4][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[5][lp_player]));
                        BankValueSetFromString(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 102))), lv_string);
                    }
                }
            }
        }
        else if (auto16D8DDC1_val == "Flamethrower") {
            lv_mos = 8;
            lv_index = 106;
            for ( ; ( (autoCB843906_ai >= 0 && lv_index <= autoCB843906_ae) || (autoCB843906_ai < 0 && lv_index >= autoCB843906_ae) ) ; lv_index += autoCB843906_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 106))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                }
            }
        }
        else if (auto16D8DDC1_val == "CombatEngineer") {
            lv_mos = 9;
            lv_index = 110;
            for ( ; ( (auto3A6592AA_ai >= 0 && lv_index <= auto3A6592AA_ae) || (auto3A6592AA_ai < 0 && lv_index >= auto3A6592AA_ae) ) ; lv_index += auto3A6592AA_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    if ((lv_index != 111)) {
                        BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 110))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                    }
                    else {
                        lv_string = (IntToString(lib90F7C81D_gv_mOSAchievements.lv_constructCount[0][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_constructCount[1][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_constructCount[2][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_constructCount[3][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_constructCount[4][lp_player]) + " " + IntToString(lib90F7C81D_gv_mOSAchievements.lv_constructCount[5][lp_player]));
                        BankValueSetFromString(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 110))), lv_string);
                    }
                }
            }
        }
        else if (auto16D8DDC1_val == "Cyborg") {
            lv_mos = 10;
            lv_index = 114;
            for ( ; ( (autoEE42A125_ai >= 0 && lv_index <= autoEE42A125_ae) || (autoEE42A125_ai < 0 && lv_index >= autoEE42A125_ae) ) ; lv_index += autoEE42A125_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 114))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                }
            }
        }
        else if (auto16D8DDC1_val == "GhostMOS") {
            lv_mos = 11;
            lv_index = 118;
            for ( ; ( (auto53E0BC07_ai >= 0 && lv_index <= auto53E0BC07_ae) || (auto53E0BC07_ai < 0 && lv_index >= auto53E0BC07_ae) ) ; lv_index += auto53E0BC07_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                    BankValueSetFromInt(lp_bank, ("MOS" + IntToString(lv_mos)), ("ACH" + IntToString((lv_index - 118))), lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]);
                }
            }
        }
        else {
        }
    }
    lv_string = (libNtve_gf_ConvertBooleanToString(lib90F7C81D_gv_gameplay.lv_cameraShake[lp_player]) + " " + libNtve_gf_ConvertBooleanToString(lib90F7C81D_gv_gameplay.lv_tacticalSprint[lp_player]) + " " + lib90F7C81D_gv_gameplay.lv_submenuHotkey[lp_player] + " " + libNtve_gf_ConvertBooleanToString(lib90F7C81D_gv_gameplay.lv_vitalsLabel[lp_player]) + " " + libNtve_gf_ConvertBooleanToString(lib90F7C81D_gv_gameplay.lv_segmentedBar[lp_player]));
    BankValueSetFromString(lp_bank, "Options", "Gameplay", lv_string);
}

void lib90F7C81D_gf_LoadMOSAchievementStats (int lp_player, bank lp_bank) {
    // Variable Declarations
    int lv_i;
    int lv_index;
    int lv_indexInner;
    int lv_count;
    string lv_string;

    // Automatic Variable Declarations
    int auto4E19464E_ae;
    const int auto4E19464E_ai = 1;
    const int auto107C4CE0_ae = 77;
    const int auto107C4CE0_ai = 1;
    const int auto425002C1_ae = 14;
    const int auto425002C1_ai = 1;
    const int auto0A4032DB_ae = 14;
    const int auto0A4032DB_ai = 1;
    const int auto621BB3A7_ae = 81;
    const int auto621BB3A7_ai = 1;
    const int autoEF455307_ae = 85;
    const int autoEF455307_ai = 1;
    const int auto4EAB2D1D_ae = 89;
    const int auto4EAB2D1D_ai = 1;
    const int auto35958A4D_ae = 93;
    const int auto35958A4D_ai = 1;
    const int auto71B3520D_ae = 5;
    const int auto71B3520D_ai = 1;
    const int auto5B0088B4_ae = 6;
    const int auto5B0088B4_ai = 1;
    const int auto106B1D33_ae = 97;
    const int auto106B1D33_ai = 1;
    const int auto1B541D3B_ae = 8;
    const int auto1B541D3B_ai = 1;
    const int auto910354C8_ae = 8;
    const int auto910354C8_ai = 1;
    const int auto662B9F58_ae = 101;
    const int auto662B9F58_ai = 1;
    const int autoA1C2BB5C_ae = 105;
    const int autoA1C2BB5C_ai = 1;
    const int auto9438D753_ae = 5;
    const int auto9438D753_ai = 1;
    const int auto9A6A2BA9_ae = 6;
    const int auto9A6A2BA9_ai = 1;
    const int autoBAEEA877_ae = 109;
    const int autoBAEEA877_ai = 1;
    const int auto4F628D58_ae = 113;
    const int auto4F628D58_ai = 1;
    const int autoA9F4BC9A_ae = 5;
    const int autoA9F4BC9A_ai = 1;
    const int autoFB8B2CA8_ae = 6;
    const int autoFB8B2CA8_ai = 1;
    const int autoCAA08504_ae = 117;
    const int autoCAA08504_ai = 1;
    const int autoED2E4B13_ae = 121;
    const int autoED2E4B13_ai = 1;
    const int auto5FE69640_ae = 2;
    const int auto5FE69640_ai = 1;

    // Variable Initialization
    lv_string = "";

    // Implementation
    auto4E19464E_ae = UserDataInstanceCount("AchievementMos");
    lv_i = 1;
    for ( ; ( (auto4E19464E_ai >= 0 && lv_i <= auto4E19464E_ae) || (auto4E19464E_ai < 0 && lv_i >= auto4E19464E_ae) ) ; lv_i += auto4E19464E_ai ) {
        if ((lv_i == 1)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 74;
                for ( ; ( (auto107C4CE0_ai >= 0 && lv_index <= auto107C4CE0_ae) || (auto107C4CE0_ai < 0 && lv_index >= auto107C4CE0_ae) ) ; lv_index += auto107C4CE0_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((lv_index != 75)) {
                            if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 74)))) == true)) {
                                lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 74))));
                                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 74)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                            }
                        }
                        else {
                            if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 74)))) == true)) {
                                lv_string = BankValueGetAsString(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 74))));
                                lv_indexInner = 1;
                                for ( ; ( (auto0A4032DB_ai >= 0 && lv_indexInner <= auto0A4032DB_ae) || (auto0A4032DB_ai < 0 && lv_indexInner >= auto0A4032DB_ae) ) ; lv_indexInner += auto0A4032DB_ai ) {
                                    if ((StringSub(lv_string, lv_indexInner, lv_indexInner) == "1")) {
                                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][1], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString(lv_indexInner)), "Unlocked");
                                        lib90F7C81D_gv_mOSAchievements.lv_rifleman_JOAT[(lv_indexInner - 1)][lp_player] = true;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 74)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((lv_index == 75)) {
                            lv_indexInner = 1;
                            for ( ; ( (auto425002C1_ai >= 0 && lv_indexInner <= auto425002C1_ae) || (auto425002C1_ai < 0 && lv_indexInner >= auto425002C1_ae) ) ; lv_indexInner += auto425002C1_ai ) {
                                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][1], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString(lv_indexInner)), "Hidden");
                            }
                        }
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 74)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 74))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 2)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 78;
                for ( ; ( (auto621BB3A7_ai >= 0 && lv_index <= auto621BB3A7_ae) || (auto621BB3A7_ai < 0 && lv_index >= auto621BB3A7_ae) ) ; lv_index += auto621BB3A7_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 78)))) == true)) {
                            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 78))));
                            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 78)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 78)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 78)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 78))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 3)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 82;
                for ( ; ( (autoEF455307_ai >= 0 && lv_index <= autoEF455307_ae) || (autoEF455307_ai < 0 && lv_index >= autoEF455307_ae) ) ; lv_index += autoEF455307_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 82)))) == true)) {
                            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 82))));
                            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 82)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 82)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 82)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 82))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 4)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 86;
                for ( ; ( (auto4EAB2D1D_ai >= 0 && lv_index <= auto4EAB2D1D_ae) || (auto4EAB2D1D_ai < 0 && lv_index >= auto4EAB2D1D_ae) ) ; lv_index += auto4EAB2D1D_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 86)))) == true)) {
                            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 86))));
                            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 86)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 86)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 86)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 86))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 5)) {
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], c_triggerControlTypeImage, "ACH0");
            lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[0] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], c_triggerControlTypeImage, "ACH1");
            lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[1] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], c_triggerControlTypeImage, "ACH2");
            lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[2] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], c_triggerControlTypeImage, "ACH3");
            lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[3] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], c_triggerControlTypeImage, "ACH4");
            lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[4] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], c_triggerControlTypeImage, "ACH5");
            lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[5] = DialogControlLastCreated();
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 90;
                for ( ; ( (auto35958A4D_ai >= 0 && lv_index <= auto35958A4D_ae) || (auto35958A4D_ai < 0 && lv_index >= auto35958A4D_ae) ) ; lv_index += auto35958A4D_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((lv_index == 90)) {
                            lv_string = BankValueGetAsString(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 90))));
                            lv_indexInner = 0;
                            for ( ; ( (auto71B3520D_ai >= 0 && lv_indexInner <= auto71B3520D_ae) || (auto71B3520D_ai < 0 && lv_indexInner >= auto71B3520D_ae) ) ; lv_indexInner += auto71B3520D_ai ) {
                                lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[lv_indexInner][lp_player] = StringToInt(StringWord(lv_string, (lv_indexInner + 1)));
                                if ((lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[lv_indexInner][lp_player] >= 2)) {
                                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString((lv_indexInner + 1))), "Unlocked");
                                }
                                else {
                                    libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[lv_indexInner], lib90F7C81D_gf_TwoOfAKindCount(lv_indexInner, lp_player), PlayerGroupSingle(lp_player));
                                }
                            }
                        }
                        else {
                            if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 90)))) == true)) {
                                lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 90))));
                                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 90)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                            }
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 90)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((lv_index == 90)) {
                            lv_indexInner = 1;
                            for ( ; ( (auto5B0088B4_ai >= 0 && lv_indexInner <= auto5B0088B4_ae) || (auto5B0088B4_ai < 0 && lv_indexInner >= auto5B0088B4_ae) ) ; lv_indexInner += auto5B0088B4_ai ) {
                                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 90)], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString(lv_indexInner)), "Hidden");
                            }
                        }
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 90)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 90))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 6)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 94;
                for ( ; ( (auto106B1D33_ai >= 0 && lv_index <= auto106B1D33_ae) || (auto106B1D33_ai < 0 && lv_index >= auto106B1D33_ae) ) ; lv_index += auto106B1D33_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((lv_index != 94)) {
                            if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 94)))) == true)) {
                                lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 94))));
                                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 94)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                            }
                        }
                        else {
                            if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 94)))) == true)) {
                                lv_string = BankValueGetAsString(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 94))));
                                lv_indexInner = 1;
                                for ( ; ( (auto1B541D3B_ai >= 0 && lv_indexInner <= auto1B541D3B_ae) || (auto1B541D3B_ai < 0 && lv_indexInner >= auto1B541D3B_ae) ) ; lv_indexInner += auto1B541D3B_ai ) {
                                    if ((StringSub(lv_string, lv_indexInner, lv_indexInner) == "1")) {
                                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 94)], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString(lv_indexInner)), "Unlocked");
                                        lib90F7C81D_gv_mOSAchievements.lv_jV_Rocketeer[(lv_indexInner - 1)][lp_player] = true;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 94)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((lv_index == 94)) {
                            lv_indexInner = 1;
                            for ( ; ( (auto910354C8_ai >= 0 && lv_indexInner <= auto910354C8_ae) || (auto910354C8_ai < 0 && lv_indexInner >= auto910354C8_ae) ) ; lv_indexInner += auto910354C8_ai ) {
                                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 94)], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString(lv_indexInner)), "Hidden");
                            }
                        }
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 94)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 94))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 7)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 98;
                for ( ; ( (auto662B9F58_ai >= 0 && lv_index <= auto662B9F58_ae) || (auto662B9F58_ai < 0 && lv_index >= auto662B9F58_ae) ) ; lv_index += auto662B9F58_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 98)))) == true)) {
                            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 98))));
                            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 98)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 98)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 98)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 98))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 8)) {
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], c_triggerControlTypeImage, "ACH0");
            lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[0] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], c_triggerControlTypeImage, "ACH1");
            lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[1] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], c_triggerControlTypeImage, "ACH2");
            lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[2] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], c_triggerControlTypeImage, "ACH3");
            lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[3] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], c_triggerControlTypeImage, "ACH4");
            lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[4] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], c_triggerControlTypeImage, "ACH5");
            lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[5] = DialogControlLastCreated();
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 102;
                for ( ; ( (autoA1C2BB5C_ai >= 0 && lv_index <= autoA1C2BB5C_ae) || (autoA1C2BB5C_ai < 0 && lv_index >= autoA1C2BB5C_ae) ) ; lv_index += autoA1C2BB5C_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((lv_index == 102)) {
                            lv_string = BankValueGetAsString(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 102))));
                            lv_indexInner = 0;
                            for ( ; ( (auto9438D753_ai >= 0 && lv_indexInner <= auto9438D753_ae) || (auto9438D753_ai < 0 && lv_indexInner >= auto9438D753_ae) ) ; lv_indexInner += auto9438D753_ai ) {
                                lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[lv_indexInner][lp_player] = StringToInt(StringWord(lv_string, (lv_indexInner + 1)));
                                if ((lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[lv_indexInner][lp_player] >= 5)) {
                                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString((lv_indexInner + 1))), "Unlocked");
                                }
                                else {
                                    libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[lv_indexInner], lib90F7C81D_gf_CombatOrdersCount(lv_indexInner, lp_player), PlayerGroupSingle(lp_player));
                                }
                            }
                        }
                        else {
                            if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 102)))) == true)) {
                                lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 102))));
                                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 102)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                            }
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 102)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((lv_index == 102)) {
                            lv_indexInner = 1;
                            for ( ; ( (auto9A6A2BA9_ai >= 0 && lv_indexInner <= auto9A6A2BA9_ae) || (auto9A6A2BA9_ai < 0 && lv_indexInner >= auto9A6A2BA9_ae) ) ; lv_indexInner += auto9A6A2BA9_ai ) {
                                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 102)], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString(lv_indexInner)), "Hidden");
                            }
                        }
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 102)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 102))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 9)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 106;
                for ( ; ( (autoBAEEA877_ai >= 0 && lv_index <= autoBAEEA877_ae) || (autoBAEEA877_ai < 0 && lv_index >= autoBAEEA877_ae) ) ; lv_index += autoBAEEA877_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 106)))) == true)) {
                            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 106))));
                            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 106)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 106)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 106)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 106))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 10)) {
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], c_triggerControlTypeImage, "ACH0");
            lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[0] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], c_triggerControlTypeImage, "ACH1");
            lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[1] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], c_triggerControlTypeImage, "ACH2");
            lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[2] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], c_triggerControlTypeImage, "ACH3");
            lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[3] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], c_triggerControlTypeImage, "ACH4");
            lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[4] = DialogControlLastCreated();
            DialogControlHookup(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], c_triggerControlTypeImage, "ACH5");
            lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[5] = DialogControlLastCreated();
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 110;
                for ( ; ( (auto4F628D58_ai >= 0 && lv_index <= auto4F628D58_ae) || (auto4F628D58_ai < 0 && lv_index >= auto4F628D58_ae) ) ; lv_index += auto4F628D58_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((lv_index == 111)) {
                            lv_string = BankValueGetAsString(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 110))));
                            lv_indexInner = 0;
                            for ( ; ( (autoA9F4BC9A_ai >= 0 && lv_indexInner <= autoA9F4BC9A_ae) || (autoA9F4BC9A_ai < 0 && lv_indexInner >= autoA9F4BC9A_ae) ) ; lv_indexInner += autoA9F4BC9A_ai ) {
                                lib90F7C81D_gv_mOSAchievements.lv_constructCount[lv_indexInner][lp_player] = StringToInt(StringWord(lv_string, (lv_indexInner + 1)));
                                if ((lib90F7C81D_gv_mOSAchievements.lv_constructCount[lv_indexInner][lp_player] >= 5)) {
                                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString((lv_indexInner + 1))), "Unlocked");
                                }
                                else {
                                    libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[lv_indexInner], lib90F7C81D_gf_ConstructCount(lv_indexInner, lp_player), PlayerGroupSingle(lp_player));
                                }
                            }
                        }
                        else {
                            if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 110)))) == true)) {
                                lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 110))));
                                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 110)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                            }
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 110)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((lv_index == 111)) {
                            lv_indexInner = 1;
                            for ( ; ( (autoFB8B2CA8_ai >= 0 && lv_indexInner <= autoFB8B2CA8_ae) || (autoFB8B2CA8_ai < 0 && lv_indexInner >= autoFB8B2CA8_ae) ) ; lv_indexInner += autoFB8B2CA8_ai ) {
                                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 110)], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString(lv_indexInner)), "Hidden");
                            }
                        }
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 110)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 110))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 11)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 114;
                for ( ; ( (autoCAA08504_ai >= 0 && lv_index <= autoCAA08504_ae) || (autoCAA08504_ai < 0 && lv_index >= autoCAA08504_ae) ) ; lv_index += autoCAA08504_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 114)))) == true)) {
                            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 114))));
                            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 114)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 114)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 114)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 114))));
                        }
                    }
                }
            }
        }
        else if ((lv_i == 12)) {
            if ((BankSectionExists(lp_bank, ("MOS" + IntToString((lv_i - 1)))) == true)) {
                lv_index = 118;
                for ( ; ( (autoED2E4B13_ai >= 0 && lv_index <= autoED2E4B13_ae) || (autoED2E4B13_ai < 0 && lv_index >= autoED2E4B13_ae) ) ; lv_index += autoED2E4B13_ai ) {
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 118)))) == true)) {
                            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player] = BankValueGetAsInt(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 118))));
                            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_i - 1)][(lv_index - 118)], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[(lv_index - 74)][lp_player]), PlayerGroupSingle(lp_player));
                        }
                    }
                    else {
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 118)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                        if ((lv_index == 121)) {
                            lv_indexInner = 1;
                            for ( ; ( (auto5FE69640_ai >= 0 && lv_indexInner <= auto5FE69640_ae) || (auto5FE69640_ai < 0 && lv_indexInner >= auto5FE69640_ae) ) ; lv_indexInner += auto5FE69640_ai ) {
                                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_i - 1)][(lv_index - 118)], PlayerGroupSingle(lp_player), ("ExtraIcon" + IntToString(lv_indexInner)), "Hidden");
                            }
                        }
                        if ((BankKeyExists(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 118)))) == true)) {
                            BankKeyRemove(lp_bank, ("MOS" + IntToString((lv_i - 1))), ("ACH" + IntToString((lv_index - 118))));
                        }
                    }
                }
            }
        }
    }
    if ((BankSectionExists(lp_bank, "Options") == true)) {
        lv_string = BankValueGetAsString(lp_bank, "Options", "Gameplay");
        if ((libNtve_gf_ConvertStringToBoolean(StringWord(lv_string, 1)) == false)) {
            DialogControlSelectItem(lib90F7C81D_gv_gameplay.lv_option[0], PlayerGroupSingle(lp_player), 2);
        }
        if ((libNtve_gf_ConvertStringToBoolean(StringWord(lv_string, 2)) == false)) {
            DialogControlSelectItem(lib90F7C81D_gv_gameplay.lv_option[1], PlayerGroupSingle(lp_player), 2);
        }
        if ((StringWord(lv_string, 3) == "Escape")) {
            DialogControlSelectItem(lib90F7C81D_gv_gameplay.lv_option[2], PlayerGroupSingle(lp_player), 2);
        }
        if ((StringWord(lv_string, 4) != "") && (libNtve_gf_ConvertStringToBoolean(StringWord(lv_string, 4)) == false)) {
            DialogControlSelectItem(lib90F7C81D_gv_gameplay.lv_option[3], PlayerGroupSingle(lp_player), 2);
        }
        if ((StringWord(lv_string, 5) != "") && (libNtve_gf_ConvertStringToBoolean(StringWord(lv_string, 5)) == false)) {
            DialogControlSelectItem(lib90F7C81D_gv_gameplay.lv_option[4], PlayerGroupSingle(lp_player), 2);
        }
    }
}

void lib90F7C81D_gf_TurnOffAchievements () {
    // Automatic Variable Declarations
    // Implementation
    lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled = true;
    TriggerEnable(lib90F7C81D_gt_MosAchievementEndGameUpdate, false);
    TriggerEnable(lib90F7C81D_gt_PwnedAchievement, false);
    TriggerEnable(lib90F7C81D_gt_ConcentratedFire, false);
    TriggerEnable(lib90F7C81D_gt_JackOfAllTrades, false);
    TriggerEnable(lib90F7C81D_gt_PullThePin, false);
    TriggerEnable(lib90F7C81D_gt_NotEnoughEnergy, false);
    TriggerEnable(lib90F7C81D_gt_BigPharma, false);
    TriggerEnable(lib90F7C81D_gt_BattleReady, false);
    TriggerEnable(lib90F7C81D_gt_FullAutoPlease, false);
    TriggerEnable(lib90F7C81D_gt_PointOfImpact, false);
    TriggerEnable(lib90F7C81D_gt_BoobyTrap, false);
    TriggerEnable(lib90F7C81D_gt_EyeSeeYou, false);
    TriggerEnable(lib90F7C81D_gt_TargetLockedIn, false);
    TriggerEnable(lib90F7C81D_gt_HeavyHitter, false);
    TriggerEnable(lib90F7C81D_gt_LNKombat, false);
    TriggerEnable(lib90F7C81D_gt_DefenseBudget, false);
    TriggerEnable(lib90F7C81D_gt_Rocketeer, false);
    TriggerEnable(lib90F7C81D_gt_TeamWork, false);
    TriggerEnable(lib90F7C81D_gt_FinishHim, false);
    TriggerEnable(lib90F7C81D_gt_DemolitionMan, false);
    TriggerEnable(lib90F7C81D_gt_Maelstrom, false);
    TriggerEnable(lib90F7C81D_gt_SmokeEm, false);
    TriggerEnable(lib90F7C81D_gt_Supersoldier, false);
    TriggerEnable(lib90F7C81D_gt_FeeltheForce, false);
    TriggerEnable(lib90F7C81D_gt_CombatOrders, false);
    TriggerEnable(lib90F7C81D_gt_Omnipotent, false);
    TriggerEnable(lib90F7C81D_gt_DeathFromAbove, false);
    TriggerEnable(lib90F7C81D_gt_Grenadier, false);
    TriggerEnable(lib90F7C81D_gt_WildfireHarvest, false);
    TriggerEnable(lib90F7C81D_gt_NoPainNoGain, false);
    TriggerEnable(lib90F7C81D_gt_HeavyWeight, false);
    TriggerEnable(lib90F7C81D_gt_LetItBurn, false);
    TriggerEnable(lib90F7C81D_gt_JunkYard, false);
    TriggerEnable(lib90F7C81D_gt_AssembleThis, false);
    TriggerEnable(lib90F7C81D_gt_RageAgainstTheMachine, false);
    TriggerEnable(lib90F7C81D_gt__121Jigawatts, false);
    TriggerEnable(lib90F7C81D_gt_Robocrap, false);
    TriggerEnable(lib90F7C81D_gt_DazedandConfused, false);
    TriggerEnable(lib90F7C81D_gt_LeadtoLife, false);
    TriggerEnable(lib90F7C81D_gt_Escapist, false);
    TriggerEnable(lib90F7C81D_gt_CyborgModes, false);
    TriggerEnable(lib90F7C81D_gt_ResetSonicPulseCount, false);
    TriggerEnable(lib90F7C81D_gt_ShyGuy, false);
    TriggerEnable(lib90F7C81D_gt_HeatSignature, false);
    TriggerEnable(lib90F7C81D_gt_SubZero, false);
    TriggerEnable(lib90F7C81D_gt_NowYouSeeMeNowYouDontt, false);
    TriggerEnable(lib90F7C81D_gt_FindersKeepers, false);
}

void lib90F7C81D_gf_AwardAchievement (int lp_achievement) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    int lv_aCH;

    // Automatic Variable Declarations
    playergroup auto6A6DB520_g;
    int auto6A6DB520_var;
    const int auto4E49DFE5_ae = 72;
    const int auto4E49DFE5_ai = 1;

    // Variable Initialization
    lv_aCH = (lp_achievement);

    // Implementation
    auto6A6DB520_g = lib90F7C81D_gv_players;
    auto6A6DB520_var = -1;
    while (true) {
        auto6A6DB520_var = PlayerGroupNextPlayer(auto6A6DB520_g, auto6A6DB520_var);
        if (auto6A6DB520_var < 0) { break; }
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_aCH][auto6A6DB520_var] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_aCH][auto6A6DB520_var] = true;
            lib90F7C81D_gf_FlashAchievementBadge(UserDataInstance("AchievementBadge", (lv_aCH + 102)), auto6A6DB520_var);
            if ((lv_aCH >= 53) && (lv_aCH <= 57)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[5][(lv_aCH - 53)], PlayerGroupSingle(auto6A6DB520_var), "AchievementBadge", "Earned");
            }
            else if ((lv_aCH >= 58) && (lv_aCH <= 62)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[6][(lv_aCH - 58)], PlayerGroupSingle(auto6A6DB520_var), "AchievementBadge", "Earned");
            }
            else if ((lv_aCH >= 63) && (lv_aCH <= 67)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[7][(lv_aCH - 63)], PlayerGroupSingle(auto6A6DB520_var), "AchievementBadge", "Earned");
            }
            else if ((lv_aCH >= 68) && (lv_aCH <= 72)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[8][(lv_aCH - 68)], PlayerGroupSingle(auto6A6DB520_var), "AchievementBadge", "Earned");
            }
        }
        lv_c = 0;
        lv_i = 53;
        for ( ; ( (auto4E49DFE5_ai >= 0 && lv_i <= auto4E49DFE5_ae) || (auto4E49DFE5_ai < 0 && lv_i >= auto4E49DFE5_ae) ) ; lv_i += auto4E49DFE5_ai ) {
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_i][auto6A6DB520_var] == true)) {
                lv_c += 1;
            }
        }
        if ((lv_c == 20)) {
            lib90F7C81D_gf_UnlockMedal("Indomitable", auto6A6DB520_var);
        }
    }
}

void lib90F7C81D_gf_CampaignWins () {
    // Variable Declarations
    int lv_index;
    int lv_indexInner;
    int[5][13] lv_previous_Wins;
    int lv_i;
    int lv_gameMode;

    // Automatic Variable Declarations
    playergroup autoD56423F4_g;
    int autoD56423F4_var;
    const int auto137B1CCC_ae = 5;
    const int auto137B1CCC_ai = 1;
    int autoA3838DA7_ae;
    const int autoA3838DA7_ai = 1;
    int auto03D2681F_ae;
    const int auto03D2681F_ai = 1;

    // Variable Initialization

    // Implementation
    autoD56423F4_g = lib90F7C81D_gv_players;
    autoD56423F4_var = -1;
    while (true) {
        autoD56423F4_var = PlayerGroupNextPlayer(autoD56423F4_g, autoD56423F4_var);
        if (autoD56423F4_var < 0) { break; }
        if ((lib90F7C81D_gv_victory)) {
            autoA3838DA7_ae = lib90F7C81D_gf_GameMode();
            lv_i = 1;
            for ( ; ( (autoA3838DA7_ai >= 0 && lv_i <= autoA3838DA7_ae) || (autoA3838DA7_ai < 0 && lv_i >= autoA3838DA7_ae) ) ; lv_i += autoA3838DA7_ai ) {
                lv_previous_Wins[(lv_i - 1)][autoD56423F4_var] = lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var];
                lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] += 1;
            }
            auto03D2681F_ae = lib90F7C81D_gf_GameMode();
            lv_i = 1;
            for ( ; ( (auto03D2681F_ai >= 0 && lv_i <= auto03D2681F_ae) || (auto03D2681F_ai < 0 && lv_i >= auto03D2681F_ae) ) ; lv_i += auto03D2681F_ai ) {
                if ((lv_previous_Wins[(lv_i - 1)][autoD56423F4_var] < 10) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] >= 10) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] < 25)) {
                    lib90F7C81D_gf_FlashCampaignWinACH(lv_i, autoD56423F4_var);
                }
                else if ((lv_previous_Wins[(lv_i - 1)][autoD56423F4_var] < 25) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] >= 25) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] < 50)) {
                    lib90F7C81D_gf_FlashCampaignWinACH(lv_i, autoD56423F4_var);
                }
                else if ((lv_previous_Wins[(lv_i - 1)][autoD56423F4_var] < 50) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] >= 50) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] < 75)) {
                    lib90F7C81D_gf_FlashCampaignWinACH(lv_i, autoD56423F4_var);
                }
                else if ((lv_previous_Wins[(lv_i - 1)][autoD56423F4_var] < 75) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] >= 75) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] < 100)) {
                    lib90F7C81D_gf_FlashCampaignWinACH(lv_i, autoD56423F4_var);
                }
                else if ((lv_previous_Wins[(lv_i - 1)][autoD56423F4_var] < 100) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_i][autoD56423F4_var] >= 100)) {
                    lib90F7C81D_gf_FlashCampaignWinACH(lv_i, autoD56423F4_var);
                }
            }
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[51][autoD56423F4_var] == false)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[51][autoD56423F4_var] = true;
                lib90F7C81D_gf_FlashAchievementBadge("First Win", autoD56423F4_var);
            }
            if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (3) && (lib90F7C81D_gv_bankData.lv_camosUnlocked[20][autoD56423F4_var] == false)) {
                lib90F7C81D_gv_bankData.lv_camosUnlocked[20][autoD56423F4_var] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Campaign: Hard", autoD56423F4_var);
            }
        }
        else {
            lv_index = 1;
            for ( ; ( (auto137B1CCC_ai >= 0 && lv_index <= auto137B1CCC_ae) || (auto137B1CCC_ai < 0 && lv_index >= auto137B1CCC_ae) ) ; lv_index += auto137B1CCC_ai ) {
                if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] < 10)) {
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsMaxP[9][(5 - lv_index)], StringExternal("Param/Value/lib_90F7C81D_12436F9C"), PlayerGroupSingle(autoD56423F4_var));
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[9][(5 - lv_index)], IntToText(lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var]), PlayerGroupSingle(autoD56423F4_var));
                }
                else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] >= 10) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] < 25)) {
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsMaxP[9][(5 - lv_index)], StringExternal("Param/Value/lib_90F7C81D_50F646C3"), PlayerGroupSingle(autoD56423F4_var));
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[9][(5 - lv_index)], IntToText((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] - 10)), PlayerGroupSingle(autoD56423F4_var));
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[9][(5 - lv_index)], PlayerGroupSingle(autoD56423F4_var), "ExtraIcon1", "Unlocked");
                }
                else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] >= 25) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] < 50)) {
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsMaxP[9][(5 - lv_index)], StringExternal("Param/Value/lib_90F7C81D_71D84497"), PlayerGroupSingle(autoD56423F4_var));
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[9][(5 - lv_index)], IntToText((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] - 25)), PlayerGroupSingle(autoD56423F4_var));
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[9][(5 - lv_index)], PlayerGroupSingle(autoD56423F4_var), "ExtraIcon2", "Unlocked");
                }
                else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] >= 50) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] < 75)) {
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsMaxP[9][(5 - lv_index)], StringExternal("Param/Value/lib_90F7C81D_CA344C0C"), PlayerGroupSingle(autoD56423F4_var));
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[9][(5 - lv_index)], IntToText((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] - 25)), PlayerGroupSingle(autoD56423F4_var));
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[9][(5 - lv_index)], PlayerGroupSingle(autoD56423F4_var), "ExtraIcon3", "Unlocked");
                }
                else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] >= 75) && (lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] < 100)) {
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsMaxP[9][(5 - lv_index)], StringExternal("Param/Value/lib_90F7C81D_9319A0CE"), PlayerGroupSingle(autoD56423F4_var));
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[9][(5 - lv_index)], IntToText((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] - 25)), PlayerGroupSingle(autoD56423F4_var));
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[9][(5 - lv_index)], PlayerGroupSingle(autoD56423F4_var), "ExtraIcon4", "Unlocked");
                }
                else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lv_index][autoD56423F4_var] >= 100)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[9][(5 - lv_index)], PlayerGroupSingle(autoD56423F4_var), "ExtraIcon5", "Unlocked");
                }
            }
        }
    }
}

trigger auto_lib90F7C81D_gf_FlashCampaignWinACH_Trigger = null;
int auto_lib90F7C81D_gf_FlashCampaignWinACH_lp_difficulty;
int auto_lib90F7C81D_gf_FlashCampaignWinACH_lp_player;

void lib90F7C81D_gf_FlashCampaignWinACH (int lp_difficulty, int lp_player) {
    auto_lib90F7C81D_gf_FlashCampaignWinACH_lp_difficulty = lp_difficulty;
    auto_lib90F7C81D_gf_FlashCampaignWinACH_lp_player = lp_player;

    if (auto_lib90F7C81D_gf_FlashCampaignWinACH_Trigger == null) {
        auto_lib90F7C81D_gf_FlashCampaignWinACH_Trigger = TriggerCreate("auto_lib90F7C81D_gf_FlashCampaignWinACH_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_FlashCampaignWinACH_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_FlashCampaignWinACH_TriggerFunc (bool testConds, bool runActions) {
    int lp_difficulty = auto_lib90F7C81D_gf_FlashCampaignWinACH_lp_difficulty;
    int lp_player = auto_lib90F7C81D_gf_FlashCampaignWinACH_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while (lib90F7C81D_gv_achievementBadge.lv_queue[lp_player]) {
        Wait(1.0, c_timeGame);
    }
    lib90F7C81D_gv_achievementBadge.lv_queue[lp_player] = true;
    libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_achievementBadge.lv_iconImage, lib90F7C81D_gf_DifficultyImage(lp_difficulty), PlayerGroupSingle(lp_player));
    TextExpressionSetToken("Param/Expression/lib_90F7C81D_2706F33A", "A", lib90F7C81D_gf_DifficultyText(lp_difficulty));
    TextExpressionSetToken("Param/Expression/lib_90F7C81D_2706F33A", "B", IntToText(lib90F7C81D_gf_DifficultyWinAmount(lp_difficulty, lp_player)));
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementBadge.lv_nameLabel, TextExpressionAssemble("Param/Expression/lib_90F7C81D_2706F33A"), PlayerGroupSingle(lp_player));
    TextExpressionSetToken("Param/Expression/lib_90F7C81D_4C7AB0A3", "A", IntToText(lib90F7C81D_gf_DifficultyWinAmount(lp_difficulty, lp_player)));
    TextExpressionSetToken("Param/Expression/lib_90F7C81D_4C7AB0A3", "B", lib90F7C81D_gf_DifficultyText(lp_difficulty));
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementBadge.lv_descriptionLabel, TextExpressionAssemble("Param/Expression/lib_90F7C81D_4C7AB0A3"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementBadge.lv_earnedLabel, StringToText(""), PlayerGroupSingle(lp_player));
    DialogControlSendAnimationEvent(lib90F7C81D_gv_achievementBadge.lv_flashFrame, PlayerGroupSingle(lp_player), "Display");
    Wait(3.6, c_timeReal);
    lib90F7C81D_gv_achievementBadge.lv_queue[lp_player] = false;
    return true;
}

text lib90F7C81D_gf_DifficultyText (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_difficulty == 1)) {
        return StringExternal("Param/Value/lib_90F7C81D_DB6F36CE");
    }
    else if ((lp_difficulty == 2)) {
        return StringExternal("Param/Value/lib_90F7C81D_CFC2F4A9");
    }
    else if ((lp_difficulty == 3)) {
        return StringExternal("Param/Value/lib_90F7C81D_02124F70");
    }
    else if ((lp_difficulty == 4)) {
        return StringExternal("Param/Value/lib_90F7C81D_BED8DD3D");
    }
    else if ((lp_difficulty == 5)) {
        return StringExternal("Param/Value/lib_90F7C81D_647F8A38");
    }
    return null;
}

string lib90F7C81D_gf_DifficultyImage (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_difficulty == 1)) {
        return "Assets\\Achievements\\Achievement_Recruit.dds";
    }
    else if ((lp_difficulty == 2)) {
        return "Assets\\Achievements\\Achievement_Normal.dds";
    }
    else if ((lp_difficulty == 3)) {
        return "Assets\\Achievements\\Achievement_Hard.dds";
    }
    else if ((lp_difficulty == 4)) {
        return "Assets\\Achievements\\Achievement_Insane.dds";
    }
    else if ((lp_difficulty == 5)) {
        return "Assets\\Achievements\\Achievement_Nightmare.dds";
    }
    return null;
}

int lib90F7C81D_gf_DifficultyWinAmount (int lp_difficulty, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] >= 10) && (lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] < 25)) {
        return 10;
    }
    else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] >= 25) && (lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] < 50)) {
        return 25;
    }
    else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] >= 50) && (lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] < 75)) {
        return 50;
    }
    else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] >= 75) && (lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] < 100)) {
        return 75;
    }
    else if ((lib90F7C81D_gv_bankData.lv_gamesWon[lp_difficulty][lp_player] >= 100)) {
        return 100;
    }
    return -1;
}

void lib90F7C81D_gf_UpdateMOSTextureFromIndex (string lp_userType, int lp_preset, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_preset == lib90F7C81D_ge_TextureType_Camo)) {
        lib90F7C81D_gv_mOSTexture.lv_camo[lp_player] = UserDataGetGameLink("Camos", lp_userType, "Camo", 1);
        ActorSend(ActorFromDialogControl(lib90F7C81D_gv_achievementPanel.lv_modelPanel[lib90F7C81D_gv_achievementPanel.lv_modelIndex[lp_player]][lp_player]), libNtve_gf_TextureSelectByID(lib90F7C81D_gv_mOSTexture.lv_camo[lp_player]));
        libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_playerHeroes[lp_player], libNtve_gf_TextureSelectByID(lib90F7C81D_gv_mOSTexture.lv_camo[lp_player]));
        lib90F7C81D_gf_AddMaterial(lib90F7C81D_gv_mOSTexture.lv_camo[lp_player], lp_player);
    }
    else {
        lib90F7C81D_gv_mOSTexture.lv_decal[lp_player] = UserDataGetGameLink("Decals", lp_userType, "Decals", 1);
        ActorSend(ActorFromDialogControl(lib90F7C81D_gv_achievementPanel.lv_modelPanel[lib90F7C81D_gv_achievementPanel.lv_modelIndex[lp_player]][lp_player]), libNtve_gf_TextureSelectByID(lib90F7C81D_gv_mOSTexture.lv_decal[lp_player]));
        libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_playerHeroes[lp_player], libNtve_gf_TextureSelectByID(lib90F7C81D_gv_mOSTexture.lv_decal[lp_player]));
    }
}

void lib90F7C81D_gf_AddMaterial (string lp_camo, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_mOSTexture.lv_material[lp_player] != null)) {
        UnitBehaviorRemove(lib90F7C81D_gv_playerHeroes[lp_player], lib90F7C81D_gv_mOSTexture.lv_material[lp_player], 1);
    }
    if ((lp_camo == "CamoParty20")) {
        lib90F7C81D_gv_mOSTexture.lv_material[lp_player] = "GlazeParty";
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[lp_player], lib90F7C81D_gv_mOSTexture.lv_material[lp_player], lib90F7C81D_gv_playerHeroes[lp_player], 1);
    }
    else if ((lp_camo == "CamoOctoGreen")) {
        lib90F7C81D_gv_mOSTexture.lv_material[lp_player] = "GlazeOctoGreen";
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[lp_player], lib90F7C81D_gv_mOSTexture.lv_material[lp_player], lib90F7C81D_gv_playerHeroes[lp_player], 1);
    }
    else if ((lp_camo == "CamoArtic")) {
        lib90F7C81D_gv_mOSTexture.lv_material[lp_player] = "GlazeArtic";
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[lp_player], lib90F7C81D_gv_mOSTexture.lv_material[lp_player], lib90F7C81D_gv_playerHeroes[lp_player], 1);
    }
    else if ((lp_camo == "CamoYellowJacket")) {
        lib90F7C81D_gv_mOSTexture.lv_material[lp_player] = "GlazeYellowJacket";
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[lp_player], lib90F7C81D_gv_mOSTexture.lv_material[lp_player], lib90F7C81D_gv_playerHeroes[lp_player], 1);
    }
}

int lib90F7C81D_gf_Type (int lp_type) {
    // Variable Declarations
    int lv_type;

    // Automatic Variable Declarations
    int auto7BB14861_val;

    // Variable Initialization
    lv_type = lib90F7C81D_ge_TextureType_Camo;

    // Implementation
    auto7BB14861_val = lp_type;
    if (auto7BB14861_val == 1) {
        lv_type = lib90F7C81D_ge_TextureType_Decal;
    }
    else if (auto7BB14861_val == 2) {
        lv_type = lib90F7C81D_ge_TextureType_Both;
    }
    else {
        lv_type = lib90F7C81D_ge_TextureType_Camo;
    }
    return lv_type;
}

void lib90F7C81D_gf_UnlockTexture (int lp_preset, string lp_camos, string lp_decal, int lp_player, bool lp_saveBank) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_preset == lib90F7C81D_ge_TextureType_Camo)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_camoList[(libNtve_gf_UserDataInstanceGetIndex("Camos", lp_camos) - 1)], PlayerGroupSingle(lp_player), "Unlocked", "True");
        if ((lp_saveBank == true) && (lib90F7C81D_gv_bankData.lv_camosUnlocked[libNtve_gf_UserDataInstanceGetIndex("Camos", lp_camos)][lp_player] == false)) {
            lib90F7C81D_gv_bankData.lv_camosUnlocked[libNtve_gf_UserDataInstanceGetIndex("Camos", lp_camos)][lp_player] = true;
        }
    }
    else if ((lp_preset == lib90F7C81D_ge_TextureType_Decal)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_decalList[(libNtve_gf_UserDataInstanceGetIndex("Decals", lp_decal) - 1)], PlayerGroupSingle(lp_player), "Unlocked", "True");
        if ((lp_saveBank == true) && (lib90F7C81D_gv_bankData.lv_decalsUnlocked[libNtve_gf_UserDataInstanceGetIndex("Decals", lp_decal)][lp_player] == false)) {
            lib90F7C81D_gv_bankData.lv_decalsUnlocked[libNtve_gf_UserDataInstanceGetIndex("Decals", lp_decal)][lp_player] = true;
        }
    }
    else if ((lp_preset == lib90F7C81D_ge_TextureType_Both)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_camoList[(libNtve_gf_UserDataInstanceGetIndex("Camos", lp_camos) - 1)], PlayerGroupSingle(lp_player), "Unlocked", "True");
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_decalList[(libNtve_gf_UserDataInstanceGetIndex("Decals", lp_decal) - 1)], PlayerGroupSingle(lp_player), "Unlocked", "True");
        if ((lp_saveBank == true) && ((lib90F7C81D_gv_bankData.lv_camosUnlocked[libNtve_gf_UserDataInstanceGetIndex("Camos", lp_camos)][lp_player] == false) || (lib90F7C81D_gv_bankData.lv_decalsUnlocked[libNtve_gf_UserDataInstanceGetIndex("Decals", lp_decal)][lp_player] == false))) {
            lib90F7C81D_gv_bankData.lv_camosUnlocked[libNtve_gf_UserDataInstanceGetIndex("Camos", lp_camos)][lp_player] = true;
            lib90F7C81D_gv_bankData.lv_decalsUnlocked[libNtve_gf_UserDataInstanceGetIndex("Decals", lp_decal)][lp_player] = true;
        }
    }
}

void lib90F7C81D_gf_UnlockMedal (string lp_medal, int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = libNtve_gf_UserDataInstanceGetIndex("Medals", lp_medal);

    // Implementation
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge(UserDataGetUserInstance("Medals", UserDataInstance("Medals", lv_index), "Achievement", 1), lp_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_medal[(lv_index - 1)], PlayerGroupSingle(lp_player), "Locked", "False");
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[3][lp_player] == true)) {
            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Type09", "Rank Insignia", lp_player, false);
        }
    }
}

void lib90F7C81D_gf_RewardMedal (int lp_medal, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[(lp_medal + 1)][lp_player] == true)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_medal[lp_medal], PlayerGroupSingle(lp_player), "Locked", "False");
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[3][lp_player] == true)) {
            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Type09", "Rank Insignia", lp_player, false);
        }
    }
}

void lib90F7C81D_gf_RibbonReward (int lp_index, int lp_panel, int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_min;
    int lv_max;
    int lv_count;

    // Automatic Variable Declarations
    int autoF787C993_ae;
    const int autoF787C993_ai = 1;

    // Variable Initialization
    lv_min = (70 + (lp_index * 4));
    lv_max = (lv_min + 3);

    // Implementation
    autoF787C993_ae = lv_max;
    lv_i = lv_min;
    for ( ; ( (autoF787C993_ai >= 0 && lv_i <= autoF787C993_ae) || (autoF787C993_ai < 0 && lv_i >= autoF787C993_ae) ) ; lv_i += autoF787C993_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_i][lp_player] == true)) {
            lv_count += 1;
            if ((lv_count == 4)) {
                DialogControlSetAnimationState(lp_panel, PlayerGroupSingle(lp_player), "Ribbon", "Unlocked");
            }
        }
    }
}

void lib90F7C81D_gf_ReloadWeapon (int lp_player, int lp_controller) {
    // Variable Declarations
    unit lv_hero;
    soundlink lv_magout;
    soundlink lv_magin;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = lib90F7C81D_gv_playerHeroes[lp_player];
    lv_magout = SoundLink("magout", -1);
    lv_magin = SoundLink("magin", -1);

    // Implementation
    DialogControlSetAnimationState(lib90F7C81D_gv_inventory.lv_inventoryButton, PlayerGroupSingle(lp_player), "WeaponSlot", "Disable");
    if ((UnitGetType(lv_hero) == "GhostMOS")) {
        lv_magin = SoundLink("maginplasma", -1);
        lv_magout = SoundLink("magoutplasma", -1);
    }

    UnitBehaviorSetDuration(lv_hero, "ReloadTime", lib90F7C81D_gv_reloadbasetime[lp_player]);
    lib90F7C81D_gf_CreateTextTagForAllPlayers(lv_hero, StringExternal("Param/Value/lib_90F7C81D_3789D6B3"));
    SoundPlayAtPoint(lv_magout, PlayerGroupAll(), UnitGetPosition(lv_hero), 0.0, 100.0, 0.0);
    Wait(UnitBehaviorDuration(lv_hero, "ReloadTime"), c_timeGame);
    SoundPlayAtPoint(lv_magin, PlayerGroupAll(), UnitGetPosition(lv_hero), 0.0, 100.0, 0.0);
    libE6C8C21C_gf_ForceAbilityToSkipCooldown(lv_hero, AbilityCommand("ReloadHero", 0), c_spendLocationAll);
    lv_magout = null;
    lv_magin = null;
    lv_hero = null;
}

void lib90F7C81D_gf_UpdateReloadDurationLabel (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_reloadbasetime[UnitGetOwner(lp_unit)] < 0.0)) {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(lp_unit)] = 0.0;
    }
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_ammoBar.lv_reloadSpeedLabel, FixedToText(lib90F7C81D_gv_reloadbasetime[UnitGetOwner(lp_unit)], 2), PlayerGroupSingle(UnitGetOwner(lp_unit)));
}

abilcmd lib90F7C81D_gf_ReloadAbilitySkipCooldown (unit lp_unit) {
    // Variable Declarations
    abilcmd lv_abilCommand;

    // Automatic Variable Declarations
    string autoFD79D333_val;

    // Variable Initialization

    // Implementation
    autoFD79D333_val = UnitGetType(lp_unit);
    if (autoFD79D333_val == "LNRifleman") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else if (autoFD79D333_val == "LNAutomaticRifleman") {
        lv_abilCommand = AbilityCommand("ReloadLNMachineGun", 0);
    }
    else if (autoFD79D333_val == "LNMarksman") {
        lv_abilCommand = AbilityCommand("ReloadNPCDMR", 0);
    }
    else if (autoFD79D333_val == "LNShotgunner") {
        lv_abilCommand = AbilityCommand("ReloadNPCShotgun", 0);
    }
    else if (autoFD79D333_val == "LNJavelinGunner") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else if (autoFD79D333_val == "LNRanger") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else if (autoFD79D333_val == "PoliceOfficer") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else if (autoFD79D333_val == "PoliceOfficerShotgun") {
        lv_abilCommand = AbilityCommand("ReloadNPCShotgun", 0);
    }
    else if (autoFD79D333_val == "InfantryRifleman") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else if (autoFD79D333_val == "InfantryAutomaticRifleman") {
        lv_abilCommand = AbilityCommand("ReloadInfantryMachineGun", 0);
    }
    else if (autoFD79D333_val == "InfantryMedic") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else if (autoFD79D333_val == "InfantryMarksman") {
        lv_abilCommand = AbilityCommand("ReloadNPCDMR", 0);
    }
    else if (autoFD79D333_val == "InfantryShotgunner") {
        lv_abilCommand = AbilityCommand("ReloadNPCShotgun", 0);
    }
    else if (autoFD79D333_val == "InfantryJavelinGunner") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else if (autoFD79D333_val == "InfantryCommander") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else if (autoFD79D333_val == "InfantrySniper") {
        lv_abilCommand = AbilityCommand("ReloadNPCSniper", 0);
    }
    else if (autoFD79D333_val == "InfantryForwardObserver") {
        lv_abilCommand = AbilityCommand("ReloadNPCRifle", 0);
    }
    else {
    }
    return lv_abilCommand;
}

void lib90F7C81D_gf_MoveChatBar (int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_type == lib90F7C81D_ge_ChatBarAnchor_Move)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_chatBarAnchor, PlayerGroupAll(), "Drag", "Disabled");
        DialogControlSetPosition(lib90F7C81D_gv_chatBarAnchor, PlayerGroupAll(), c_anchorLeft, 0, 260);
    }
    else if ((lp_type == lib90F7C81D_ge_ChatBarAnchor_Default)) {
        DialogControlSetPosition(lib90F7C81D_gv_chatBarAnchor, PlayerGroupAll(), c_anchorLeft, 725, 260);
        DialogControlSetAnimationState(lib90F7C81D_gv_chatBarAnchor, PlayerGroupAll(), "Drag", "Enabled");
    }
    else if ((lp_type == lib90F7C81D_ge_ChatBarAnchor_GameOver)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_chatBarAnchor, PlayerGroupAll(), "Drag", "Disabled");
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatBar");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 125);
    }
}

point lib90F7C81D_gf_DebugCPCoordinates (int lp_panel, int lp_player) {
    // Variable Declarations
    int lv_int;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoB1FA0950_ae = 3;
    const int autoB1FA0950_ai = 1;

    // Variable Initialization

    // Implementation
    lv_int = 0;
    for ( ; ( (autoB1FA0950_ai >= 0 && lv_int <= autoB1FA0950_ae) || (autoB1FA0950_ai < 0 && lv_int >= autoB1FA0950_ae) ) ; lv_int += autoB1FA0950_ai ) {
        lv_x += ((DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, (IntToString(lp_panel) + ("X" + IntToString(PowI(10.0, IntToFixed(lv_int)))))), lp_player) - 1) * PowI(10.0, IntToFixed(lv_int)));
        lv_y += ((DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, (IntToString(lp_panel) + ("Y" + IntToString(PowI(10.0, IntToFixed(lv_int)))))), lp_player) - 1) * PowI(10.0, IntToFixed(lv_int)));
    }
    lib90F7C81D_gv_commandCard.lv_xCoord[lp_player] = IntToFixed(lv_x);
    lib90F7C81D_gv_commandCard.lv_yCoord[lp_player] = IntToFixed(lv_y);
    return Point(IntToFixed(lv_x), IntToFixed(lv_y));
}

void lib90F7C81D_gf_UpdateCPCoordinates (int lp_panel, int lp_player) {
    // Variable Declarations
    int lv_int;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto021CC04A_ae = 3;
    const int auto021CC04A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_int = 0;
    for ( ; ( (auto021CC04A_ai >= 0 && lv_int <= auto021CC04A_ae) || (auto021CC04A_ai < 0 && lv_int >= auto021CC04A_ae) ) ; lv_int += auto021CC04A_ai ) {
        lv_x += ((DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, (IntToString(lp_panel) + ("X" + IntToString(PowI(10.0, IntToFixed(lv_int)))))), lp_player) - 1) * PowI(10.0, IntToFixed(lv_int)));
        lv_y += ((DialogControlGetSelectedItem(libNtve_gf_ValueFromDataTableDialogItem(true, (IntToString(lp_panel) + ("Y" + IntToString(PowI(10.0, IntToFixed(lv_int)))))), lp_player) - 1) * PowI(10.0, IntToFixed(lv_int)));
    }
    lib90F7C81D_gv_commandCard.lv_xCoord[lp_player] = IntToFixed(lv_x);
    lib90F7C81D_gv_commandCard.lv_yCoord[lp_player] = IntToFixed(lv_y);
}

void lib90F7C81D_gf_HookupCoordinateReporter (int lp_panel, int lp_player) {
    // Variable Declarations
    int lv_item;
    int lv_coordinates;
    int lv_x;
    int lv_y;
    int lv_pulldown;

    // Automatic Variable Declarations
    const int auto5A92165C_ae = 9;
    const int auto5A92165C_ai = 1;
    const int autoA8C3F7A4_ae = 9;
    const int autoA8C3F7A4_ai = 1;
    const int auto6F4CFB94_ae = 9;
    const int auto6F4CFB94_ai = 1;
    const int auto5CCD0CCA_ae = 9;
    const int auto5CCD0CCA_ai = 1;
    const int auto4D5C5B46_ae = 9;
    const int auto4D5C5B46_ai = 1;
    const int autoFC11EAB6_ae = 9;
    const int autoFC11EAB6_ai = 1;
    const int auto13CE4949_ae = 9;
    const int auto13CE4949_ai = 1;
    const int auto35E92B73_ae = 9;
    const int auto35E92B73_ai = 1;

    // Variable Initialization
    lv_item = lp_panel;
    lv_coordinates = c_invalidDialogControlId;
    lv_pulldown = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lp_panel, c_triggerControlTypePanel, "CoordinatesTemplate");
    lv_coordinates = DialogControlLastCreated();
    DialogControlHookup(lv_coordinates, c_triggerControlTypePulldown, "XThousandPull");
    lv_pulldown = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, (IntToString(lv_item) + "X1000"), lv_pulldown);
    lv_y = 0;
    for ( ; ( (auto5A92165C_ai >= 0 && lv_y <= auto5A92165C_ae) || (auto5A92165C_ai < 0 && lv_y >= auto5A92165C_ae) ) ; lv_y += auto5A92165C_ai ) {
        DialogControlAddItem(lv_pulldown, PlayerGroupSingle(lp_player), StringToText(""));
    }
    DialogControlSelectItem(lv_pulldown, PlayerGroupSingle(lp_player), 1);
    DialogControlHookup(lv_coordinates, c_triggerControlTypePulldown, "XHundredPull");
    lv_pulldown = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, (IntToString(lv_item) + "X100"), lv_pulldown);
    lv_y = 0;
    for ( ; ( (autoA8C3F7A4_ai >= 0 && lv_y <= autoA8C3F7A4_ae) || (autoA8C3F7A4_ai < 0 && lv_y >= autoA8C3F7A4_ae) ) ; lv_y += autoA8C3F7A4_ai ) {
        DialogControlAddItem(lv_pulldown, PlayerGroupSingle(lp_player), StringToText(""));
    }
    DialogControlSelectItem(lv_pulldown, PlayerGroupSingle(lp_player), 1);
    DialogControlHookup(lv_coordinates, c_triggerControlTypePulldown, "XTenPull");
    lv_pulldown = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, (IntToString(lv_item) + "X10"), lv_pulldown);
    lv_y = 0;
    for ( ; ( (auto6F4CFB94_ai >= 0 && lv_y <= auto6F4CFB94_ae) || (auto6F4CFB94_ai < 0 && lv_y >= auto6F4CFB94_ae) ) ; lv_y += auto6F4CFB94_ai ) {
        DialogControlAddItem(lv_pulldown, PlayerGroupSingle(lp_player), StringToText(""));
    }
    DialogControlSelectItem(lv_pulldown, PlayerGroupSingle(lp_player), 1);
    DialogControlHookup(lv_coordinates, c_triggerControlTypePulldown, "XSinglePull");
    lv_pulldown = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, (IntToString(lv_item) + "X1"), lv_pulldown);
    lv_y = 0;
    for ( ; ( (auto5CCD0CCA_ai >= 0 && lv_y <= auto5CCD0CCA_ae) || (auto5CCD0CCA_ai < 0 && lv_y >= auto5CCD0CCA_ae) ) ; lv_y += auto5CCD0CCA_ai ) {
        DialogControlAddItem(lv_pulldown, PlayerGroupSingle(lp_player), StringToText(""));
    }
    DialogControlSelectItem(lv_pulldown, PlayerGroupSingle(lp_player), 1);
    DialogControlHookup(lv_coordinates, c_triggerControlTypePulldown, "YThousandPull");
    lv_pulldown = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, (IntToString(lv_item) + "Y1000"), lv_pulldown);
    lv_y = 0;
    for ( ; ( (auto4D5C5B46_ai >= 0 && lv_y <= auto4D5C5B46_ae) || (auto4D5C5B46_ai < 0 && lv_y >= auto4D5C5B46_ae) ) ; lv_y += auto4D5C5B46_ai ) {
        DialogControlAddItem(lv_pulldown, PlayerGroupSingle(lp_player), StringToText(""));
    }
    DialogControlSelectItem(lv_pulldown, PlayerGroupSingle(lp_player), 1);
    DialogControlHookup(lv_coordinates, c_triggerControlTypePulldown, "YHundredPull");
    lv_pulldown = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, (IntToString(lv_item) + "Y100"), lv_pulldown);
    lv_y = 0;
    for ( ; ( (autoFC11EAB6_ai >= 0 && lv_y <= autoFC11EAB6_ae) || (autoFC11EAB6_ai < 0 && lv_y >= autoFC11EAB6_ae) ) ; lv_y += autoFC11EAB6_ai ) {
        DialogControlAddItem(lv_pulldown, PlayerGroupSingle(lp_player), StringToText(""));
    }
    DialogControlSelectItem(lv_pulldown, PlayerGroupSingle(lp_player), 1);
    DialogControlHookup(lv_coordinates, c_triggerControlTypePulldown, "YTenPull");
    lv_pulldown = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, (IntToString(lv_item) + "Y10"), lv_pulldown);
    lv_y = 0;
    for ( ; ( (auto13CE4949_ai >= 0 && lv_y <= auto13CE4949_ae) || (auto13CE4949_ai < 0 && lv_y >= auto13CE4949_ae) ) ; lv_y += auto13CE4949_ai ) {
        DialogControlAddItem(lv_pulldown, PlayerGroupSingle(lp_player), StringToText(""));
    }
    DialogControlSelectItem(lv_pulldown, PlayerGroupSingle(lp_player), 1);
    DialogControlHookup(lv_coordinates, c_triggerControlTypePulldown, "YSinglePull");
    lv_pulldown = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, (IntToString(lv_item) + "Y1"), lv_pulldown);
    lv_y = 0;
    for ( ; ( (auto35E92B73_ai >= 0 && lv_y <= auto35E92B73_ae) || (auto35E92B73_ai < 0 && lv_y >= auto35E92B73_ae) ) ; lv_y += auto35E92B73_ai ) {
        DialogControlAddItem(lv_pulldown, PlayerGroupSingle(lp_player), StringToText(""));
    }
    DialogControlSelectItem(lv_pulldown, PlayerGroupSingle(lp_player), 1);
    lv_coordinates = c_invalidDialogControlId;
    lv_pulldown = c_invalidDialogControlId;
}

trigger auto_lib90F7C81D_gf_FlashCCButton_Trigger = null;
int auto_lib90F7C81D_gf_FlashCCButton_lp_player;
string auto_lib90F7C81D_gf_FlashCCButton_lp_button_Ability;
fixed auto_lib90F7C81D_gf_FlashCCButton_lp_time;

void lib90F7C81D_gf_FlashCCButton (int lp_player, string lp_button_Ability, fixed lp_time) {
    auto_lib90F7C81D_gf_FlashCCButton_lp_player = lp_player;
    auto_lib90F7C81D_gf_FlashCCButton_lp_button_Ability = lp_button_Ability;
    auto_lib90F7C81D_gf_FlashCCButton_lp_time = lp_time;

    if (auto_lib90F7C81D_gf_FlashCCButton_Trigger == null) {
        auto_lib90F7C81D_gf_FlashCCButton_Trigger = TriggerCreate("auto_lib90F7C81D_gf_FlashCCButton_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_FlashCCButton_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_FlashCCButton_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib90F7C81D_gf_FlashCCButton_lp_player;
    string lp_button_Ability = auto_lib90F7C81D_gf_FlashCCButton_lp_button_Ability;
    fixed lp_time = auto_lib90F7C81D_gf_FlashCCButton_lp_time;

    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = PlayerGroupSingle(lp_player);

    // Implementation
    if ((lp_player == 0)) {
        lv_players = PlayerGroupAll();
    }
    UISetButtonFaceHighlighted(lv_players, lp_button_Ability, true);
    Wait(lp_time, c_timeGame);
    UISetButtonFaceHighlighted(lv_players, lp_button_Ability, false);
    return true;
}

void lib90F7C81D_gf_InitializeUIItems () {
    // Variable Declarations
    int lv_int;
    int lv_index;
    int lv_indexInner;
    int lv_i;
    int lv_hook;
    string lv_instanceIndex;

    // Automatic Variable Declarations
    const int autoEC7D3E07_ae = 12;
    const int autoEC7D3E07_ai = 1;
    const int auto6ECC3C80_ae = 12;
    const int auto6ECC3C80_ai = 1;
    const int auto4767B499_ae = 12;
    const int auto4767B499_ai = 1;
    const int auto7F10BFA9_ae = 12;
    const int auto7F10BFA9_ai = 1;
    const int autoB4785DCB_ae = 12;
    const int autoB4785DCB_ai = 1;
    const int autoF610AA66_ae = 6;
    const int autoF610AA66_ai = 1;
    const int auto3585C348_ae = 7;
    const int auto3585C348_ai = 1;
    const int autoD33D2F01_ae = 3;
    const int autoD33D2F01_ai = 1;
    int auto8CD4AD3E_e;
    int auto8CD4AD3E_i;
    int autoBBD4942E_e;
    int autoBBD4942E_i;
    int auto73FD9C26_ae;
    const int auto73FD9C26_ai = 1;
    int auto7E464EC8_ae;
    const int auto7E464EC8_ai = 1;
    int autoEE4F92FA_ae;
    const int autoEE4F92FA_ai = 1;
    const int autoF45BFE50_ae = 13;
    const int autoF45BFE50_ai = 1;
    int auto74881E6C_ae;
    const int auto74881E6C_ai = 1;
    const int auto4F2B70F6_ae = 4;
    const int auto4F2B70F6_ai = 1;
    const int auto77B2EEF0_ae = 17;
    const int auto77B2EEF0_ai = 1;
    const int auto8EB6C854_ae = 12;
    const int auto8EB6C854_ai = 1;
    const int auto74765ACA_ae = 4;
    const int auto74765ACA_ai = 1;
    const int auto2F3B153C_ae = 3;
    const int auto2F3B153C_ai = 1;
    const int autoE5840DAF_ae = 3;
    const int autoE5840DAF_ai = 1;
    const int autoCC7EE917_ae = 3;
    const int autoCC7EE917_ai = 1;

    // Variable Initialization
    lv_int = 1;
    lv_hook = c_invalidDialogControlId;

    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, false);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ResourceLabel0");
    lib90F7C81D_gv_ammoBar.lv_roundsLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ResourceLabel1");
    lib90F7C81D_gv_ammoBar.lv_magazineLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ReloadLabel");
    lib90F7C81D_gv_ammoBar.lv_reloadSpeedLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/InventoryPanel/ContainerPanel00/Slot14");
    lib90F7C81D_gv_inventory.lv_inventoryButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/InventoryPanel/ContainerPanel00/Slot16");
    lib90F7C81D_gv_inventory.lv_bandolierSlots[0] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/InventoryPanel/ContainerPanel00/Slot17");
    lib90F7C81D_gv_inventory.lv_bandolierSlots[1] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/InventoryPanel/ContainerPanel00/Slot18");
    lib90F7C81D_gv_inventory.lv_bandolierSlots[2] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/InventoryPanel/ContainerPanel00/Slot19");
    lib90F7C81D_gv_inventory.lv_bandolierSlots[3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/InventoryPanel/ContainerPanel00/Slot20");
    lib90F7C81D_gv_inventory.lv_bandolierSlots[4] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/InventoryPanel/ContainerPanel00/Slot21");
    lib90F7C81D_gv_inventory.lv_bandolierSlots[5] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/CameraButton");
    lib90F7C81D_gv_cameraButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_CameraButton, c_playerAny, lib90F7C81D_gv_cameraButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/LearnSkillsContainer");
    lib90F7C81D_gv_lS_Container = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoEC7D3E07_ai >= 0 && lv_index <= autoEC7D3E07_ae) || (autoEC7D3E07_ai < 0 && lv_index >= autoEC7D3E07_ae) ) ; lv_index += autoEC7D3E07_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/LearnSkillsContainer/LearnSkillsLabel" + IntToString(lv_index)));
        lib90F7C81D_gv_learnSkillsLabel[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/LearnSkillsContainer/LearnSkillsButton");
    lib90F7C81D_gv_learnSkillsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/SkillUpgradesContainer");
    lib90F7C81D_gv_sU_Container = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto6ECC3C80_ai >= 0 && lv_index <= auto6ECC3C80_ae) || (auto6ECC3C80_ai < 0 && lv_index >= auto6ECC3C80_ae) ) ; lv_index += auto6ECC3C80_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/SkillUpgradesContainer/SkillUpgradesLabel" + IntToString(lv_index)));
        lib90F7C81D_gv_skillUpgradesLabel[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/SkillUpgradesContainer/SkillUpgradesButton");
    lib90F7C81D_gv_skillUpgradesButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DeadHeroContainer");
    lib90F7C81D_gv_dC_Container = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/DeadHeroContainer/DeadHeroButton");
    lib90F7C81D_gv_pingDeadHeros = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_PingDeadHerosButton, c_playerAny, lib90F7C81D_gv_pingDeadHeros, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/StatusContainer");
    lib90F7C81D_gv_sD_Container = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/DeadHeroContainer/DeadHeroSkillsLabel");
    lib90F7C81D_gv_deadHeroLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/HUDButton");
    lib90F7C81D_gv_sTATS.lv_hUDButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HUD");
    lib90F7C81D_gv_sTATS.lv_hUD = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto4767B499_ai >= 0 && lv_index <= auto4767B499_ae) || (auto4767B499_ai < 0 && lv_index >= auto4767B499_ae) ) ; lv_index += auto4767B499_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "Image"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Image[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Image[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("RankIconBorder"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Border[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "MOSLabel"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_MOS_Label[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player/PlayerName/PlayerNameLabel"));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false)), PlayerGroupAll());
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "ReviveTime"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Timer[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeUnitStatus, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "UnitStatusBar"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Status[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "Status"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_MOSStatus[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/PMCKillsLabel"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_PMC_Label[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "HitsLabel"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Hits[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "DeathsLabel"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Deaths[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "RevivePointsLabel"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Revive_Points[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Player" + IntToString(lv_index) + "MovementSpeedLabel"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Movement_Speed[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/HUD/Player" + IntToString(lv_index) + "Container/Mag" + IntToString(lv_index) + "/Player" + IntToString(lv_index) + "MagazineLabel"));
        lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Magazines[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypeCommandPanel, "UIContainer/ConsoleUIContainer/CommandPanel");
    lib90F7C81D_gv_commandCard.lv_commandCardPanel = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto7F10BFA9_ai >= 0 && lv_index <= auto7F10BFA9_ae) || (auto7F10BFA9_ai < 0 && lv_index >= auto7F10BFA9_ae) ) ; lv_index += auto7F10BFA9_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/SelfCastConstraintFrame" + IntToString(lv_index) + "/SelfCastFrame"));
        lib90F7C81D_gv_commandCard.lv_selfCastFrame[lv_index] = DialogControlLastCreated();
        lib90F7C81D_gf_HookupCoordinateReporter(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lv_index], lv_index);
        DialogControlHookupStandard(c_triggerControlTypeCommandPanel, ("UIContainer/FullscreenUpperContainer/SelfCastConstraintFrame" + IntToString(lv_index) + "/SelfCastFrame/CommandButtons"));
        lib90F7C81D_gv_commandCard.lv_selfCastCC[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/PROButtonContainer/PROButton");
    lib90F7C81D_gv_commandCard.lv_aCH = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneHero/IndexLabel");
    lib90F7C81D_gv_commandCard.lv_uiIndex = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneUnit/UnitIndexLabel");
    lib90F7C81D_gv_commandCard.lv_unitIndexLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneHero/OwnerLabel");
    lib90F7C81D_gv_inventory.lv_inventoryType = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/SDMenu");
    lib90F7C81D_gv_sDFrame = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoB4785DCB_ai >= 0 && lv_index <= autoB4785DCB_ae) || (autoB4785DCB_ai < 0 && lv_index >= autoB4785DCB_ae) ) ; lv_index += autoB4785DCB_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_index) + "Slot"));
        lib90F7C81D_gv_sDPlayerFrame[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_index) + "Slot/Player" + IntToString(lv_index) + "Image"));
        lib90F7C81D_gv_sDPlayerImageFrame[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lib90F7C81D_gv_sDPlayerImageFrame[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("RankIconBorder"));
        lib90F7C81D_gv_sDPlayerFrameBorder[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_index) + "Slot/Ping" + IntToString(lv_index)));
        lib90F7C81D_gv_sDPingPlayerButton[lv_index] = DialogControlLastCreated();
        TriggerAddEventDialogControl(lib90F7C81D_gt_SDPingPlayer, c_playerAny, lib90F7C81D_gv_sDPingPlayerButton[lv_index], c_triggerControlEventTypeClick);
        DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_index) + "Slot/Player" + IntToString(lv_index) + "ReviveTime"));
        lib90F7C81D_gv_sDTimer[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeUnitStatus, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_index) + "Slot/Player" + IntToString(lv_index) + "UnitStatusBar"));
        lib90F7C81D_gv_sDPlayerUnitStatusFrame[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_index) + "Slot/Player" + IntToString(lv_index) + "NameLabel"));
        lib90F7C81D_gv_sDPlayerNameFrame[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sDPlayerNameFrame[lv_int], TextWithColor(PlayerName(lv_int), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_int, false))), PlayerGroupAll());
        lib90F7C81D_gv_inventory.lv_playerInventory[lv_index] = lv_index;
        lv_indexInner = 1;
        for ( ; ( (autoF610AA66_ai >= 0 && lv_indexInner <= autoF610AA66_ae) || (autoF610AA66_ai < 0 && lv_indexInner >= autoF610AA66_ae) ) ; lv_indexInner += autoF610AA66_ai ) {
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_index) + "Slot/Behavior" + IntToString(lv_indexInner)));
            lib90F7C81D_gv_sDPlayerAilmentImages[lv_indexInner][lv_index] = DialogControlLastCreated();
        }
        lv_indexInner = 0;
        for ( ; ( (auto3585C348_ai >= 0 && lv_indexInner <= auto3585C348_ae) || (auto3585C348_ai < 0 && lv_indexInner >= auto3585C348_ae) ) ; lv_indexInner += auto3585C348_ai ) {
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_index) + "Slot/Inventory" + IntToString(lv_indexInner)));
            lib90F7C81D_gv_sDPlayerInventorySlot[lv_indexInner][lv_index] = DialogControlLastCreated();
        }
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/ChatBarAnchorFrame");
    lib90F7C81D_gv_chatBarAnchor = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/BGMain");
    lib90F7C81D_gv_backgroundMain = DialogControlLastCreated();
    lib90F7C81D_gf_CreateVisorTextDialog();
    lib90F7C81D_gf_MoveObjectivePanel(0, 85, c_anchorTopLeft);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/InfestationLevel");
    lib90F7C81D_gv_infestationPanel = DialogControlLastCreated();
    DialogControlHookup(lib90F7C81D_gv_infestationPanel, c_triggerControlTypeProgressBar, "InfestationProgressBar");
    lib90F7C81D_gv_infestationLevel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(lib90F7C81D_gv_infestationLevel, 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(lib90F7C81D_gv_infestationPanel, 250.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(lib90F7C81D_gv_infestationPanel, 0.0, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/InfestationLevel/Mutations");
    lib90F7C81D_gv_mutationPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/InfestationLevel/Mutations/Icon/Label");
    lib90F7C81D_gv_mutationLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DebugDisplay");
    lib90F7C81D_gv_messageFrame.lv_debug = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObjectiveDisplay");
    lib90F7C81D_gv_messageFrame.lv_objective = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DirectiveDisplay");
    lib90F7C81D_gv_messageFrame.lv_directive = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/FireTeamFrame/AlphaButton");
    lib90F7C81D_gv_fireteam.lv_alphaButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_FireteamAlpha, c_playerAny, lib90F7C81D_gv_fireteam.lv_alphaButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/FireTeamFrame/DeltaButton");
    lib90F7C81D_gv_fireteam.lv_deltaButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_FireteamDelta, c_playerAny, lib90F7C81D_gv_fireteam.lv_deltaButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/FireTeamFrame/EchoButton");
    lib90F7C81D_gv_fireteam.lv_echoButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_FireteamEcho, c_playerAny, lib90F7C81D_gv_fireteam.lv_echoButton, c_triggerControlEventTypeClick);
    lv_index = 0;
    for ( ; ( (autoD33D2F01_ai >= 0 && lv_index <= autoD33D2F01_ae) || (autoD33D2F01_ai < 0 && lv_index >= autoD33D2F01_ae) ) ; lv_index += autoD33D2F01_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/FireTeamFrame/AlphaSlotFrame" + IntToString(lv_index) + "/NameLabel"));
        lib90F7C81D_gv_fireteam.lv_alphaSlot[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/FireTeamFrame/DeltaSlotFrame" + IntToString(lv_index) + "/NameLabel"));
        lib90F7C81D_gv_fireteam.lv_deltaSlot[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/FireTeamFrame/EchoSlotFrame" + IntToString(lv_index) + "/NameLabel"));
        lib90F7C81D_gv_fireteam.lv_echoSlot[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypeEditBox, "UIContainer/FullScreenUpperContainer/TextBoxContainer/TextBox");
    lib90F7C81D_gv_editBox = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_ClanTags, c_playerAny, lib90F7C81D_gv_editBox, c_triggerControlEventTypeTextChanged);
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/FullscreenUpperContainer/GameClockFrame/WeatherFrame/Icon");
    lib90F7C81D_gv_weatherEvent = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "$WeatherFrame");
    lib90F7C81D_gv_weather.lv_weatherFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullScreenUpperContainer/VoteKickFrame");
    lib90F7C81D_gv_voteKick.lv_voteKickFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullScreenUpperContainer/VKButtonContainer/VKButton");
    lib90F7C81D_gv_voteKick.lv_vKB = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullScreenUpperContainer/VoteMenuFrame");
    lib90F7C81D_gv_voteKick.lv_voteMenuFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeEditBox, "UIContainer/FullScreenUpperContainer/TextBoxContainer/VoteTextBox");
    lib90F7C81D_gv_voteKick.lv_editBox = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_KickPlayerButtons, c_playerAny, lib90F7C81D_gv_voteKick.lv_editBox, c_triggerControlEventTypeTextChanged);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/VoteMenuFrame/Title");
    lib90F7C81D_gv_voteKick.lv_voteMenuTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(lib90F7C81D_gv_voteKick.lv_voteMenuTitle, false, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/VoteMenuFrame/ButtonYes");
    lib90F7C81D_gv_voteKick.lv_yesButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_VoteMenuYesNo, c_playerAny, lib90F7C81D_gv_voteKick.lv_yesButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/VoteMenuFrame/ButtonYes/CountLabel");
    lib90F7C81D_gv_voteKick.lv_yesLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/VoteMenuFrame/ButtonNo");
    lib90F7C81D_gv_voteKick.lv_noButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_VoteMenuYesNo, c_playerAny, lib90F7C81D_gv_voteKick.lv_noButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/VoteMenuFrame/ButtonNo/CountLabel");
    lib90F7C81D_gv_voteKick.lv_noLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/VoteMenuFrame/CountdownTimer");
    lib90F7C81D_gv_voteKick.lv_voteTimer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/BossRushWaveDisplayFrame");
    lib90F7C81D_gv_bossRushWaveDisplay = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/BossRushWaveDisplayFrame/WaveText");
    lib90F7C81D_gv_bossRushWaveLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/Tips/TipDragFrame");
    lib90F7C81D_gv_tipPanel.lv_tipDragPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/Tips/TipDragFrame/TipsPanel");
    lib90F7C81D_gv_tipPanel.lv_tipPanel = DialogControlLastCreated();
    DialogControlHookup(lib90F7C81D_gv_tipPanel.lv_tipPanel, c_triggerControlTypeButton, "PreviousButton");
    lib90F7C81D_gv_tipPanel.lv_previousButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_TipPanelButtons, c_playerAny, lib90F7C81D_gv_tipPanel.lv_previousButton, c_triggerControlEventTypeClick);
    DialogControlHookup(lib90F7C81D_gv_tipPanel.lv_tipPanel, c_triggerControlTypeButton, "NextButton");
    lib90F7C81D_gv_tipPanel.lv_nextButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_TipPanelButtons, c_playerAny, lib90F7C81D_gv_tipPanel.lv_nextButton, c_triggerControlEventTypeClick);
    DialogControlHookup(lib90F7C81D_gv_tipPanel.lv_tipPanel, c_triggerControlTypeLabel, "TipCurrent");
    lib90F7C81D_gv_tipPanel.lv_tipCurrent = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeEditBox, "UIContainer/FullScreenUpperContainer/TextBoxContainer/TipTextBox");
    lib90F7C81D_gv_tipPanel.lv_tipEditBox = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_TipPanelLocation, c_playerAny, lib90F7C81D_gv_tipPanel.lv_tipEditBox, c_triggerControlEventTypeTextChanged);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/BSOD");
    lib90F7C81D_gv_bsod = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00");
    lib90F7C81D_gv_achievementPanel.lv_skinsPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/CamoContainer/Camos/Label");
    lib90F7C81D_gv_achievementPanel.lv_camoLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/DecalContainer/Decals/Label");
    lib90F7C81D_gv_achievementPanel.lv_decalLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePulldown, "UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/CamoContainer/Camos/ReadablePulldown");
    lib90F7C81D_gv_achievementPanel.lv_pulldownCamo = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_CamoTextureChange, c_playerAny, lib90F7C81D_gv_achievementPanel.lv_pulldownCamo, c_triggerControlEventTypeSelectionChanged);
    DialogControlHookupStandard(c_triggerControlTypePulldown, "UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/DecalContainer/Decals/ReadablePulldown");
    lib90F7C81D_gv_achievementPanel.lv_pulldownDecal = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_DecalTextureChange, c_playerAny, lib90F7C81D_gv_achievementPanel.lv_pulldownDecal, c_triggerControlEventTypeSelectionChanged);
    lv_index = 0;
    auto8CD4AD3E_e = UserDataInstanceCount("Camos");
    for (auto8CD4AD3E_i = 1; auto8CD4AD3E_i <= auto8CD4AD3E_e; auto8CD4AD3E_i += 1) {
        lv_instanceIndex = UserDataInstance("Camos", auto8CD4AD3E_i);
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/CamoContainer/Camos/ScrollableList/ContainerFrame/Button" + IntToString(lv_index)));
        lib90F7C81D_gv_achievementPanel.lv_camoList[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/CamoContainer/Camos/ScrollableList/ContainerFrame/Button" + IntToString(lv_index) + "/Label"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(UserDataGetString("Camos", lv_instanceIndex, "Camo Name", 1)), PlayerGroupAll());
        lv_index += 1;
        DialogControlAddItem(lib90F7C81D_gv_achievementPanel.lv_pulldownCamo, PlayerGroupAll(), IntToText(lv_index));
    }
    lv_index = 0;
    autoBBD4942E_e = UserDataInstanceCount("Decals");
    for (autoBBD4942E_i = 1; autoBBD4942E_i <= autoBBD4942E_e; autoBBD4942E_i += 1) {
        lv_instanceIndex = UserDataInstance("Decals", autoBBD4942E_i);
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/DecalContainer/Decals/ScrollableList/ContainerFrame/Button" + IntToString(lv_index)));
        lib90F7C81D_gv_achievementPanel.lv_decalList[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/DecalContainer/Decals/ScrollableList/ContainerFrame/Button" + IntToString(lv_index) + "/Label"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(UserDataGetString("Decals", lv_instanceIndex, "Decal Name", 1)), PlayerGroupAll());
        lv_index += 1;
        DialogControlAddItem(lib90F7C81D_gv_achievementPanel.lv_pulldownDecal, PlayerGroupAll(), IntToText(lv_index));
    }
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/UIicon");
    lib90F7C81D_gv_uIicon = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/FlashFrameContainer");
    lib90F7C81D_gv_achievementBadge.lv_flashFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/FullscreenUpperContainer/FlashFrameContainer/AchievementBadge/IconImage");
    lib90F7C81D_gv_achievementBadge.lv_iconImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/FlashFrameContainer/AchievementBadge/NameLabel");
    lib90F7C81D_gv_achievementBadge.lv_nameLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/FlashFrameContainer/AchievementBadge/DescriptionLabel");
    lib90F7C81D_gv_achievementBadge.lv_descriptionLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/FlashFrameContainer/AchievementBadge/EarnedLabel");
    lib90F7C81D_gv_achievementBadge.lv_earnedLabel = DialogControlLastCreated();
    auto73FD9C26_ae = UserDataInstanceCount("AchievementModes");
    lv_index = 1;
    for ( ; ( (auto73FD9C26_ai >= 0 && lv_index <= auto73FD9C26_ae) || (auto73FD9C26_ai < 0 && lv_index >= auto73FD9C26_ae) ) ; lv_index += auto73FD9C26_ai ) {
        if ((lv_index == 4)) {
            continue;
        }
        else {
            auto7E464EC8_ae = UserDataGetInt("AchievementModes", UserDataInstance("AchievementModes", lv_index), "Max Achievements", 1);
            lv_indexInner = 1;
            for ( ; ( (auto7E464EC8_ai >= 0 && lv_indexInner <= auto7E464EC8_ae) || (auto7E464EC8_ai < 0 && lv_indexInner >= auto7E464EC8_ae) ) ; lv_indexInner += auto7E464EC8_ai ) {
                DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel01/ModeAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/ModeAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_indexInner - 1))));
                lib90F7C81D_gv_achievementPanel.lv_modeAchievements[(lv_index - 1)][(lv_indexInner - 1)] = DialogControlLastCreated();
                DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel01/ModeAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/ModeAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_indexInner - 1)) + "/IconImage"));
                lib90F7C81D_gv_achievementPanel.lv_modeAchievementsIcon[(lv_index - 1)][(lv_indexInner - 1)] = DialogControlLastCreated();
                if ((UserDataGetImagePath("AchievementModes", UserDataInstance("AchievementModes", lv_index), "Icon", lv_indexInner) != null)) {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("AchievementModes", UserDataInstance("AchievementModes", lv_index), "Icon", lv_indexInner), PlayerGroupAll());
                }
                DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel01/ModeAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/ModeAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_indexInner - 1)) + "/NameLabel"));
                lib90F7C81D_gv_achievementPanel.lv_modeAchievementsName[(lv_index - 1)][(lv_indexInner - 1)] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("AchievementModes", UserDataInstance("AchievementModes", lv_index), "Name", lv_indexInner), PlayerGroupAll());
                DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel01/ModeAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/ModeAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_indexInner - 1)) + "/DescriptionLabel"));
                lib90F7C81D_gv_achievementPanel.lv_modeAchievementsDescription[(lv_index - 1)][(lv_indexInner - 1)] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("AchievementModes", UserDataInstance("AchievementModes", lv_index), "Description", lv_indexInner), PlayerGroupAll());
                DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel01/ModeAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/ModeAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_indexInner - 1)) + "/PointsLabel/CurrentLabel"));
                lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[(lv_index - 1)][(lv_indexInner - 1)] = DialogControlLastCreated();
                DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel01/ModeAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/ModeAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_indexInner - 1)) + "/PointsLabel/MaxLabel"));
                lib90F7C81D_gv_achievementPanel.lv_modeAchievementsMaxP[(lv_index - 1)][(lv_indexInner - 1)] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("AchievementModes", UserDataInstance("AchievementModes", lv_index), "Progress Max", lv_indexInner), PlayerGroupAll());
                DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel01/ModeAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/ModeAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_indexInner - 1)) + "/EarnedLabel"));
                lib90F7C81D_gv_achievementPanel.lv_modeAchievementsEarned[(lv_index - 1)][(lv_indexInner - 1)] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("AchievementModes", UserDataInstance("AchievementModes", lv_index), "Unlock", lv_indexInner), PlayerGroupAll());
            }
        }
    }
    autoEE4F92FA_ae = UserDataInstanceCount("MOSSetup");
    lv_index = 1;
    for ( ; ( (autoEE4F92FA_ai >= 0 && lv_index <= autoEE4F92FA_ae) || (autoEE4F92FA_ai < 0 && lv_index >= autoEE4F92FA_ae) ) ; lv_index += autoEE4F92FA_ai ) {
        lv_indexInner = 0;
        for ( ; ( (autoF45BFE50_ai >= 0 && lv_indexInner <= autoF45BFE50_ae) || (autoF45BFE50_ai < 0 && lv_indexInner >= autoF45BFE50_ae) ) ; lv_indexInner += autoF45BFE50_ai ) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel02/MOSAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/MOSAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString(lv_indexInner)));
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(lv_index - 1)][lv_indexInner] = DialogControlLastCreated();
        }
    }
    auto74881E6C_ae = UserDataInstanceCount("AchievementMos");
    lv_index = 1;
    for ( ; ( (auto74881E6C_ai >= 0 && lv_index <= auto74881E6C_ae) || (auto74881E6C_ai < 0 && lv_index >= auto74881E6C_ae) ) ; lv_index += auto74881E6C_ai ) {
        lv_i = 1;
        for ( ; ( (auto4F2B70F6_ai >= 0 && lv_i <= auto4F2B70F6_ae) || (auto4F2B70F6_ai < 0 && lv_i >= auto4F2B70F6_ae) ) ; lv_i += auto4F2B70F6_ai ) {
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel02/MOSAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/MOSAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_i - 1)) + "/IconImage"));
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsIcon[(lv_index - 1)][(lv_i - 1)] = DialogControlLastCreated();
            if ((UserDataGetImagePath("AchievementMos", UserDataInstance("AchievementMos", lv_index), "Icon", lv_i) != null)) {
                libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsIcon[(lv_index - 1)][(lv_i - 1)], UserDataGetImagePath("AchievementMos", UserDataInstance("AchievementMos", lv_index), "Icon", lv_i), PlayerGroupAll());
            }
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel02/MOSAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/MOSAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_i - 1)) + "/NameLabel"));
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsName[(lv_index - 1)][(lv_i - 1)] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("AchievementMos", UserDataInstance("AchievementMos", lv_index), "Name", lv_i), PlayerGroupAll());
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel02/MOSAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/MOSAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_i - 1)) + "/DescriptionLabel"));
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsDescription[(lv_index - 1)][(lv_i - 1)] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("AchievementMos", UserDataInstance("AchievementMos", lv_index), "Description", lv_i), PlayerGroupAll());
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel02/MOSAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/MOSAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_i - 1)) + "/PointsLabel/CurrentLabel"));
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[(lv_index - 1)][(lv_i - 1)] = DialogControlLastCreated();
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel02/MOSAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/MOSAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_i - 1)) + "/PointsLabel/MaxLabel"));
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsMaxP[(lv_index - 1)][(lv_i - 1)] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("AchievementMos", UserDataInstance("AchievementMos", lv_index), "Progress Max", lv_i), PlayerGroupAll());
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel02/MOSAchievementsContainer/PanelsContainer/Panel" + IntToString((lv_index - 1)) + "/MOSAchievementList" + IntToString((lv_index - 1)) + "/ContainerFrame/Achievement" + IntToString((lv_i - 1)) + "/EarnedLabel"));
            lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsEarned[(lv_index - 1)][(lv_i - 1)] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("AchievementMos", UserDataInstance("AchievementMos", lv_index), "Unlock", lv_i), PlayerGroupAll());
        }
    }
    lv_index = 0;
    for ( ; ( (auto77B2EEF0_ai >= 0 && lv_index <= auto77B2EEF0_ae) || (auto77B2EEF0_ai < 0 && lv_index >= auto77B2EEF0_ae) ) ; lv_index += auto77B2EEF0_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeImage, ("$MedalsContainer/Medal" + IntToString(lv_index)));
        lib90F7C81D_gv_achievementPanel.lv_medal[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/PlayerDeathFrame");
    lib90F7C81D_gv_NewPlayerDeath = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeEditBox, "UIContainer/FullScreenUpperContainer/TextBoxContainer/UnitTagTextBox");
    lib90F7C81D_gv_heroPanel.lv_editBox = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_UnitTagListener, c_playerAny, lib90F7C81D_gv_heroPanel.lv_editBox, c_triggerControlEventTypeTextChanged);
    lv_index = 1;
    for ( ; ( (auto8EB6C854_ai >= 0 && lv_index <= auto8EB6C854_ae) || (auto8EB6C854_ai < 0 && lv_index >= auto8EB6C854_ae) ) ; lv_index += auto8EB6C854_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneHero/SpeedCurrent" + IntToString(lv_index)));
        lib90F7C81D_gv_heroPanel.lv_speedCurrent[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneHero/UnitTag" + IntToString(lv_index)));
        lib90F7C81D_gv_heroPanel.lv_unitTags[lv_index] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("$FrameRateContainer/PlayerFrameRateLabel" + IntToString(lv_index)));
        lib90F7C81D_gv_fPS.lv_framerateLabel[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "$GameUI");
    lib90F7C81D_gv_gameplay.lv_gameUI = DialogControlLastCreated();
    lv_index = 0;
    for ( ; ( (auto74765ACA_ai >= 0 && lv_index <= auto74765ACA_ae) || (auto74765ACA_ai < 0 && lv_index >= auto74765ACA_ae) ) ; lv_index += auto74765ACA_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePulldown, ("$GameplayOption" + IntToString(lv_index)));
        lib90F7C81D_gv_gameplay.lv_option[lv_index] = DialogControlLastCreated();
        TriggerAddEventDialogControl(lib90F7C81D_gt_GameplayOptions, c_playerAny, lib90F7C81D_gv_gameplay.lv_option[lv_index], c_triggerControlEventTypeSelectionChanged);
        if ((lv_index != 2)) {
            DialogControlAddItem(lib90F7C81D_gv_gameplay.lv_option[lv_index], PlayerGroupAll(), StringExternal("Param/Value/lib_90F7C81D_B40CE6D6"));
            DialogControlAddItem(lib90F7C81D_gv_gameplay.lv_option[lv_index], PlayerGroupAll(), StringExternal("Param/Value/lib_90F7C81D_C2F89756"));
        }
        else {
            DialogControlAddItem(lib90F7C81D_gv_gameplay.lv_option[lv_index], PlayerGroupAll(), StringExternal("Param/Value/lib_90F7C81D_A767D5B3"));
            DialogControlAddItem(lib90F7C81D_gv_gameplay.lv_option[lv_index], PlayerGroupAll(), StringExternal("Param/Value/lib_90F7C81D_F5307722"));
        }
        DialogControlSelectItem(lib90F7C81D_gv_gameplay.lv_option[lv_index], PlayerGroupAll(), 1);
    }
    DialogControlHookupStandard(c_triggerControlTypeProgressBar, "$PlasmaShieldIndicator");
    lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay = DialogControlLastCreated();
    libNtve_gf_SetDialogItemMinimumValue(lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay, 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay, 1200.0, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeCutscene, "$StasisWebCutscene");
    lib90F7C81D_gv_cutscene.lv_stasisWeb = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeEditBox, "$FrameRateEditBox");
    lib90F7C81D_gv_fPS.lv_editBox = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_GetFPS, c_playerAny, lib90F7C81D_gv_fPS.lv_editBox, c_triggerControlEventTypeTextChanged);
    DialogControlHookupStandard(c_triggerControlTypeButton, "$MagazineButton");
    lib90F7C81D_gv_fPS.lv_fPSToggled = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_UpdateFPS, c_playerAny, lib90F7C81D_gv_fPS.lv_fPSToggled, c_triggerControlEventTypeClick);
    lv_i = 0;
    for ( ; ( (auto2F3B153C_ai >= 0 && lv_i <= auto2F3B153C_ae) || (auto2F3B153C_ai < 0 && lv_i >= auto2F3B153C_ae) ) ; lv_i += auto2F3B153C_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeButton, ("$TargetInfoFrame" + IntToString(lv_i) + "/UnitSelectionButton"));
        lib90F7C81D_gv_sFAAT.lv_lNButtons[lv_i] = DialogControlLastCreated();
        TriggerAddEventDialogControl(lib90F7C81D_gt_LNSubgroupPanel, c_playerAny, lib90F7C81D_gv_sFAAT.lv_lNButtons[lv_i], c_triggerControlEventTypeClick);
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "$MinimapPanel/Minimap");
    lib90F7C81D_gv_minimap = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, "$GraphFrame");
    lib90F7C81D_gv_graph.lv_frame = DialogControlLastCreated();
    lv_index = 0;
    for ( ; ( (autoE5840DAF_ai >= 0 && lv_index <= autoE5840DAF_ae) || (autoE5840DAF_ai < 0 && lv_index >= autoE5840DAF_ae) ) ; lv_index += autoE5840DAF_ai ) {
        DialogControlAddDataPoint(lib90F7C81D_gv_graph.lv_frame, PlayerGroupAll(), GameGetMissionTime(), 0.0, (lv_i + 1));
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "$Spinner");
    lib90F7C81D_gv_spinner.lv_frame = DialogControlLastCreated();
    lv_i = 0;
    for ( ; ( (autoCC7EE917_ai >= 0 && lv_i <= autoCC7EE917_ae) || (autoCC7EE917_ai < 0 && lv_i >= autoCC7EE917_ae) ) ; lv_i += autoCC7EE917_ai ) {
        DialogControlHookup(lib90F7C81D_gv_spinner.lv_frame, c_triggerControlTypeLabel, "Label" + IntToString(lv_i));
        lib90F7C81D_gv_spinner.lv_label[lv_i] = DialogControlLastCreated();
    }
    lib90F7C81D_gf_SetSpinnerMinimum(1, PlayerGroupAll());
    lib90F7C81D_gf_SetSpinnerMaximum(3, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeCommandPanel, "$InventoryHotkeys");
    lib90F7C81D_gv_inventory.lv_hotkey_panel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeEditBox, "$InvEB");
    lib90F7C81D_gv_inventory.lv_item_eb = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_InventoryHotkeyUsed, c_playerAny, lib90F7C81D_gv_inventory.lv_item_eb, c_triggerControlEventTypeTextChanged);
}

order lib90F7C81D_gf_OrderConstructor (int lp_player, int lp_type, unit lp_item, string lp_hotkey) {
    // Variable Declarations
    bool lv_hasItem;
    order lv_order;
    string lv_inventory_link;

    // Automatic Variable Declarations
    int autoB9ADA2FB_val;

    // Variable Initialization
    lv_hasItem = (lp_item != null);

    // Implementation
    lv_inventory_link = lib90F7C81D_gf_CAbilInventoryType(lp_player);
    if ((lv_hasItem == true)) {
        autoB9ADA2FB_val = lp_type;
        if (autoB9ADA2FB_val == lib90F7C81D_ge_OrderType_Instant) {
            lv_order = Order(AbilityCommand(lv_inventory_link, 3));
        }
        else if (autoB9ADA2FB_val == lib90F7C81D_ge_OrderType_Target) {
            lv_order = Order(AbilityCommand(lv_inventory_link, 4));
        }
        else if (autoB9ADA2FB_val == lib90F7C81D_ge_OrderType_On) {
            lv_order = Order(AbilityCommand(lv_inventory_link, 8));
        }
        else if (autoB9ADA2FB_val == lib90F7C81D_ge_OrderType_Off) {
            lv_order = Order(AbilityCommand(lv_inventory_link, 7));
        }
        else {
        }
        OrderSetTargetItem(lv_order, lp_item);
        if ((lp_type == lib90F7C81D_ge_OrderType_Target) && (lp_hotkey != "Slot")) {
            if (((UnitGetType(lp_item) == "FirstAidKit") || (UnitGetType(lp_item) == "AdvancedFirstAidKit") || (UnitGetType(lp_item) == "AntiVeninShot") || (UnitGetType(lp_item) == "AdvancedAntiVeninShot") || (UnitGetType(lp_item) == "QuikClot") || (UnitGetType(lp_item) == "AdvancedQuikClot") || (UnitGetType(lp_item) == "EnergyCell") || (UnitGetType(lp_item) == "SuperiorEnergyCell") || (UnitGetType(lp_item) == "AimAssistant") || (UnitGetType(lp_item) == "KineticIntegrator"))) {
                OrderSetTargetUnit(lv_order, lib90F7C81D_gv_playerHeroes[lp_player]);
            }
            else {
                lv_order = null;
            }
        }
    }
    return lv_order;
}

string lib90F7C81D_gf_CAbilInventoryType (int lp_player) {
    // Variable Declarations
    string lv_cAbilInventory;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cAbilInventory = "HeroInventoryRifleNew";

    // Implementation
    if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "AutomaticRifleman")) {
        lv_cAbilInventory = "HeroInventoryMGNew";
    }
    else if (((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "SFAAT") || (UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "CombatEngineer"))) {
        lv_cAbilInventory = "HeroInventoryShotgunNew";
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "CavalryScout")) {
        lv_cAbilInventory = "HeroInventoryCS";
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "Flamethrower")) {
        lv_cAbilInventory = "HeroInventoryFlameNew";
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "SquadDesignatedMarksman")) {
        lv_cAbilInventory = "HeroInventorySDMNew";
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "Cyborg")) {
        lv_cAbilInventory = "HeroInventoryMinigunNew";
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "GhostMOS")) {
        lv_cAbilInventory = "HeroInventoryPlasmaNew";
    }
    return lv_cAbilInventory;
}

int lib90F7C81D_gf_UnitTagRecycle (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGetTag(lp_u) & 0x0003ffff;
}

int lib90F7C81D_gf_UnitTagIndex (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetTag(lp_u) >> 18) & 0x00003fff;
}

string lib90F7C81D_gf_GetUnitTag (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    return IntToString(lib90F7C81D_gf_UnitTagIndex(lp_u)) + "#" + IntToString(lib90F7C81D_gf_UnitTagRecycle(lp_u));
}

void lib90F7C81D_gf_InitializeMovieFrame (string lp_path, structref<lib90F7C81D_gs_Movie_Player> lp_dialogItem) {
    // Automatic Variable Declarations
    // Implementation
    lp_dialogItem.lv_movie_Frame = c_invalidDialogControlId;
    lp_dialogItem.lv_movie_Player = c_invalidDialogControlId;
    DialogControlHookupStandard(c_triggerControlTypePanel, lp_path);
    lp_dialogItem.lv_movie_Frame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "ScreenContainer/MoviePlayer");
    lp_dialogItem.lv_movie_Player = DialogControlLastCreated();
}

void lib90F7C81D_gf_ShowHideMovieFrame (bool lp_showHide, playergroup lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(lib90F7C81D_gv_movie_Player.lv_movie_Frame, lp_player, "Visible");
    }
    else {
        DialogControlSendAnimationEvent(lib90F7C81D_gv_movie_Player.lv_movie_Frame, lp_player, "Hidden");
    }
}

void lib90F7C81D_gf_MovieSettings (string lp_movieFile, bool lp_loop, bool lp_muteAudio, bool lp_allowPause, bool lp_fullscreen, playergroup lp_player) {
    // Variable Declarations
    string lv_file;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_file = (lp_movieFile);

    // Implementation
    DialogControlSetAnimationState(lib90F7C81D_gv_movie_Player.lv_movie_Player, lp_player, "Movie", "Reset");
    DialogControlSetAnimationState(lib90F7C81D_gv_movie_Player.lv_movie_Player, lp_player, "Loop", libNtve_gf_ConvertBooleanToString(lp_loop));
    DialogControlSetAnimationState(lib90F7C81D_gv_movie_Player.lv_movie_Player, lp_player, "PauseAllowed", libNtve_gf_ConvertBooleanToString(lp_allowPause));
    DialogControlSetAnimationState(lib90F7C81D_gv_movie_Player.lv_movie_Player, lp_player, "MuteAudio", libNtve_gf_ConvertBooleanToString(lp_muteAudio));
    DialogControlSetAnimationState(lib90F7C81D_gv_movie_Player.lv_movie_Player, lp_player, "Fullscreen", libNtve_gf_ConvertBooleanToString(lp_fullscreen));
    DialogControlHookup(lib90F7C81D_gv_movie_Player.lv_movie_Player, c_triggerControlTypeLabel, "File");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(lv_file), lp_player);
    DialogControlDestroy(DialogControlLastCreated());
    DialogControlSetAnimationState(lib90F7C81D_gv_movie_Player.lv_movie_Player, lp_player, "Movie", "Play");
    lib90F7C81D_gv_movie_Player.lv_movie_Playing = true;
}

void lib90F7C81D_gf_StopMovie (playergroup lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib90F7C81D_gv_movie_Player.lv_movie_Playing = false;
    DialogControlSetAnimationState(lib90F7C81D_gv_movie_Player.lv_movie_Player, lp_player, "Movie", "Stop");
}

void lib90F7C81D_gf_PlayMovie (string lp_movieFile, bool lp_loop, bool lp_fullscreen, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        if ((lib90F7C81D_gv_movie_Player.lv_movie_Player == c_invalidDialogControlId)) {
            lib90F7C81D_gf_InitializeMovieFrame("$Static_Movie", lib90F7C81D_gv_movie_Player);
        }
        if ((lib90F7C81D_gf_MovieIsPlaying() == false)) {
            lib90F7C81D_gf_ShowHideMovieFrame(true, PlayerGroupAll());
            lib90F7C81D_gf_MovieSettings(lp_movieFile, lp_loop, false, false, lp_fullscreen, PlayerGroupAll());
        }
    }
    else {
        if ((lib90F7C81D_gf_MovieIsPlaying() == true)) {
            lib90F7C81D_gf_ShowHideMovieFrame(false, PlayerGroupAll());
            lib90F7C81D_gf_StopMovie(PlayerGroupAll());
        }
    }
}

bool lib90F7C81D_gf_MovieIsPlaying () {
    // Automatic Variable Declarations
    // Implementation
    return lib90F7C81D_gv_movie_Player.lv_movie_Playing;
}

void lib90F7C81D_gf_MinimapOffline (bool lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state == true)) {
        if ((lib90F7C81D_gv_movie_Player.lv_movie_Player == c_invalidDialogControlId)) {
            lib90F7C81D_gf_InitializeMovieFrame("$Static_Movie", lib90F7C81D_gv_movie_Player);
        }
        if ((lib90F7C81D_gf_MovieIsPlaying() == false)) {
            lib90F7C81D_gf_ShowHideMovieFrame(true, PlayerGroupAll());
            DialogControlSetAnimationState(lib90F7C81D_gv_minimap, PlayerGroupAll(), "Jamming", "Jammed");
            lib90F7C81D_gf_MovieSettings("Assets\\Textures\\video_static.ogv", true, false, false, false, PlayerGroupAll());
        }
    }
    else {
        if ((lib90F7C81D_gf_MovieIsPlaying() == true)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_minimap, PlayerGroupAll(), "Jamming", "Clear");
            lib90F7C81D_gf_ShowHideMovieFrame(false, PlayerGroupAll());
            lib90F7C81D_gf_StopMovie(PlayerGroupAll());
        }
    }
}

void lib90F7C81D_gf_MoveObjectivePanel (int lp_xOffset, int lp_yOffset, int lp_anchor) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), lp_anchor, lp_xOffset, lp_yOffset);
}

void lib90F7C81D_gf_PingPlay (int lp_pingType, int lp_player, point lp_pingLocation, int lp_gameUser, string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner) {
    // Variable Declarations
    string lv_pingMinimapModel;
    string lv_pingEffect;
    soundlink lv_pingSound;
    fixed lv_pingScale;
    text lv_tooltipLabel;
    unit lv_pingUnit;
    playergroup lv_pingPlayers;
    int lv_indexPlayer;
    int lv_gameUserIndex;

    // Automatic Variable Declarations
    int autoD8897E40_val;

    // Variable Initialization
    lv_pingSound = SoundLink("EditorDefaultSound", -1);
    lv_pingScale = 1.0;
    lv_pingPlayers = PlayerGroupEmpty();

    // Implementation
    lv_gameUserIndex = ((lp_gameUser)-999);
    if (((lv_gameUserIndex < 0) || (lv_gameUserIndex > 16))) {
        return ;
    }

    if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_alpha, lv_gameUserIndex) == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lib90F7C81D_gv_fireteam.lv_alpha, lv_pingPlayers);
    }
    else if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_delta, lv_gameUserIndex) == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lib90F7C81D_gv_fireteam.lv_delta, lv_pingPlayers);
    }
    else if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_echo, lv_gameUserIndex) == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lib90F7C81D_gv_fireteam.lv_echo, lv_pingPlayers);
    }
    if ((TimerGetRemaining(lib90F7C81D_gv_pingSuppressionTimer[lv_gameUserIndex]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(lib90F7C81D_gv_pingLockoutTimer[lv_gameUserIndex]) > 0.0)) {
        GameUserDisplayMessage(lp_gameUser, c_messageAreaChat, StringExternal("Param/Value/lib_90F7C81D_0290EE0B"));
        return ;
    }

    lib90F7C81D_gv_pingRecentCount[lv_gameUserIndex] += 1;
    TimerStart(lib90F7C81D_gv_pingSuppressionTimer[lv_gameUserIndex], lib90F7C81D_gv_c_PINGSUPPRESSIONTIME, false, c_timeGame);
    TimerStart(lib90F7C81D_gv_pingResetTimer[lv_gameUserIndex], lib90F7C81D_gv_c_PINGRESETTIME, false, c_timeGame);
    if ((lib90F7C81D_gv_pingRecentCount[lv_gameUserIndex] >= lib90F7C81D_gv_c_PINGMAXCOUNT)) {
        TimerStart(lib90F7C81D_gv_pingLockoutTimer[lv_gameUserIndex], lib90F7C81D_gv_c_PINGLOCKOUTTIME, false, c_timeGame);
    }

    autoD8897E40_val = lp_pingType;
    if (autoD8897E40_val == 0) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_81199AB8", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_81199AB8", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_90F7C81D_81199AB8"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Attack", -1);
        lv_pingMinimapModel = "PingPanelPingAttack";
        lv_pingEffect = "PingPanelBeaconAttack";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_90F7C81D_A7AA6BCC");
    }
    else if (autoD8897E40_val == 3) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_4EA3B8F1", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_4EA3B8F1", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_90F7C81D_4EA3B8F1"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Defend", -1);
        lv_pingMinimapModel = "PingPanelPingDefend";
        lv_pingEffect = "PingPanelBeaconDefend";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_90F7C81D_EDC38F46");
    }
    else if (autoD8897E40_val == 2) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_87A77052", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_87A77052", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_90F7C81D_87A77052"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Retreat", -1);
        lv_pingMinimapModel = "PingPanelPingRetreat";
        lv_pingEffect = "PingPanelBeaconRetreat";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_90F7C81D_FD47270F");
    }
    else if (autoD8897E40_val == 1) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_A4A4068A", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_A4A4068A", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_90F7C81D_A4A4068A"));
        lv_pingSound = SoundLink("UI_PingAdvanced_OnMyWay", -1);
        lv_pingMinimapModel = "PingPanelPingOnMyWay";
        lv_pingEffect = "PingPanelBeaconOnMyWay";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_90F7C81D_6D2CA1D3");
    }
    else {
        if ((lp_pingTargetType != null)) {
            lib90F7C81D_gf_PingPlayUnit(lp_pingTargetType, lp_pingTargetPosition, lp_pingTargetOwner, lp_player, lp_gameUser);
            return ;
        }

        lv_pingSound = SoundLink("UI_MiniMapPing", -1);
        lv_pingMinimapModel = "MinimapPing";
    }
    if ((lv_pingEffect != null)) {
        lib90F7C81D_gf_PingBeaconAdd2(lv_pingEffect, lp_pingLocation, lp_player, lv_pingPlayers);
    }

    libNtve_gf_CreatePingFacingAngle(lv_pingPlayers, lv_pingMinimapModel, lp_pingLocation, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), 5.0, 270.0);
    PingSetScale(PingLastCreated(), lv_pingScale);
    SoundPlayForPlayer(lv_pingSound, c_maxPlayers, lv_pingPlayers, 100.0, 0.0);
    if (((lv_tooltipLabel != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_F3AB8D23", "A", PlayerName(lp_player));
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_F3AB8D23", "B", lv_tooltipLabel);
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_90F7C81D_F3AB8D23"));
    }
    else {
        PingSetTooltip(PingLastCreated(), PlayerName(lp_player));
    }
}

void lib90F7C81D_gf_PingPlayUnit (string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner, int lp_player, int lp_gameUser) {
    // Variable Declarations
    string lv_pingMinimapModel;
    string lv_pingEffect;
    soundlink lv_pingSound;
    fixed lv_pingScale;
    text lv_tooltipLabel;
    playergroup lv_pingPlayers;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingSound = SoundLink("EditorDefaultSound", -1);
    lv_pingScale = 1.0;
    lv_pingPlayers = PlayerGroupEmpty();

    // Implementation
    if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_alpha, lp_player) == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lib90F7C81D_gv_fireteam.lv_alpha, lv_pingPlayers);
    }
    else if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_delta, lp_player) == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lib90F7C81D_gv_fireteam.lv_delta, lv_pingPlayers);
    }
    else if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_echo, lp_player) == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lib90F7C81D_gv_fireteam.lv_echo, lv_pingPlayers);
    }
    if ((libNtve_gf_PlayerIsEnemy(lp_player, lp_pingTargetOwner, libNtve_ge_PlayerRelation_Enemy) == true)) {
        if ((EventPingUnitIsUnderConstruction() == true) && (VisIsVisibleForPlayer(lp_player, lp_pingTargetPosition) == false)) {
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_828AEC75", "ID", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_828AEC75", "PLAYER", GameUserName(lp_gameUser));
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_828AEC75", "ENEMYID", IntToText(lp_pingTargetOwner));
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_828AEC75", "ENEMY", PlayerName(lp_pingTargetOwner));
            UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_90F7C81D_828AEC75"));
            lv_tooltipLabel = StringExternal("Param/Value/lib_90F7C81D_9BB9150A");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_07FA4617", "ID", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_07FA4617", "PLAYER", GameUserName(lp_gameUser));
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_07FA4617", "ENEMYID", IntToText(lp_pingTargetOwner));
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_07FA4617", "ENEMY", UnitTypeGetName(lp_pingTargetType));
            UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_90F7C81D_07FA4617"));
            TextExpressionSetToken("Param/Expression/lib_90F7C81D_3AD2D5BF", "A", UnitTypeGetName(lp_pingTargetType));
            lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_90F7C81D_3AD2D5BF");
        }
        lv_pingSound = SoundLink("UI_PingAdvanced_Attack", -1);
        lv_pingMinimapModel = "PingPanelPingAttack";
        lv_pingEffect = "PingPanelBeaconAttack";
        lv_pingScale = 0.6;
    }
    else if ((libNtve_gf_PlayerIsEnemy(lp_player, lp_pingTargetOwner, libNtve_ge_PlayerRelation_Ally) == true)) {
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_F27C4FCC", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_F27C4FCC", "PLAYER", GameUserName(lp_gameUser));
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_F27C4FCC", "ENEMYID", IntToText(lp_pingTargetOwner));
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_F27C4FCC", "ENEMY", UnitTypeGetName(lp_pingTargetType));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_90F7C81D_F27C4FCC"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Defend", -1);
        lv_pingMinimapModel = "PingPanelPingDefend";
        lv_pingEffect = "PingPanelBeaconDefend";
        lv_pingScale = 0.6;
        TextExpressionSetToken("Param/Expression/lib_90F7C81D_ABF6741E", "A", UnitTypeGetName(lp_pingTargetType));
        lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_90F7C81D_ABF6741E");
    }
    if ((lv_pingEffect != null)) {
        lib90F7C81D_gf_PingBeaconAdd2(lv_pingEffect, lp_pingTargetPosition, lp_player, lv_pingPlayers);
    }

    libNtve_gf_CreatePingFacingAngle(lv_pingPlayers, lv_pingMinimapModel, lp_pingTargetPosition, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), 5.0, 270.0);
    PingSetScale(PingLastCreated(), lv_pingScale);
    SoundPlayForPlayer(lv_pingSound, c_maxPlayers, lv_pingPlayers, 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/lib_90F7C81D_17E54DDB", "A", PlayerName(lp_player));
    TextExpressionSetToken("Param/Expression/lib_90F7C81D_17E54DDB", "B", lv_tooltipLabel);
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_90F7C81D_17E54DDB"));
}

void lib90F7C81D_gf_PingBeaconAdd2 (string lp_beaconEffect, point lp_location, int lp_player, playergroup lp_playerGroup) {
    // Variable Declarations
    int lv_beaconIndex;

    // Automatic Variable Declarations
    playergroup autoF5F970E1_g;
    int autoF5F970E1_var;

    // Variable Initialization

    // Implementation
    autoF5F970E1_g = lp_playerGroup;
    autoF5F970E1_var = -1;
    while (true) {
        autoF5F970E1_var = PlayerGroupNextPlayer(autoF5F970E1_g, autoF5F970E1_var);
        if (autoF5F970E1_var < 0) { break; }
        PlayerCreateEffectPoint(autoF5F970E1_var, lp_beaconEffect, lp_location);
    }
}

void lib90F7C81D_gf_PingMinimapButtonUpdate () {
    // Variable Declarations
    playergroup lv_standardPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_standardPlayers = PlayerGroupEmpty();

    // Implementation
    if ((lib90F7C81D_gv_pingPanelMinimapButton == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/PingButton");
        lib90F7C81D_gv_pingPanelMinimapButton = DialogControlLastCreated();
    }

    lv_standardPlayers = PlayerGroupAll();
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lib90F7C81D_gv_pingValidPlayers, lv_standardPlayers);
    if ((PlayerGroupCount(lv_standardPlayers) > 0)) {
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_pingPanelMinimapButton, StringExternal("UI/PingTip"), lv_standardPlayers);
    }

    if ((PlayerGroupCount(lib90F7C81D_gv_pingValidPlayers) > 0)) {
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_pingPanelMinimapButton, StringExternal("UI/AdvancedPingTip"), lib90F7C81D_gv_pingValidPlayers);
    }

}

void lib90F7C81D_gf_EnableDisablePingPanel (bool lp_enableDisable, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lp_players, lib90F7C81D_gv_pingValidPlayers);
        UISetFrameVisible(lp_players, c_syncFrameTypePingPanel, true);
        TriggerEnable(lib90F7C81D_gt_PingUsed, true);
    }
    else {
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lib90F7C81D_gv_pingValidPlayers);
        UISetFrameVisible(lp_players, c_syncFrameTypePingPanel, false);
        if ((PlayerGroupCount(lib90F7C81D_gv_pingValidPlayers) == 0)) {
            TriggerEnable(lib90F7C81D_gt_PingUsed, false);
        }

    }
    lib90F7C81D_gf_PingMinimapButtonUpdate();
}

void lib90F7C81D_gf_CreateVisorTextDialog () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto737FE8B5_ae = 12;
    const int auto737FE8B5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto737FE8B5_ai >= 0 && lv_player <= auto737FE8B5_ae) || (auto737FE8B5_ai < 0 && lv_player >= auto737FE8B5_ae) ) ; lv_player += auto737FE8B5_ai ) {
        DialogCreate(600, 800, c_anchorRight, 300, -225, true);
        lib90F7C81D_gv_visorTextDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_player), true);
        libNtve_gf_CreateDialogItemLabel(lib90F7C81D_gv_visorTextDialog, 600, 600, c_anchorBottom, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), true, 0.15);
        lib90F7C81D_gv_visorText[lv_player] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
}

void lib90F7C81D_gf_DisplayVisorTextDialog (text lp_text, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("UI_TipSelect", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_visorText[lp_player], lp_text, PlayerGroupSingle(lp_player));
    DialogControlFadeTransparency(lib90F7C81D_gv_visorText[lp_player], PlayerGroupSingle(lp_player), 0.0, 0.0);
    TimerStart(lib90F7C81D_gv_visorTextTimer[lp_player], 8.0, false, c_timeGame);
}

trigger auto_lib90F7C81D_gf_FadeVisorTextDialog_Trigger = null;
int auto_lib90F7C81D_gf_FadeVisorTextDialog_lp_player;

void lib90F7C81D_gf_FadeVisorTextDialog (int lp_player) {
    auto_lib90F7C81D_gf_FadeVisorTextDialog_lp_player = lp_player;

    if (auto_lib90F7C81D_gf_FadeVisorTextDialog_Trigger == null) {
        auto_lib90F7C81D_gf_FadeVisorTextDialog_Trigger = TriggerCreate("auto_lib90F7C81D_gf_FadeVisorTextDialog_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_FadeVisorTextDialog_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_FadeVisorTextDialog_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib90F7C81D_gf_FadeVisorTextDialog_lp_player;

    // Automatic Variable Declarations
    // Implementation
    DialogControlFadeTransparency(lib90F7C81D_gv_visorText[lp_player], PlayerGroupSingle(lp_player), 0.0625, 100.0);
    return true;
}

void lib90F7C81D_gf_SetSpinnerMaximum (int lp_amount, playergroup lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_spinner.lv_label[0], IntToText(lp_amount), lp_player);
}

void lib90F7C81D_gf_SetSpinnerMinimum (int lp_amount, playergroup lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_spinner.lv_label[1], IntToText(lp_amount), lp_player);
}

void lib90F7C81D_gf_SetSpinnerMajorStep (int lp_amount, playergroup lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_spinner.lv_label[2], IntToText(lp_amount), lp_player);
}

void lib90F7C81D_gf_SetSpinnerMinorStep (int lp_amount, playergroup lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_spinner.lv_label[3], IntToText(lp_amount), lp_player);
}

void lib90F7C81D_gf_ResetSpinner (playergroup lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(lib90F7C81D_gv_spinner.lv_frame, lp_player, "Reset");
}

trigger auto_lib90F7C81D_gf_CreateTextTagWithAnimation_Trigger = null;
unit auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayUnit;
string auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayText;
string auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_style;
int auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_direction;
playergroup auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayPlayers;
string auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_attachment;
fixed auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_time;
int auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_yOffset;
bool auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_critical;

void lib90F7C81D_gf_CreateTextTagWithAnimation (unit lp_displayUnit, string lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, string lp_attachment, fixed lp_time, int lp_yOffset, bool lp_critical) {
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayUnit = lp_displayUnit;
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayText = lp_displayText;
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_style = lp_style;
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_direction = lp_direction;
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayPlayers = lp_displayPlayers;
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_attachment = lp_attachment;
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_time = lp_time;
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_yOffset = lp_yOffset;
    auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_critical = lp_critical;

    if (auto_lib90F7C81D_gf_CreateTextTagWithAnimation_Trigger == null) {
        auto_lib90F7C81D_gf_CreateTextTagWithAnimation_Trigger = TriggerCreate("auto_lib90F7C81D_gf_CreateTextTagWithAnimation_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_CreateTextTagWithAnimation_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_CreateTextTagWithAnimation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_displayUnit = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayUnit;
    string lp_displayText = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayText;
    string lp_style = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_style;
    int lp_direction = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_direction;
    playergroup lp_displayPlayers = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_displayPlayers;
    string lp_attachment = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_attachment;
    fixed lp_time = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_time;
    int lp_yOffset = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_yOffset;
    bool lp_critical = auto_lib90F7C81D_gf_CreateTextTagWithAnimation_lp_critical;

    // Variable Declarations
    int lv_dialog;
    int lv_frame;
    int lv_textFrame;
    int lv_xOffsetActual;
    int lv_yOffsetActual;
    string lv_directionH;
    string lv_directionV;
    string lv_animateMessage;
    string lv_iconState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_frame = c_invalidDialogControlId;
    lv_textFrame = c_invalidDialogControlId;
    lv_directionH = "";
    lv_directionV = "";
    lv_animateMessage = "";
    lv_iconState = "";

    // Implementation
    lv_yOffsetActual = (-200 - lp_yOffset);
    lv_xOffsetActual = -200;
    DialogCreate(400, 400, c_anchorCenter, 0, 0, true);
    lv_dialog = DialogLastCreated();
    DialogSetImageVisible(lv_dialog, false);
    DialogSetPositionRelativeToUnit(lv_dialog, lp_displayUnit, lp_attachment, lv_xOffsetActual, lv_yOffsetActual);
    DialogSetVisible(lv_dialog, lp_displayPlayers, true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "PiratedFloatingText/FloatingTextFrame");
    lv_frame = DialogControlLastCreated();
    DialogControlHookup(lv_frame, c_triggerControlTypeLabel, "Text");
    lv_textFrame = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_textFrame, StringToText(lp_displayText), lp_displayPlayers);
    libNtve_gf_SetDialogItemStyle(lv_textFrame, lp_style, lp_displayPlayers);
    if ((lp_critical == true)) {
        libNtve_gf_SetDialogItemColor(lv_textFrame, Color(100.00, 0.00, 0.00), PlayerGroupAll());
    }
    lib90F7C81D_gf_FloatingCombatTextApplyDirection(lv_frame, lp_direction, lp_displayPlayers);
    lib90F7C81D_gf_FloatingCombatTextApplyAnimation(lv_textFrame, lp_style, lp_displayPlayers);
    Wait(lp_time, c_timeGame);
    DialogDestroy(lv_dialog);
    return true;
}

void lib90F7C81D_gf_CreateTextTagForAllPlayers (unit lp_unit, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "TextBox/TextTag", lp_unit);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_text, PlayerGroupAll());
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "DisplayTag");
    DialogControlDestroy(DialogControlLastCreated());
}

void lib90F7C81D_gf_FloatingCombatTextApplyAnimation (int lp_textFrame, string lp_style, playergroup lp_displayPlayers) {
    // Variable Declarations
    string lv_animateMessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_animateMessage = "";

    // Implementation
    lv_animateMessage = "EventAnimate";
    if ((lp_style == "FCT_Status_Crit")) {
        lv_animateMessage = "EventAnimateFast";
    }
    else if ((lp_style == "FCT_Basic_Crit")) {
        lv_animateMessage = "EventAnimateSlow";
        DialogControlSetAnimationState(lp_textFrame, lp_displayPlayers, "TextIconState", "IconBasic");
    }
    else if ((lp_style == "FCT_Ability_Crit")) {
        lv_animateMessage = "EventAnimateSlow";
        DialogControlSetAnimationState(lp_textFrame, lp_displayPlayers, "TextIconState", "IconAbility");
    }
    else if ((lp_style == "FCT_Heal_Crit")) {
        lv_animateMessage = "EventAnimateSlow";
    }
    DialogControlSendAnimationEvent(lp_textFrame, lp_displayPlayers, lv_animateMessage);
}

void lib90F7C81D_gf_FloatingCombatTextApplyDirection (int lp_frame, int lp_direction, playergroup lp_displayPlayers) {
    // Variable Declarations
    int lv_indexH;
    int lv_indexV;
    string lv_directionH;
    string lv_directionV;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_directionH = "";
    lv_directionV = "";

    // Implementation
    if ((lp_direction == lib90F7C81D_ge_FCTDirection_Right)) {
        lv_indexH = RandomInt(0, 3);
        lv_indexV = RandomInt(0, 3);
    }
    else if ((lp_direction == lib90F7C81D_ge_FCTDirection_Left)) {
        lv_indexH = RandomInt(4, 7);
        lv_indexV = RandomInt(0, 3);
    }
    else if ((lp_direction == lib90F7C81D_ge_FCTDirection_Middle)) {
        lv_indexH = RandomInt(8, 11);
        lv_indexV = RandomInt(1, 3);
    }
    else if ((lp_direction == lib90F7C81D_ge_FCTDirection_Vertical)) {
        lv_indexH = 12;
        lv_indexV = 0;
    }
    else if ((lp_direction == lib90F7C81D_ge_FCTDirection_Random)) {
        lv_indexH = RandomInt(0, 11);
        lv_indexV = RandomInt(0, 3);
    }
    lv_directionH = ("PiratedFloatingTextTemplates/H" + lib90F7C81D_gf_ConvertIntegerToStringDoubleDigit(lv_indexH));
    lv_directionV = ("PiratedFloatingTextTemplates/V" + lib90F7C81D_gf_ConvertIntegerToStringDoubleDigit(lv_indexV));
    DialogControlCreateInPanelFromTemplate(lp_frame, c_triggerControlTypePanel, lv_directionH);
    DialogControlCreateInPanelFromTemplate(lp_frame, c_triggerControlTypePanel, lv_directionV);
}

string lib90F7C81D_gf_ConvertIntegerToStringDoubleDigit (int lp_integer) {
    // Variable Declarations
    string lv_integerString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_integerString = "";

    // Implementation
    lv_integerString = IntToString(lp_integer);
    if ((StringLength(lv_integerString) == 1)) {
        lv_integerString = ("0" + lv_integerString);
    }

    return lv_integerString;
}

void lib90F7C81D_gf_SetGlobalLightingChange (fixed lp_durationTime, string lp_light) {
    // Automatic Variable Declarations
    // Implementation
    lib90F7C81D_gv_timeOfDay.lv_durationTime = lp_durationTime;
    lib90F7C81D_gv_timeOfDay.lv_currentLighting = lp_light;
    GameSetLighting(lp_light, lp_durationTime);
}

void lib90F7C81D_gf_RefreshGlobalLighting () {
    // Automatic Variable Declarations
    // Implementation
    lib90F7C81D_gv_timeOfDay.lv_durationTime -= 1.0;
    GameSetLighting(lib90F7C81D_gv_timeOfDay.lv_currentLighting, lib90F7C81D_gv_timeOfDay.lv_durationTime);
}

trigger auto_lib90F7C81D_gf_EnableNightVision_Trigger = null;

void lib90F7C81D_gf_EnableNightVision () {
    if (auto_lib90F7C81D_gf_EnableNightVision_Trigger == null) {
        auto_lib90F7C81D_gf_EnableNightVision_Trigger = TriggerCreate("auto_lib90F7C81D_gf_EnableNightVision_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_EnableNightVision_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_EnableNightVision_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8FAF708B_g;
    int auto8FAF708B_var;

    // Implementation
    auto8FAF708B_g = lib90F7C81D_gv_players;
    auto8FAF708B_var = -1;
    while (true) {
        auto8FAF708B_var = PlayerGroupNextPlayer(auto8FAF708B_g, auto8FAF708B_var);
        if (auto8FAF708B_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto8FAF708B_var, "NightVision", 1);
    }
    return true;
}

void lib90F7C81D_gf_DisplayTipPanel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSendAnimationEvent(lib90F7C81D_gv_tipPanel.lv_tipDragPanel, PlayerGroupSingle(lp_player), "Display");
}

int lib90F7C81D_gf_ReturnMaximumScoreValueType (int lp_sortType) {
    // Variable Declarations
    int lv_index;
    int lv_indexMax;
    int lv_score;
    int lv_scoreMax;

    // Automatic Variable Declarations
    const int autoF54AFBA6_ae = 12;
    const int autoF54AFBA6_ai = 1;
    int auto0283360A_val;
    int auto84DA25A2_val;
    playergroup auto41D36C5A_g;
    int auto41D36C5A_var;
    playergroup auto6ED5EF29_g;
    int auto6ED5EF29_var;
    playergroup autoEC7EF6DC_g;
    int autoEC7EF6DC_var;
    playergroup autoD60BFB2D_g;
    int autoD60BFB2D_var;
    playergroup autoC850AEFF_g;
    int autoC850AEFF_var;
    playergroup autoF64F8059_g;
    int autoF64F8059_var;
    playergroup auto9443379C_g;
    int auto9443379C_var;
    playergroup auto5DDE0B6F_g;
    int auto5DDE0B6F_var;
    playergroup auto3406CC47_g;
    int auto3406CC47_var;
    playergroup auto8B2B6DCC_g;
    int auto8B2B6DCC_var;
    playergroup auto1CA54305_g;
    int auto1CA54305_var;
    playergroup auto46DEDFF5_g;
    int auto46DEDFF5_var;
    playergroup auto4D2E346C_g;
    int auto4D2E346C_var;
    playergroup auto49159DE7_g;
    int auto49159DE7_var;
    playergroup auto44EED562_g;
    int auto44EED562_var;
    playergroup autoFDCB03F3_g;
    int autoFDCB03F3_var;
    playergroup auto584CCC83_g;
    int auto584CCC83_var;

    // Variable Initialization

    // Implementation
    lv_indexMax = 1;
    lv_index = 2;
    for ( ; ( (autoF54AFBA6_ai >= 0 && lv_index <= autoF54AFBA6_ae) || (autoF54AFBA6_ai < 0 && lv_index >= autoF54AFBA6_ae) ) ; lv_index += autoF54AFBA6_ai ) {
        auto0283360A_val = lp_sortType;
        if (auto0283360A_val == lib90F7C81D_ge_ScoreType_Kills) {
            lv_score = lib90F7C81D_gv_sTATS.lv_kills[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_kills[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_MassiveKills) {
            lv_score = lib90F7C81D_gv_sTATS.lv_massiveKills[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_massiveKills[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_RevivePoints) {
            lv_score = lib90F7C81D_gv_sTATS.lv_revivePoints[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_revivePoints[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_Heals) {
            lv_score = lib90F7C81D_gv_sTATS.lv_heals[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_heals[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_Hits) {
            lv_score = lib90F7C81D_gv_sTATS.lv_hits[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_hits[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_Deaths) {
            lv_score = lib90F7C81D_gv_sTATS.lv_deaths[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_deaths[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_DamageTaken) {
            lv_score = lib90F7C81D_gv_sTATS.lv_damageTaken[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_damageTaken[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_PMCKills) {
            lv_score = lib90F7C81D_gv_sTATS.lv_pMC_Kills[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_pMC_Kills[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_DamageDealt) {
            lv_score = lib90F7C81D_gv_sTATS.lv_damageDealt[lv_index];
            lv_scoreMax = lib90F7C81D_gv_sTATS.lv_damageDealt[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_Kills_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalKills[lv_index];
            lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalKills[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_MassiveKills_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalMassiveKills[lv_index];
            lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalMassiveKills[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_Hits_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalHits[lv_index];
            lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalHits[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_Deaths_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalDeaths[lv_index];
            lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalDeaths[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_Heals_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalHeals[lv_index];
            lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalHeals[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_RevivePoints_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalRevivePoints[lv_index];
            lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalRevivePoints[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_GamesPlayed_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_gamesPlayed[lv_index];
            lv_scoreMax = lib90F7C81D_gv_bankData.lv_gamesPlayed[lv_indexMax];
        }
        else if (auto0283360A_val == lib90F7C81D_ge_ScoreType_GameModeWins_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][lv_index];
            lv_scoreMax = lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][lv_indexMax];
        }
        else {
        }
        if ((lv_score > lv_scoreMax)) {
            lv_indexMax = lv_index;
        }

    }
    auto84DA25A2_val = lp_sortType;
    if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_Kills) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_kills[lv_indexMax];
        auto41D36C5A_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto41D36C5A_var = -1;
        while (true) {
            auto41D36C5A_var = PlayerGroupNextPlayer(auto41D36C5A_g, auto41D36C5A_var);
            if (auto41D36C5A_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_kills[auto41D36C5A_var] == lv_scoreMax) && (lib90F7C81D_gv_sTATS.lv_kills[auto41D36C5A_var] != 0)) {
                lib90F7C81D_gv_highScore[0][auto41D36C5A_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_MassiveKills) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_massiveKills[lv_indexMax];
        auto6ED5EF29_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto6ED5EF29_var = -1;
        while (true) {
            auto6ED5EF29_var = PlayerGroupNextPlayer(auto6ED5EF29_g, auto6ED5EF29_var);
            if (auto6ED5EF29_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_massiveKills[auto6ED5EF29_var] == lv_scoreMax) && (lib90F7C81D_gv_sTATS.lv_massiveKills[auto6ED5EF29_var] != 0)) {
                lib90F7C81D_gv_highScore[1][auto6ED5EF29_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_RevivePoints) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_revivePoints[lv_indexMax];
        autoEC7EF6DC_g = lib90F7C81D_gv_scoreScreenPlayers;
        autoEC7EF6DC_var = -1;
        while (true) {
            autoEC7EF6DC_var = PlayerGroupNextPlayer(autoEC7EF6DC_g, autoEC7EF6DC_var);
            if (autoEC7EF6DC_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_revivePoints[autoEC7EF6DC_var] == lv_scoreMax) && (lib90F7C81D_gv_sTATS.lv_revivePoints[autoEC7EF6DC_var] != 0)) {
                lib90F7C81D_gv_highScore[2][autoEC7EF6DC_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_Heals) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_heals[lv_indexMax];
        autoD60BFB2D_g = lib90F7C81D_gv_scoreScreenPlayers;
        autoD60BFB2D_var = -1;
        while (true) {
            autoD60BFB2D_var = PlayerGroupNextPlayer(autoD60BFB2D_g, autoD60BFB2D_var);
            if (autoD60BFB2D_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_heals[autoD60BFB2D_var] == lv_scoreMax) && (lib90F7C81D_gv_sTATS.lv_heals[autoD60BFB2D_var] != 0)) {
                lib90F7C81D_gv_highScore[3][autoD60BFB2D_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_Hits) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_hits[lv_indexMax];
        autoC850AEFF_g = lib90F7C81D_gv_scoreScreenPlayers;
        autoC850AEFF_var = -1;
        while (true) {
            autoC850AEFF_var = PlayerGroupNextPlayer(autoC850AEFF_g, autoC850AEFF_var);
            if (autoC850AEFF_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_hits[autoC850AEFF_var] == lv_scoreMax)) {
                lib90F7C81D_gv_highScore[4][autoC850AEFF_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_Deaths) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_deaths[lv_indexMax];
        autoF64F8059_g = lib90F7C81D_gv_scoreScreenPlayers;
        autoF64F8059_var = -1;
        while (true) {
            autoF64F8059_var = PlayerGroupNextPlayer(autoF64F8059_g, autoF64F8059_var);
            if (autoF64F8059_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_deaths[autoF64F8059_var] == lv_scoreMax)) {
                lib90F7C81D_gv_highScore[5][autoF64F8059_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_DamageTaken) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_damageTaken[lv_indexMax];
        auto9443379C_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto9443379C_var = -1;
        while (true) {
            auto9443379C_var = PlayerGroupNextPlayer(auto9443379C_g, auto9443379C_var);
            if (auto9443379C_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_damageTaken[auto9443379C_var] == lv_scoreMax)) {
                lib90F7C81D_gv_highScore[6][auto9443379C_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_DamageDealt) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_damageDealt[lv_indexMax];
        auto5DDE0B6F_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto5DDE0B6F_var = -1;
        while (true) {
            auto5DDE0B6F_var = PlayerGroupNextPlayer(auto5DDE0B6F_g, auto5DDE0B6F_var);
            if (auto5DDE0B6F_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_damageDealt[auto5DDE0B6F_var] == lv_scoreMax) && (lib90F7C81D_gv_sTATS.lv_damageDealt[auto5DDE0B6F_var] != 0)) {
                lib90F7C81D_gv_highScore[7][auto5DDE0B6F_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_PMCKills) {
        lv_scoreMax = lib90F7C81D_gv_sTATS.lv_pMC_Kills[lv_indexMax];
        auto3406CC47_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto3406CC47_var = -1;
        while (true) {
            auto3406CC47_var = PlayerGroupNextPlayer(auto3406CC47_g, auto3406CC47_var);
            if (auto3406CC47_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_pMC_Kills[auto3406CC47_var] == lv_scoreMax) && (lib90F7C81D_gv_sTATS.lv_pMC_Kills[auto3406CC47_var] != 0)) {
                lib90F7C81D_gv_highScore[16][auto3406CC47_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_Kills_C) {
        lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalKills[lv_indexMax];
        auto8B2B6DCC_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto8B2B6DCC_var = -1;
        while (true) {
            auto8B2B6DCC_var = PlayerGroupNextPlayer(auto8B2B6DCC_g, auto8B2B6DCC_var);
            if (auto8B2B6DCC_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_totalKills[auto8B2B6DCC_var] == lv_scoreMax) && (lib90F7C81D_gv_bankData.lv_totalKills[auto8B2B6DCC_var] != 0)) {
                lib90F7C81D_gv_highScore[8][auto8B2B6DCC_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_MassiveKills_C) {
        lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalMassiveKills[lv_indexMax];
        auto1CA54305_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto1CA54305_var = -1;
        while (true) {
            auto1CA54305_var = PlayerGroupNextPlayer(auto1CA54305_g, auto1CA54305_var);
            if (auto1CA54305_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_totalMassiveKills[auto1CA54305_var] == lv_scoreMax) && (lib90F7C81D_gv_bankData.lv_totalMassiveKills[auto1CA54305_var] != 0)) {
                lib90F7C81D_gv_highScore[9][auto1CA54305_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_Hits_C) {
        lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalHits[lv_indexMax];
        auto46DEDFF5_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto46DEDFF5_var = -1;
        while (true) {
            auto46DEDFF5_var = PlayerGroupNextPlayer(auto46DEDFF5_g, auto46DEDFF5_var);
            if (auto46DEDFF5_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_totalHits[auto46DEDFF5_var] == lv_scoreMax)) {
                lib90F7C81D_gv_highScore[10][auto46DEDFF5_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_Deaths_C) {
        lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalDeaths[lv_indexMax];
        auto4D2E346C_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto4D2E346C_var = -1;
        while (true) {
            auto4D2E346C_var = PlayerGroupNextPlayer(auto4D2E346C_g, auto4D2E346C_var);
            if (auto4D2E346C_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_totalDeaths[auto4D2E346C_var] == lv_scoreMax)) {
                lib90F7C81D_gv_highScore[11][auto4D2E346C_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_Heals_C) {
        lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalHeals[lv_indexMax];
        auto49159DE7_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto49159DE7_var = -1;
        while (true) {
            auto49159DE7_var = PlayerGroupNextPlayer(auto49159DE7_g, auto49159DE7_var);
            if (auto49159DE7_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_totalHeals[auto49159DE7_var] == lv_scoreMax) && (lib90F7C81D_gv_bankData.lv_totalHeals[auto49159DE7_var] != 0)) {
                lib90F7C81D_gv_highScore[12][auto49159DE7_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_RevivePoints_C) {
        lv_scoreMax = lib90F7C81D_gv_bankData.lv_totalRevivePoints[lv_indexMax];
        auto44EED562_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto44EED562_var = -1;
        while (true) {
            auto44EED562_var = PlayerGroupNextPlayer(auto44EED562_g, auto44EED562_var);
            if (auto44EED562_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_totalRevivePoints[auto44EED562_var] == lv_scoreMax) && (lib90F7C81D_gv_bankData.lv_totalRevivePoints[auto44EED562_var] != 0)) {
                lib90F7C81D_gv_highScore[13][auto44EED562_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_GamesPlayed_C) {
        lv_scoreMax = lib90F7C81D_gv_bankData.lv_gamesPlayed[lv_indexMax];
        autoFDCB03F3_g = lib90F7C81D_gv_scoreScreenPlayers;
        autoFDCB03F3_var = -1;
        while (true) {
            autoFDCB03F3_var = PlayerGroupNextPlayer(autoFDCB03F3_g, autoFDCB03F3_var);
            if (autoFDCB03F3_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_gamesPlayed[autoFDCB03F3_var] == lv_scoreMax)) {
                lib90F7C81D_gv_highScore[14][autoFDCB03F3_var] = true;
            }
        }
    }
    else if (auto84DA25A2_val == lib90F7C81D_ge_ScoreType_GameModeWins_C) {
        lv_scoreMax = lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][lv_indexMax];
        auto584CCC83_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto584CCC83_var = -1;
        while (true) {
            auto584CCC83_var = PlayerGroupNextPlayer(auto584CCC83_g, auto584CCC83_var);
            if (auto584CCC83_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][auto584CCC83_var] == lv_scoreMax) && (lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][auto584CCC83_var] != 0)) {
                lib90F7C81D_gv_highScore[15][auto584CCC83_var] = true;
            }
        }
    }
    else {
    }
    return lv_scoreMax;
}

int lib90F7C81D_gf_ReturnMinimumScoreValueType (int lp_sortType) {
    // Variable Declarations
    int lv_index;
    int lv_indexMin;
    int lv_score;
    int lv_scoreMin;

    // Automatic Variable Declarations
    const int auto10FBA947_ae = 12;
    const int auto10FBA947_ai = 1;
    int auto88993FAD_val;
    int auto53F5EC50_val;
    playergroup auto2C2FA793_g;
    int auto2C2FA793_var;
    playergroup autoE6970E5E_g;
    int autoE6970E5E_var;
    playergroup autoD2A25424_g;
    int autoD2A25424_var;

    // Variable Initialization

    // Implementation
    lv_indexMin = 1;
    lv_index = 2;
    for ( ; ( (auto10FBA947_ai >= 0 && lv_index <= auto10FBA947_ae) || (auto10FBA947_ai < 0 && lv_index >= auto10FBA947_ae) ) ; lv_index += auto10FBA947_ai ) {
        auto88993FAD_val = lp_sortType;
        if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_Kills) {
            lv_score = lib90F7C81D_gv_sTATS.lv_kills[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_kills[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_MassiveKills) {
            lv_score = lib90F7C81D_gv_sTATS.lv_massiveKills[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_massiveKills[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_RevivePoints) {
            lv_score = lib90F7C81D_gv_sTATS.lv_revivePoints[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_revivePoints[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_Heals) {
            lv_score = lib90F7C81D_gv_sTATS.lv_heals[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_heals[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_Hits) {
            lv_score = lib90F7C81D_gv_sTATS.lv_hits[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_hits[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_Deaths) {
            lv_score = lib90F7C81D_gv_sTATS.lv_deaths[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_deaths[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_DamageTaken) {
            lv_score = lib90F7C81D_gv_sTATS.lv_damageTaken[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_damageTaken[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_DamageDealt) {
            lv_score = lib90F7C81D_gv_sTATS.lv_damageDealt[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_damageDealt[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_PMCKills) {
            lv_score = lib90F7C81D_gv_sTATS.lv_pMC_Kills[lv_index];
            lv_scoreMin = lib90F7C81D_gv_sTATS.lv_pMC_Kills[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_Kills_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalKills[lv_index];
            lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalKills[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_MassiveKills_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalMassiveKills[lv_index];
            lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalMassiveKills[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_Hits_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalHits[lv_index];
            lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalHits[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_Deaths_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalDeaths[lv_index];
            lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalDeaths[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_Heals_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalHeals[lv_index];
            lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalHeals[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_RevivePoints_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_totalRevivePoints[lv_index];
            lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalRevivePoints[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_GamesPlayed_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_gamesPlayed[lv_index];
            lv_scoreMin = lib90F7C81D_gv_bankData.lv_gamesPlayed[lv_indexMin];
        }
        else if (auto88993FAD_val == lib90F7C81D_ge_ScoreType_GameModeWins_C) {
            lv_score = lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][lv_index];
            lv_scoreMin = lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][lv_indexMin];
        }
        else {
        }
        if ((lv_score < lv_scoreMin)) {
            lv_indexMin = lv_index;
        }

    }
    auto53F5EC50_val = lp_sortType;
    if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_Kills) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_kills[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_MassiveKills) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_massiveKills[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_RevivePoints) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_revivePoints[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_Heals) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_heals[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_Hits) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_hits[lv_indexMin];
        auto2C2FA793_g = lib90F7C81D_gv_scoreScreenPlayers;
        auto2C2FA793_var = -1;
        while (true) {
            auto2C2FA793_var = PlayerGroupNextPlayer(auto2C2FA793_g, auto2C2FA793_var);
            if (auto2C2FA793_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_hits[auto2C2FA793_var] == lv_scoreMin)) {
                lib90F7C81D_gv_lowScore[4][auto2C2FA793_var] = true;
            }
        }
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_Deaths) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_deaths[lv_indexMin];
        autoE6970E5E_g = lib90F7C81D_gv_scoreScreenPlayers;
        autoE6970E5E_var = -1;
        while (true) {
            autoE6970E5E_var = PlayerGroupNextPlayer(autoE6970E5E_g, autoE6970E5E_var);
            if (autoE6970E5E_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_deaths[autoE6970E5E_var] == lv_scoreMin)) {
                lib90F7C81D_gv_lowScore[5][autoE6970E5E_var] = true;
            }
        }
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_DamageTaken) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_damageTaken[lv_indexMin];
        autoD2A25424_g = lib90F7C81D_gv_scoreScreenPlayers;
        autoD2A25424_var = -1;
        while (true) {
            autoD2A25424_var = PlayerGroupNextPlayer(autoD2A25424_g, autoD2A25424_var);
            if (autoD2A25424_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_damageTaken[autoD2A25424_var] == lv_scoreMin)) {
                lib90F7C81D_gv_lowScore[6][autoD2A25424_var] = true;
            }
        }
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_DamageDealt) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_damageDealt[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_PMCKills) {
        lv_scoreMin = lib90F7C81D_gv_sTATS.lv_pMC_Kills[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_Kills_C) {
        lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalKills[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_MassiveKills_C) {
        lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalMassiveKills[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_Hits_C) {
        lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalHits[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_Deaths_C) {
        lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalDeaths[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_Heals_C) {
        lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalHeals[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_RevivePoints_C) {
        lv_scoreMin = lib90F7C81D_gv_bankData.lv_totalRevivePoints[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_GamesPlayed_C) {
        lv_scoreMin = lib90F7C81D_gv_bankData.lv_gamesPlayed[lv_indexMin];
    }
    else if (auto53F5EC50_val == lib90F7C81D_ge_ScoreType_GameModeWins_C) {
        lv_scoreMin = lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][lv_indexMin];
    }
    else {
    }
    return lv_scoreMin;
}

trigger auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_Trigger = null;
bool auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_lp_option;

void lib90F7C81D_gf_HeroUnitGroupInvunerable (bool lp_option) {
    auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_lp_option = lp_option;

    if (auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_Trigger == null) {
        auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_Trigger = TriggerCreate("auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_TriggerFunc (bool testConds, bool runActions) {
    bool lp_option = auto_lib90F7C81D_gf_HeroUnitGroupInvunerable_lp_option;

    // Automatic Variable Declarations
    unitgroup auto7960B9F1_g;
    int auto7960B9F1_u;
    unit auto7960B9F1_var;

    // Implementation
    auto7960B9F1_g = lib90F7C81D_gv_heroesGroup;
    auto7960B9F1_u = UnitGroupCount(auto7960B9F1_g, c_unitCountAll);
    for (;; auto7960B9F1_u -= 1) {
        auto7960B9F1_var = UnitGroupUnitFromEnd(auto7960B9F1_g, auto7960B9F1_u);
        if (auto7960B9F1_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto7960B9F1_var, lp_option);
    }
    return true;
}

void lib90F7C81D_gf_CycleButton (unit lp_unit, abilcmd lp_autoCast, string lp_currentButton, string lp_nextButton) {
    // Automatic Variable Declarations
    // Implementation
    UnitIssueOrder(lp_unit, OrderSetAutoCast(lp_autoCast, false), c_orderQueueReplace);
    UnitAbilityShow(lp_unit, lp_currentButton, false);
    UnitAbilityShow(lp_unit, lp_nextButton, true);
}

string lib90F7C81D_gf_NextButton (string lp_ability) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_ability == "FirstAidKitSelfCast")) {
        return "AdvancedFirstAidKitSelfCast";
    }
    else if ((lp_ability == "AdvancedFirstAidKitSelfCast")) {
        return "QuikClotSelfCast";
    }
    else if ((lp_ability == "QuikClotSelfCast")) {
        return "AdvancedQuikClotSelfCast";
    }
    else if ((lp_ability == "AdvancedQuikClotSelfCast")) {
        return "AntiVeninSelfCast";
    }
    else if ((lp_ability == "AntiVeninSelfCast")) {
        return "AdvancedAntiVeninSelfCast";
    }
    else if ((lp_ability == "AdvancedAntiVeninSelfCast")) {
        return "EnergyCellSelfCast";
    }
    else if ((lp_ability == "EnergyCellSelfCast")) {
        return "SuperiorEnergyCellSelfCast";
    }
    else if ((lp_ability == "SuperiorEnergyCellSelfCast")) {
        return "FirstAidKitSelfCast";
    }
    else if ((lp_ability == "InfraredVision")) {
        return "NightVision";
    }
    else if ((lp_ability == "NightVision")) {
        return "InfraredVision";
    }
    else if ((lp_ability == "WeaponsHold3")) {
        return "CommandCardSwitch";
    }
    else if ((lp_ability == "CommandCardSwitch")) {
        return "WeaponsHold3";
    }
    else if ((lp_ability == "SetRallyPoint")) {
        return "RallyLocalNationals";
    }
    else if ((lp_ability == "RallyLocalNationals")) {
        return "OffensiveRally";
    }
    else if ((lp_ability == "OffensiveRally")) {
        return "SetRallyPoint";
    }
    else if ((lp_ability == "GapGenerator")) {
        return "InterferenceWave";
    }
    else if ((lp_ability == "InterferenceWave")) {
        return "GapGenerator";
    }
    return null;
}

fixed lib90F7C81D_gf_ReturnChargeCount (unit lp_item, string lp_chargestring, fixed lp_maxcharges) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_maxcharges - UnitGetChargeUsed(lp_item, lp_chargestring));
}

void lib90F7C81D_gf_UpdateStats (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_stat;

    // Automatic Variable Declarations
    const int autoC616D1C4_ae = 40;
    const int autoC616D1C4_ai = 1;
    const int autoC9ACA6A3_ae = 44;
    const int autoC9ACA6A3_ai = 1;

    // Variable Initialization

    // Implementation
    lib90F7C81D_gv_sTATS.lv_kills[lp_player] = PlayerScoreValueGetAsInt(lp_player, "UnitsKilledCount");
    if ((lib90F7C81D_gv_sTATS.lv_kills[lp_player] != lib90F7C81D_gv_sTATS.lv_tempKills[lp_player])) {
        lv_stat = (lib90F7C81D_gv_sTATS.lv_kills[lp_player] - lib90F7C81D_gv_sTATS.lv_tempKills[lp_player]);
        lib90F7C81D_gv_bankData.lv_totalKills[lp_player] += lv_stat;
        lib90F7C81D_gv_sTATS.lv_tempKills[lp_player] = lib90F7C81D_gv_sTATS.lv_kills[lp_player];
        lv_index = 36;
        for ( ; ( (autoC616D1C4_ai >= 0 && lv_index <= autoC616D1C4_ae) || (autoC616D1C4_ai < 0 && lv_index >= autoC616D1C4_ae) ) ; lv_index += autoC616D1C4_ai ) {
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][(lv_index - 27)], IntToText(lib90F7C81D_gv_bankData.lv_totalKills[lp_player]), PlayerGroupSingle(lp_player));
                if ((lv_index == 36) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalKills[lp_player] >= 25000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("God of War I", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 37) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalKills[lp_player] >= 50000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("God of War II", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 38) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalKills[lp_player] >= 100000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("God of War III", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 39) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalKills[lp_player] >= 250000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("God of War IV", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 40) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalKills[lp_player] >= 500000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("God of War V", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
            }
        }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "CombatMedic") && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[81][lp_player] == false) && (lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[7][lp_player] += lv_stat;
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[1][3], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[7][lp_player]), PlayerGroupSingle(lp_player));
            if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[7][lp_player] >= 300)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[81][lp_player] = true;
                lib90F7C81D_gf_FlashAchievementBadge("'Combat' Medic", lp_player);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[1][3], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            }
        }
    }
    lib90F7C81D_gv_sTATS.lv_massiveKills[lp_player] = PlayerScoreValueGetAsInt(lp_player, "MassiveKills");
    if ((lib90F7C81D_gv_sTATS.lv_massiveKills[lp_player] != lib90F7C81D_gv_sTATS.lv_tempMKills[lp_player])) {
        lv_stat = (lib90F7C81D_gv_sTATS.lv_massiveKills[lp_player] - lib90F7C81D_gv_sTATS.lv_tempMKills[lp_player]);
        lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player] += lv_stat;
        lib90F7C81D_gv_sTATS.lv_tempMKills[lp_player] = lib90F7C81D_gv_sTATS.lv_massiveKills[lp_player];
        lv_index = 41;
        for ( ; ( (autoC9ACA6A3_ai >= 0 && lv_index <= autoC9ACA6A3_ae) || (autoC9ACA6A3_ai < 0 && lv_index >= autoC9ACA6A3_ae) ) ; lv_index += autoC9ACA6A3_ai ) {
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][(lv_index - 27)], IntToText(lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player]), PlayerGroupSingle(lp_player));
                if ((lv_index == 41) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player] >= 100)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Killer Instinct I", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 42) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player] >= 250)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Killer Instinct II", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 43) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player] >= 500)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Killer Instinct III", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 44) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] == false) && (lib90F7C81D_gv_bankData.lv_totalMassiveKills[lp_player] >= 1000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][lp_player] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Killer Instinct IV", lp_player);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
                }
            }
        }
    }
    lib90F7C81D_gv_sTATS.lv_heals[lp_player] = PlayerScoreValueGetAsInt(lp_player, "LifeHealedTotal");
    if ((lib90F7C81D_gv_sTATS.lv_heals[lp_player] != lib90F7C81D_gv_sTATS.lv_tempHeals[lp_player])) {
        lv_stat = (lib90F7C81D_gv_sTATS.lv_heals[lp_player] - lib90F7C81D_gv_sTATS.lv_tempHeals[lp_player]);
        lib90F7C81D_gv_bankData.lv_totalHeals[lp_player] += lv_stat;
        lib90F7C81D_gv_sTATS.lv_tempHeals[lp_player] = lib90F7C81D_gv_sTATS.lv_heals[lp_player];
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[50][lp_player] == false) && (lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][7], IntToText(lib90F7C81D_gv_bankData.lv_totalHeals[lp_player]), PlayerGroupSingle(lp_player));
            if ((lib90F7C81D_gv_bankData.lv_totalHeals[lp_player] >= 500000)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[50][lp_player] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Trauma Queen", lp_player);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][7], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            }
        }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "CombatMedic") && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[80][lp_player] == false) && (lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[6][lp_player] += lv_stat;
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[1][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[6][lp_player]), PlayerGroupSingle(lp_player));
            if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[6][lp_player] >= 1000)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[80][lp_player] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Intern", lp_player);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[1][2], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            }
        }
    }
    if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "AutomaticRifleman") && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[84][lp_player] == false) && (lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
        lib90F7C81D_gv_sTATS.lv_roundsUsed[lp_player] = PlayerScoreValueGetAsInt(lp_player, "MineralsSpent");
        if ((lib90F7C81D_gv_sTATS.lv_roundsUsed[lp_player] != lib90F7C81D_gv_sTATS.lv_tempRoundsUsed[lp_player])) {
            lv_stat = (lib90F7C81D_gv_sTATS.lv_roundsUsed[lp_player] - lib90F7C81D_gv_sTATS.lv_tempRoundsUsed[lp_player]);
            lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[10][lp_player] += lv_stat;
            lib90F7C81D_gv_sTATS.lv_tempRoundsUsed[lp_player] = lib90F7C81D_gv_sTATS.lv_roundsUsed[lp_player];
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[2][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[10][lp_player]), PlayerGroupSingle(lp_player));
            if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[10][lp_player] >= 100000)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[84][lp_player] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Weapons Hot", lp_player);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[2][2], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
            }
        }
    }
}

int lib90F7C81D_gf_GetPingedPlayer (int lp_pingButton) {
    // Variable Declarations
    int lv_index;
    int lv_player;

    // Automatic Variable Declarations
    const int auto1B679BAE_ae = 12;
    const int auto1B679BAE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto1B679BAE_ai >= 0 && lv_index <= auto1B679BAE_ae) || (auto1B679BAE_ai < 0 && lv_index >= auto1B679BAE_ae) ) ; lv_index += auto1B679BAE_ai ) {
        if ((lp_pingButton == lib90F7C81D_gv_sDPingPlayerButton[lv_index]) && (PlayerGroupHasPlayer(lib90F7C81D_gv_players, lv_index) == true)) {
            lv_player = lv_index;
            break;
        }
    }
    return lv_player;
}

void lib90F7C81D_gf_UpdateSDInventory (int lp_player) {
    // Variable Declarations
    int lv_index;
    string lv_itemImage;
    int lv_min;
    int lv_max;

    // Automatic Variable Declarations
    int autoD09B7A8B_ae;
    const int autoD09B7A8B_ai = 1;
    const int auto269A02E5_ae = 7;
    const int auto269A02E5_ai = 1;

    // Variable Initialization
    lv_itemImage = "";

    // Implementation
    if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) != "CavalryScout")) {
        lv_index = 0;
        for ( ; ( (auto269A02E5_ai >= 0 && lv_index <= auto269A02E5_ae) || (auto269A02E5_ai < 0 && lv_index >= auto269A02E5_ae) ) ; lv_index += auto269A02E5_ai ) {
            if ((UnitInventoryItem(lib90F7C81D_gv_playerHeroes[lp_player], (lv_index + 1)) == null)) {
                libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerInventorySlot[lv_index][lp_player], "Assets\\Textures\\black.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPlayerInventorySlot[lv_index][lp_player], StringToText(""), PlayerGroupAll());
            }
            else {
                lv_itemImage = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(UnitInventoryItem(lib90F7C81D_gv_playerHeroes[lp_player], (lv_index + 1))), "EquipmentArray[" + IntToString(0) + "].Icon", lp_player);
                libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerInventorySlot[lv_index][lp_player], (lv_itemImage), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPlayerInventorySlot[lv_index][lp_player], UnitTypeGetName(UnitGetType(UnitInventoryItem(lib90F7C81D_gv_playerHeroes[lp_player], (lv_index + 1)))), PlayerGroupAll());
            }
        }
    }
    else {
        lv_min = (7 - lib90F7C81D_gv_mOSAchievements.lv_cS_Bandolier[lp_player]);
        lv_max = (14 - lib90F7C81D_gv_mOSAchievements.lv_cS_Bandolier[lp_player]);
        autoD09B7A8B_ae = lv_max;
        lv_index = lv_min;
        for ( ; ( (autoD09B7A8B_ai >= 0 && lv_index <= autoD09B7A8B_ae) || (autoD09B7A8B_ai < 0 && lv_index >= autoD09B7A8B_ae) ) ; lv_index += autoD09B7A8B_ai ) {
            if ((UnitInventoryItem(lib90F7C81D_gv_playerHeroes[lp_player], lv_index) == null)) {
                libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerInventorySlot[(lv_index - lv_min)][lp_player], "Assets\\Textures\\black.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPlayerInventorySlot[(lv_index - lv_min)][lp_player], StringToText(""), PlayerGroupAll());
            }
            else {
                lv_itemImage = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(UnitInventoryItem(lib90F7C81D_gv_playerHeroes[lp_player], lv_index)), "EquipmentArray[" + IntToString(0) + "].Icon", lp_player);
                libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerInventorySlot[(lv_index - lv_min)][lp_player], (lv_itemImage), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPlayerInventorySlot[(lv_index - lv_min)][lp_player], UnitTypeGetName(UnitGetType(UnitInventoryItem(lib90F7C81D_gv_playerHeroes[lp_player], lv_index))), PlayerGroupAll());
            }
        }
    }
}

void lib90F7C81D_gf_DisplayReviveProgressBar (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HealthBar", lib90F7C81D_gv_deadHeroIndicator[lp_player]);
    lib90F7C81D_gv_revive_Bar[lp_player] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "Percent", lib90F7C81D_gv_deadHeroIndicator[lp_player]);
    lib90F7C81D_gv_revive_Counter_Label[lp_player] = DialogControlLastCreated();
}

void lib90F7C81D_gf_HideReviveProgressBar (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lib90F7C81D_gv_deadHeroIndicator[lp_player], "ReviveBase15", 1);
    UnitBehaviorAdd(lib90F7C81D_gv_deadHeroIndicator[lp_player], "PlayerLeftGame", lib90F7C81D_gv_deadHeroIndicator[lp_player], 1);
    UnitBehaviorRemove(lib90F7C81D_gv_deadHeroIndicator[lp_player], "HeroIsDead", 1);
}

trigger auto_lib90F7C81D_gf_UpdateRevivePenalty_Trigger = null;
int auto_lib90F7C81D_gf_UpdateRevivePenalty_lp_player;
int auto_lib90F7C81D_gf_UpdateRevivePenalty_lp_penalty;

void lib90F7C81D_gf_UpdateRevivePenalty (int lp_player, int lp_penalty) {
    auto_lib90F7C81D_gf_UpdateRevivePenalty_lp_player = lp_player;
    auto_lib90F7C81D_gf_UpdateRevivePenalty_lp_penalty = lp_penalty;

    if (auto_lib90F7C81D_gf_UpdateRevivePenalty_Trigger == null) {
        auto_lib90F7C81D_gf_UpdateRevivePenalty_Trigger = TriggerCreate("auto_lib90F7C81D_gf_UpdateRevivePenalty_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_UpdateRevivePenalty_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_UpdateRevivePenalty_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib90F7C81D_gf_UpdateRevivePenalty_lp_player;
    int lp_penalty = auto_lib90F7C81D_gf_UpdateRevivePenalty_lp_penalty;

    // Variable Declarations
    int lv_durationLabel;
    fixed lv_timeRemaining;

    // Automatic Variable Declarations
    int auto33C1FB5B_n;
    int auto33C1FB5B_i;

    // Variable Initialization
    lv_durationLabel = c_invalidDialogControlId;

    // Implementation
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sDTimer[lp_player], IntToText(lp_penalty), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Timer[lp_player], IntToText(lp_penalty), PlayerGroupAll());
    DialogControlHookupUnitStatus(c_triggerControlTypeCountdownLabel, "Penalty", lib90F7C81D_gv_deadHeroIndicator[lp_player]);
    lv_durationLabel = DialogControlLastCreated();
    libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_deadHeroIndicator[lp_player], "SetTintColor {0,0,0 0.000000}");
    UnitBehaviorAdd(lib90F7C81D_gv_deadHeroIndicator[lp_player], "ReviveBase15", lib90F7C81D_gv_deadHeroIndicator[lp_player], 1);
    UnitBehaviorSetDuration(lib90F7C81D_gv_deadHeroIndicator[lp_player], "ReviveBase15", IntToFixed(lp_penalty));
    auto33C1FB5B_n = lp_penalty;
    for (auto33C1FB5B_i = 1; auto33C1FB5B_i <= auto33C1FB5B_n; auto33C1FB5B_i += 1) {
        lv_timeRemaining = UnitBehaviorDuration(lib90F7C81D_gv_deadHeroIndicator[lp_player], "ReviveBase15");
        libNtve_gf_SetDialogItemText(lv_durationLabel, FixedToText(lv_timeRemaining, 0), PlayerGroupAll());
        DialogControlSendAnimationEvent(lv_durationLabel, PlayerGroupAll(), "Animate");
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sDTimer[lp_player], FixedToText(lv_timeRemaining, 0), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Timer[lp_player], FixedToText(lv_timeRemaining, 0), PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    DialogControlDestroy(lv_durationLabel);
    lv_durationLabel = c_invalidDialogControlId;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sDTimer[lp_player], IntToText(lib90F7C81D_gv_reviveCountdown_Label[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Timer[lp_player], IntToText(lib90F7C81D_gv_reviveCountdown_Label[lp_player]), PlayerGroupAll());
    if ((lib90F7C81D_gv_playerLeftGame[lp_player] == false)) {
        libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_deadHeroIndicator[lp_player], "SetTintColor 255,255,255 2.000000");
    }

    return true;
}

void lib90F7C81D_gf_VoteButtonSetup (int lp_player) {
    // Variable Declarations
    int lv_hook;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hook = c_invalidDialogControlId;

    // Implementation
    if ((!(lib90F7C81D_gf_DevHandles(PlayerHandle(lp_player))))) {
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/VoteKickFrame/Player" + IntToString(lp_player)));
        lv_hook = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_hook, PlayerGroupAll(), "NotDev", IntToString(lp_player));
        DialogControlSetEnabled(lv_hook, PlayerGroupSingle(lp_player), false);
    }

    if (((PlayerGroupCount(lib90F7C81D_gv_players) <= 4) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10))) {
        DialogControlSetAnimationState(lib90F7C81D_gv_voteKick.lv_vKB, PlayerGroupSingle(lp_player), "Lock", "Menu");
    }

    lv_hook = c_invalidDialogControlId;
}

trigger auto_lib90F7C81D_gf_VotekickCooldown_Trigger = null;
int auto_lib90F7C81D_gf_VotekickCooldown_lp_player;

void lib90F7C81D_gf_VotekickCooldown (int lp_player) {
    auto_lib90F7C81D_gf_VotekickCooldown_lp_player = lp_player;

    if (auto_lib90F7C81D_gf_VotekickCooldown_Trigger == null) {
        auto_lib90F7C81D_gf_VotekickCooldown_Trigger = TriggerCreate("auto_lib90F7C81D_gf_VotekickCooldown_TriggerFunc");
    }

    TriggerExecute(auto_lib90F7C81D_gf_VotekickCooldown_Trigger, false, false);
}

bool auto_lib90F7C81D_gf_VotekickCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib90F7C81D_gf_VotekickCooldown_lp_player;

    // Variable Declarations
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lib90F7C81D_gv_voteKick.lv_cooldown[lp_player] > 1.0)) {
        Wait(1.0, c_timeReal);
        lib90F7C81D_gv_voteKick.lv_cooldown[lp_player] -= 1.0;
    }
    lib90F7C81D_gv_voteKick.lv_voteKickCooldown[lp_player] = false;
    lib90F7C81D_gv_voteKick.lv_cooldown[lp_player] = 15.0;
    return true;
}

int lib90F7C81D_gf_ImageIndex (string lp_mOSImage) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto5EA3E64A_ae;
    const int auto5EA3E64A_ai = 1;

    // Variable Initialization

    // Implementation
    auto5EA3E64A_ae = UserDataInstanceCount("MOSSetup");
    lv_index = 1;
    for ( ; ( (auto5EA3E64A_ai >= 0 && lv_index <= auto5EA3E64A_ae) || (auto5EA3E64A_ai < 0 && lv_index >= auto5EA3E64A_ae) ) ; lv_index += auto5EA3E64A_ai ) {
        if ((UserDataGetImagePath("MOSSetup", UserDataInstance("MOSSetup", lv_index), "MOS Image", 1) == lp_mOSImage)) {
            return lv_index;
        }
    }
    return 0;
}

void lib90F7C81D_gf_HookUIToHero (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueEnable(lp_player, "LifeHealedTotal", true);
    PlayerScoreValueEnable(lp_player, "MineralsSpent", true);
    PlayerScoreValueEnable(lp_player, "LifeDamageDealtTotal", true);
    PlayerScoreValueEnable(lp_player, "ShieldsDamageDealtTotal", true);
    PlayerScoreValueEnable(lp_player, "LifeDamageTakenTotal", true);
    libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Image[lp_player], lib90F7C81D_gv_playerHeroImage[lp_player], PlayerGroupAll());
    if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "SquadDesignatedMarksman")) {
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_MOS_Label[lp_player], StringExternal("Param/Value/lib_90F7C81D_4F568963"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_MOS_Label[lp_player], UnitGetName(lib90F7C81D_gv_playerHeroes[lp_player]), PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemUnit(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Status[lp_player], lib90F7C81D_gv_playerHeroes[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Hits[lp_player], IntToText(lib90F7C81D_gv_sTATS.lv_hits[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Deaths[lp_player], IntToText(lib90F7C81D_gv_sTATS.lv_deaths[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Revive_Points[lp_player], IntToText(lib90F7C81D_gv_sTATS.lv_revivePoints[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Movement_Speed[lp_player], FixedToText(UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[lp_player], c_unitPropMovementSpeed, c_unitPropCurrent), 2), PlayerGroupAll());
    DialogControlSetVisible(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame[lp_player], PlayerGroupAll(), true);
    DialogControlSetVisible(lib90F7C81D_gv_learnSkillsLabel[lp_player], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(lib90F7C81D_gv_skillUpgradesLabel[lp_player], PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerImageFrame[lp_player], lib90F7C81D_gv_playerHeroImage[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemUnit(lib90F7C81D_gv_sDPlayerUnitStatusFrame[lp_player], lib90F7C81D_gv_playerHeroes[lp_player], PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sDPlayerNameFrame[lp_player], TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))), PlayerGroupAll());
    UnitGroupAdd(lib90F7C81D_gv_commandCard.lv_cCGroup[lp_player], lib90F7C81D_gv_commandCard.lv_selfCastUnit[lp_player]);
    libNtve_gf_SetDialogItemUnitGroup(lib90F7C81D_gv_commandCard.lv_selfCastCC[lp_player], lib90F7C81D_gv_commandCard.lv_cCGroup[lp_player], PlayerGroupSingle(lp_player));
    UnitGroupAdd(lib90F7C81D_gv_inventory.lv_hotkey_group[lp_player], lib90F7C81D_gv_inventory.lv_hotkey_unit[lp_player]);
    libNtve_gf_SetDialogItemUnitGroup(lib90F7C81D_gv_inventory.lv_hotkey_panel, lib90F7C81D_gv_inventory.lv_hotkey_group[lp_player], PlayerGroupSingle(lp_player));
    DialogControlSetAnimationState(lib90F7C81D_gv_uIicon, PlayerGroupSingle(lp_player), "Image", IntToString(lib90F7C81D_gf_ImageIndex(lib90F7C81D_gv_playerHeroImage[lp_player])));
}

void lib90F7C81D_gf_DisplayUI (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeResourcePanel, lp_showHide);
    DialogControlSetVisible(lib90F7C81D_gv_cameraButton, PlayerGroupSingle(lp_player), lp_showHide);
    DialogControlSetVisible(lib90F7C81D_gv_lS_Container, PlayerGroupSingle(lp_player), lp_showHide);
    DialogControlSetVisible(lib90F7C81D_gv_sU_Container, PlayerGroupSingle(lp_player), lp_showHide);
    DialogControlSetVisible(lib90F7C81D_gv_dC_Container, PlayerGroupSingle(lp_player), lp_showHide);
    DialogControlSetVisible(lib90F7C81D_gv_sD_Container, PlayerGroupSingle(lp_player), lp_showHide);
    DialogControlSetVisible(lib90F7C81D_gv_sTATS.lv_hUDButton, PlayerGroupSingle(lp_player), lp_showHide);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeConsolePanel, lp_showHide);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeCommandPanel, lp_showHide);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeMinimapPanel, lp_showHide);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeMenuBar, lp_showHide);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeControlGroupPanel, lp_showHide);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeMissionTimePanel, lp_showHide);
    if ((lp_showHide == false)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lp_player], PlayerGroupSingle(lp_player), "State", "Off");
    }
    else {
        DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lp_player], PlayerGroupSingle(lp_player), "State", "On");
    }
}

void lib90F7C81D_gf_SetUIState () {
    // Automatic Variable Declarations
    playergroup autoA86F6C4F_g;
    int autoA86F6C4F_var;

    // Implementation
    autoA86F6C4F_g = lib90F7C81D_gv_players;
    autoA86F6C4F_var = -1;
    while (true) {
        autoA86F6C4F_var = PlayerGroupNextPlayer(autoA86F6C4F_g, autoA86F6C4F_var);
        if (autoA86F6C4F_var < 0) { break; }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[autoA86F6C4F_var]) == "CombatMedic")) {
            TechTreeUpgradeAddLevel(autoA86F6C4F_var, "MedicRevivesSupaFastBiatch", 1);
        }
        else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[autoA86F6C4F_var]) == "Flamethrower")) {
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_commandCard.lv_unitIndexLabel, StringExternal("Param/Value/lib_90F7C81D_2335EADF"), PlayerGroupSingle(autoA86F6C4F_var));
            CatalogFieldValueSet(c_gameCatalogButton, "Reload", "Icon", autoA86F6C4F_var, ("Assets\\Buttons\\Flamethrower_Reload.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "Reload", "Tooltip", autoA86F6C4F_var, "Reload your weapon. Discards current fuel.");
            CatalogFieldValueSet(c_gameCatalogButton, "Reload3", "Icon", autoA86F6C4F_var, ("Assets\\Buttons\\Flamethrower_Reload.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "Reload3", "Tooltip", autoA86F6C4F_var, "Reload your weapon. Discards current fuel.");
            CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Name", autoA86F6C4F_var, "Drop Fuel Tank");
            CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Icon", autoA86F6C4F_var, ("Assets\\Buttons\\Flamethrower_Drop_Fuel.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Tooltip", autoA86F6C4F_var, "Drops fuel tanks into your inventory.");
            CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Name", autoA86F6C4F_var, "Fuel Tanks");
            CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Icon", autoA86F6C4F_var, ("Assets\\Textures\\btn-upgrade-tychus-firebat-wildflamefuel.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Tooltip", autoA86F6C4F_var, "Adds 3 fuel tanks when used.<n/><c val=\"FF8000\">Will become encumbered if over 18 fuel tanks are readied.</c>");
            CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Name", autoA86F6C4F_var, "Fuel Crate");
            CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Icon", autoA86F6C4F_var, ("Assets\\Textures\\btn-upgrade-tychus-firebat-highcapacity.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Tooltip", autoA86F6C4F_var, "Holds up to 10 fuel tanks. Adds fuel tanks when used.<n/><c val=\"FF8000\">Will become encumbered if over 18  fuel tanks are readied.</c>");
        }
        else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[autoA86F6C4F_var]) == "GhostMOS")) {
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_commandCard.lv_unitIndexLabel, StringExternal("Param/Value/lib_90F7C81D_A9A8081D"), PlayerGroupSingle(autoA86F6C4F_var));
            CatalogFieldValueSet(c_gameCatalogButton, "Reload", "Icon", autoA86F6C4F_var, ("Assets\\Buttons\\Plasma_Reload.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "Reload", "Tooltip", autoA86F6C4F_var, "Reload your weapon. Discards current plasma rounds.");
            CatalogFieldValueSet(c_gameCatalogButton, "Reload3", "Icon", autoA86F6C4F_var, ("Assets\\Buttons\\Plasma_Reload.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "Reload3", "Tooltip", autoA86F6C4F_var, "Reload your weapon. Discards current plasma rounds.");
            CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Name", autoA86F6C4F_var, "Drop Plasma Cell");
            CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Icon", autoA86F6C4F_var, ("Assets\\Buttons\\Plasma_Drop.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Tooltip", autoA86F6C4F_var, "Drops plasma cells into your inventory");
            CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Name", autoA86F6C4F_var, "Plasma Cells");
            CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Icon", autoA86F6C4F_var, ("Assets\\Buttons\\Plasma_Cells.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Tooltip", autoA86F6C4F_var, "Adds 3 plasma cells when used.<n/><c val=\"FF8000\">Will become encumbered if over 15 plasma cells are readied.</c>");
            CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Name", autoA86F6C4F_var, "Plasma Crate");
            CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Icon", autoA86F6C4F_var, ("Assets\\Buttons\\Plasma_Cell_Pack.dds"));
            CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Tooltip", autoA86F6C4F_var, "Holds up to 10 plasma cells. Adds plasma cartridges when used.<n/><c val=\"FF8000\">Will become encumbered if over 15 plasma cells are readied.</c>");
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Periodic Weather Event
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PeriodicWeatherEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_weather.lv_weatherEventOn == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    lib90F7C81D_gf_RunWeatherEvent("RandomWeather");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PeriodicWeatherEvent_Init () {
    lib90F7C81D_gt_PeriodicWeatherEvent = TriggerCreate("lib90F7C81D_gt_PeriodicWeatherEvent_Func");
    TriggerEnable(lib90F7C81D_gt_PeriodicWeatherEvent, false);
    TriggerAddEventTimePeriodic(lib90F7C81D_gt_PeriodicWeatherEvent, RandomFixed(180.0, 240.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Random Weather Event
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_RandomWeatherEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE8F7049B_val;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(lib90F7C81D_gt_PeriodicWeatherEvent) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weather.lv_randomWeatherChance = ((lib90F7C81D_gv_weather.lv_randomWeatherChance + RandomInt(1, 5)) % 6);
    autoE8F7049B_val = lib90F7C81D_gv_weather.lv_randomWeatherChance;
    if (autoE8F7049B_val == 1) {
        lib90F7C81D_gf_RunWeatherEvent("Fog");
    }
    else if (autoE8F7049B_val == 2) {
        lib90F7C81D_gf_RunWeatherEvent("BloodMoon");
    }
    else if (autoE8F7049B_val == 3) {
        lib90F7C81D_gf_RunWeatherEvent("RainStorm");
    }
    else if (autoE8F7049B_val == 4) {
        lib90F7C81D_gf_RunWeatherEvent("Snow");
    }
    else if (autoE8F7049B_val == 5) {
        lib90F7C81D_gf_RunWeatherEvent("IntenseSunlight");
    }
    else if (autoE8F7049B_val == 6) {
    }
    else {
        lib90F7C81D_gf_RunWeatherEvent("Cloudy");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_RandomWeatherEvent_Init () {
    lib90F7C81D_gt_RandomWeatherEvent = TriggerCreate("lib90F7C81D_gt_RandomWeatherEvent_Func");
    lib90F7C81D_gf_WeatherEvent(lib90F7C81D_gt_RandomWeatherEvent, "RandomWeather");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fog Event
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FogEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBC714472_g;
    int autoBC714472_var;
    playergroup auto2A9AC9E1_g;
    int auto2A9AC9E1_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_weatherEventOn == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_fogEvent == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weather.lv_fogChance = ((lib90F7C81D_gv_weather.lv_fogChance + RandomInt(1, 5)) % 6);
    if ((lib90F7C81D_gv_weather.lv_fogChance == 0)) {
        lib90F7C81D_gv_weather.lv_weatherEventOn = true;
        lib90F7C81D_gv_weather.lv_fogEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Fog");
        DialogControlSendAnimationEvent(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Flash");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_88C252EC"));
        autoBC714472_g = PlayerGroupAll();
        autoBC714472_var = -1;
        while (true) {
            autoBC714472_var = PlayerGroupNextPlayer(autoBC714472_g, autoBC714472_var);
            if (autoBC714472_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoBC714472_var, "WeatherEffectFog", 1);
        }
        lib90F7C81D_gf_BlendFog(50.0, 50.0, 50.0, 0.86, 1.0, 8.0, 15.0);
        Wait(RandomFixed(215.0, 495.0), c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_EFD09D1C"));
        lib90F7C81D_gf_BlendFog(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 15.0);
        Wait(5.0, c_timeGame);
        lib90F7C81D_gf_ResetWeatherIcon();
        auto2A9AC9E1_g = PlayerGroupAll();
        auto2A9AC9E1_var = -1;
        while (true) {
            auto2A9AC9E1_var = PlayerGroupNextPlayer(auto2A9AC9E1_g, auto2A9AC9E1_var);
            if (auto2A9AC9E1_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto2A9AC9E1_var, "WeatherEffectFog", 0);
        }
        lib90F7C81D_gv_weather.lv_weatherEventOn = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FogEvent_Init () {
    lib90F7C81D_gt_FogEvent = TriggerCreate("lib90F7C81D_gt_FogEvent_Func");
    lib90F7C81D_gf_WeatherEvent(lib90F7C81D_gt_FogEvent, "Fog");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rainstorm Event
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_RainstormEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9D4B7BF7_g;
    int auto9D4B7BF7_var;
    playergroup auto32E6F57C_g;
    int auto32E6F57C_var;
    playergroup auto959A2E3A_g;
    int auto959A2E3A_var;
    playergroup auto5A61D52B_g;
    int auto5A61D52B_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_weatherEventOn == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_weatherEventOn == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weather.lv_rainstormChance = ((lib90F7C81D_gv_weather.lv_rainstormChance + RandomInt(1, 5)) % 6);
    if ((lib90F7C81D_gv_weather.lv_rainstormChance == 0)) {
        lib90F7C81D_gv_weather.lv_weatherEventOn = true;
        lib90F7C81D_gv_weather.lv_rainstormEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Rainstorm");
        DialogControlSendAnimationEvent(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Flash");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_713487D7"));
        auto9D4B7BF7_g = lib90F7C81D_gv_players;
        auto9D4B7BF7_var = -1;
        while (true) {
            auto9D4B7BF7_var = PlayerGroupNextPlayer(auto9D4B7BF7_g, auto9D4B7BF7_var);
            if (auto9D4B7BF7_var < 0) { break; }
            lib90F7C81D_gv_reloadbasetime[auto9D4B7BF7_var] *= 1.25;
            lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[auto9D4B7BF7_var]);
        }
        auto32E6F57C_g = PlayerGroupAll();
        auto32E6F57C_var = -1;
        while (true) {
            auto32E6F57C_var = PlayerGroupNextPlayer(auto32E6F57C_g, auto32E6F57C_var);
            if (auto32E6F57C_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto32E6F57C_var, "WeatherEffectRainstorm", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 100.0, 100.0, "RainSprinkle", 12.0, RegionPlayableMap(), 4.0);
        DialogControlSetAnimationState(lib90F7C81D_gv_weather.lv_weatherFrame, PlayerGroupAll(), "Weather", "Rainstorm");
        Wait(RandomFixed(215.0, 495.0), c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_DB38D8A0"));
        lib90F7C81D_gf_UnblendWeather();
        Wait(5.0, c_timeGame);
        lib90F7C81D_gf_ResetWeatherIcon();
        auto959A2E3A_g = PlayerGroupAll();
        auto959A2E3A_var = -1;
        while (true) {
            auto959A2E3A_var = PlayerGroupNextPlayer(auto959A2E3A_g, auto959A2E3A_var);
            if (auto959A2E3A_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto959A2E3A_var, "WeatherEffectRainstorm", 0);
        }
        auto5A61D52B_g = lib90F7C81D_gv_players;
        auto5A61D52B_var = -1;
        while (true) {
            auto5A61D52B_var = PlayerGroupNextPlayer(auto5A61D52B_g, auto5A61D52B_var);
            if (auto5A61D52B_var < 0) { break; }
            lib90F7C81D_gv_reloadbasetime[auto5A61D52B_var] /= 1.25;
            lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[auto5A61D52B_var]);
        }
        lib90F7C81D_gv_weather.lv_weatherEventOn = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_RainstormEvent_Init () {
    lib90F7C81D_gt_RainstormEvent = TriggerCreate("lib90F7C81D_gt_RainstormEvent_Func");
    lib90F7C81D_gf_WeatherEvent(lib90F7C81D_gt_RainstormEvent, "RainStorm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Snow Event
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SnowEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto71C49CD5_g;
    int auto71C49CD5_var;
    playergroup auto88807A1C_g;
    int auto88807A1C_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_weatherEventOn == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_snowEvent == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weather.lv_snowChance = ((lib90F7C81D_gv_weather.lv_snowChance + RandomInt(1, 5)) % 6);
    if ((lib90F7C81D_gv_weather.lv_snowChance == 0)) {
        lib90F7C81D_gv_weather.lv_weatherEventOn = true;
        lib90F7C81D_gv_weather.lv_snowEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Snow");
        DialogControlSendAnimationEvent(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Flash");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_B11E2FE7"));
        auto71C49CD5_g = PlayerGroupAll();
        auto71C49CD5_var = -1;
        while (true) {
            auto71C49CD5_var = PlayerGroupNextPlayer(auto71C49CD5_g, auto71C49CD5_var);
            if (auto71C49CD5_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto71C49CD5_var, "WeatherEffectSnow", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 100.0, 100.0, "SnowLight", 16.0, RegionPlayableMap(), 4.0);
        DialogControlSetAnimationState(lib90F7C81D_gv_weather.lv_weatherFrame, PlayerGroupAll(), "Weather", "Snowstorm");
        Wait(RandomFixed(215.0, 495.0), c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_0BB2DD3A"));
        lib90F7C81D_gf_UnblendWeather();
        Wait(5.0, c_timeGame);
        lib90F7C81D_gf_ResetWeatherIcon();
        auto88807A1C_g = PlayerGroupAll();
        auto88807A1C_var = -1;
        while (true) {
            auto88807A1C_var = PlayerGroupNextPlayer(auto88807A1C_g, auto88807A1C_var);
            if (auto88807A1C_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto88807A1C_var, "WeatherEffectSnow", 0);
        }
        lib90F7C81D_gv_weather.lv_weatherEventOn = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SnowEvent_Init () {
    lib90F7C81D_gt_SnowEvent = TriggerCreate("lib90F7C81D_gt_SnowEvent_Func");
    lib90F7C81D_gf_WeatherEvent(lib90F7C81D_gt_SnowEvent, "Snow");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloudy Event
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_CloudyEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto52DA8948_g;
    int auto52DA8948_var;
    playergroup auto60470758_g;
    int auto60470758_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_weatherEventOn == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_cloudyEvent == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weather.lv_cloudyChance = ((lib90F7C81D_gv_weather.lv_cloudyChance + RandomInt(1, 5)) % 6);
    if ((lib90F7C81D_gv_weather.lv_cloudyChance == 0)) {
        lib90F7C81D_gv_weather.lv_weatherEventOn = true;
        lib90F7C81D_gv_weather.lv_cloudyEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "Cloudy");
        DialogControlSendAnimationEvent(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Flash");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_6700B60F"));
        auto52DA8948_g = PlayerGroupAll();
        auto52DA8948_var = -1;
        while (true) {
            auto52DA8948_var = PlayerGroupNextPlayer(auto52DA8948_g, auto52DA8948_var);
            if (auto52DA8948_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto52DA8948_var, "WeatherEffectCloudy", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 100.0, 100.0, "SnowWind", 10.0, RegionPlayableMap(), 4.0);
        Wait(RandomFixed(215.0, 495.0), c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_DA2830E2"));
        lib90F7C81D_gf_UnblendWeather();
        Wait(5.0, c_timeGame);
        lib90F7C81D_gf_ResetWeatherIcon();
        auto60470758_g = PlayerGroupAll();
        auto60470758_var = -1;
        while (true) {
            auto60470758_var = PlayerGroupNextPlayer(auto60470758_g, auto60470758_var);
            if (auto60470758_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto60470758_var, "WeatherEffectCloudy", 0);
        }
        lib90F7C81D_gv_weather.lv_weatherEventOn = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_CloudyEvent_Init () {
    lib90F7C81D_gt_CloudyEvent = TriggerCreate("lib90F7C81D_gt_CloudyEvent_Func");
    lib90F7C81D_gf_WeatherEvent(lib90F7C81D_gt_CloudyEvent, "Cloudy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intense Sunlight Event
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_IntenseSunlightEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto52FC2679_g;
    int auto52FC2679_var;
    playergroup auto203A637D_g;
    int auto203A637D_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_weather.lv_weatherEventOn == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_intenseSunlightEvent == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_nightTime == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weather.lv_intenseSunlightChance = ((lib90F7C81D_gv_weather.lv_intenseSunlightChance + RandomInt(1, 5)) % 6);
    if ((lib90F7C81D_gv_weather.lv_intenseSunlightChance == 0)) {
        lib90F7C81D_gv_weather.lv_weatherEventOn = true;
        lib90F7C81D_gv_weather.lv_intenseSunlightEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "IntenseSunlight");
        DialogControlSendAnimationEvent(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Flash");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_3FC4AD4F"));
        auto52FC2679_g = PlayerGroupAll();
        auto52FC2679_var = -1;
        while (true) {
            auto52FC2679_var = PlayerGroupNextPlayer(auto52FC2679_g, auto52FC2679_var);
            if (auto52FC2679_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto52FC2679_var, "WeatherEffectIntenseSunlight", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 100.0, 100.0, "Sunrays", 8.0, RegionPlayableMap(), 4.0);
        Wait(RandomFixed(215.0, 495.0), c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_119426E6"));
        lib90F7C81D_gf_UnblendWeather();
        Wait(5.0, c_timeGame);
        lib90F7C81D_gf_ResetWeatherIcon();
        auto203A637D_g = PlayerGroupAll();
        auto203A637D_var = -1;
        while (true) {
            auto203A637D_var = PlayerGroupNextPlayer(auto203A637D_g, auto203A637D_var);
            if (auto203A637D_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto203A637D_var, "WeatherEffectIntenseSunlight", 0);
        }
        lib90F7C81D_gv_weather.lv_weatherEventOn = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_IntenseSunlightEvent_Init () {
    lib90F7C81D_gt_IntenseSunlightEvent = TriggerCreate("lib90F7C81D_gt_IntenseSunlightEvent_Func");
    lib90F7C81D_gf_WeatherEvent(lib90F7C81D_gt_IntenseSunlightEvent, "IntenseSunlight");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blood Moon Event
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_BloodMoonEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEF83433F_g;
    int autoEF83433F_var;
    playergroup autoBA75A393_g;
    int autoBA75A393_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_weatherEventOn == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_weather.lv_bloodMoonEvent == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weather.lv_intenseMoonlightChance = ((lib90F7C81D_gv_weather.lv_intenseMoonlightChance + RandomInt(1, 5)) % 6);
    if ((lib90F7C81D_gv_weather.lv_intenseMoonlightChance == 0)) {
        lib90F7C81D_gv_weather.lv_weatherEventOn = true;
        lib90F7C81D_gv_weather.lv_bloodMoonEvent = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Weather", "BloodMoon");
        DialogControlSendAnimationEvent(lib90F7C81D_gv_weatherEvent, PlayerGroupAll(), "Flash");
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_0D3D3D5E"));
        autoEF83433F_g = PlayerGroupAll();
        autoEF83433F_var = -1;
        while (true) {
            autoEF83433F_var = PlayerGroupNextPlayer(autoEF83433F_g, autoEF83433F_var);
            if (autoEF83433F_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoEF83433F_var, "WeatherEffectIntenseMoonlight", 1);
        }
        lib90F7C81D_gf_BlendWeather(100.0, 0.0, 0.0, "Sunrays", 8.0, RegionPlayableMap(), 4.0);
        Wait(RandomFixed(215.0, 495.0), c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/lib_90F7C81D_80BFFCA8"));
        lib90F7C81D_gf_UnblendWeather();
        Wait(5.0, c_timeGame);
        autoBA75A393_g = PlayerGroupAll();
        autoBA75A393_var = -1;
        while (true) {
            autoBA75A393_var = PlayerGroupNextPlayer(autoBA75A393_g, autoBA75A393_var);
            if (autoBA75A393_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoBA75A393_var, "WeatherEffectIntenseMoonlight", 0);
        }
        lib90F7C81D_gf_ResetWeatherIcon();
        lib90F7C81D_gv_weather.lv_weatherEventOn = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_BloodMoonEvent_Init () {
    lib90F7C81D_gt_BloodMoonEvent = TriggerCreate("lib90F7C81D_gt_BloodMoonEvent_Func");
    lib90F7C81D_gf_WeatherEvent(lib90F7C81D_gt_BloodMoonEvent, "BloodMoon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RA Sprint Ability
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_RASprintAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityRemove(EventUnit(), "NPCSprint");
    UnitAbilityAdd(EventUnit(), "NPCRASprint");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_RASprintAbility_Init () {
    lib90F7C81D_gt_RASprintAbility = TriggerCreate("lib90F7C81D_gt_RASprintAbility_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_RASprintAbility, null, "RASprintAbility", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Quits
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PlayerQuits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib90F7C81D_gv_victory)) {
        GameOver(EventPlayer(), c_gameOverVictory, false, true);
    }
    else {
        GameOver(EventPlayer(), c_gameOverDefeat, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PlayerQuits_Init () {
    lib90F7C81D_gt_PlayerQuits = TriggerCreate("lib90F7C81D_gt_PlayerQuits_Func");
    TriggerAddEventGameMenuItemSelected(lib90F7C81D_gt_PlayerQuits, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Hit Stat
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PlayerHitStat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_damagedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_damagedPlayer = UnitGetOwner(lv_hero);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib90F7C81D_gv_heroesGroup, lv_hero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_sTATS.lv_hits[lv_damagedPlayer] += 1;
    lib90F7C81D_gv_bankData.lv_totalHits[lv_damagedPlayer] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Hits[lv_damagedPlayer], IntToText(lib90F7C81D_gv_sTATS.lv_hits[lv_damagedPlayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][9], IntToText(lib90F7C81D_gv_bankData.lv_totalHits[lv_damagedPlayer]), PlayerGroupSingle(lv_damagedPlayer));
    lv_hero = null;
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[35][lv_damagedPlayer] == false) && (lib90F7C81D_gv_bankData.lv_totalHits[lv_damagedPlayer] >= 10000)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[35][lv_damagedPlayer] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Most Impressive", lv_damagedPlayer);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][35], PlayerGroupSingle(lv_damagedPlayer), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PlayerHitStat_Init () {
    lib90F7C81D_gt_PlayerHitStat = TriggerCreate("lib90F7C81D_gt_PlayerHitStat_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_PlayerHitStat, c_playerAny, "UpdateHitStat");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_HeroDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[13] lv_tKCount;
    int lv_killingplayer;
    unit lv_deadHero;
    int lv_heroKilled;
    fixed lv_chargeCount;
    int lv_penalty;

    // Automatic Variable Declarations
    playergroup auto391CFEDA_g;
    int auto391CFEDA_var;
    playergroup autoF92C8AAE_g;
    int autoF92C8AAE_var;
    unitgroup autoBB2DEBD6_g;
    int autoBB2DEBD6_u;
    unit autoBB2DEBD6_var;

    // Variable Initialization
    lv_deadHero = EventUnit();
    lv_heroKilled = UnitGetOwner(lv_deadHero);
    lv_penalty = 15;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_playersHeroisDead[lv_heroKilled] = true;
    SoundPlayOnUnit(SoundLink("diebuzz", -1), PlayerGroupAll(), lv_deadHero, 0.0, 100.0, 0.0);
    lib90F7C81D_gv_sTATS.lv_deaths[lv_heroKilled] += 1;
    if ((lib90F7C81D_gv_weeklyModifier.lv_race_Against_Time == true)) {
        lv_penalty = 60;
    }
    if ((lib90F7C81D_gv_sTATS.lv_deaths[lv_heroKilled] > 1) && (PlayerGroupHasPlayer(lib90F7C81D_gv_players, lv_killingplayer) == false)) {
        lib90F7C81D_gv_revivePenalty[lv_heroKilled] += (5 * lib90F7C81D_gv_sTATS.lv_deaths[lv_heroKilled]);
    }
    if ((UnitGetOwner(libNtve_gf_KillingUnit()) < 16)) {
        lv_killingplayer = UnitGetOwner(libNtve_gf_KillingUnit());
    }
    if ((lv_heroKilled == lv_killingplayer)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/lib_90F7C81D_0B3C05A9") + UnitGetName(lv_deadHero) + StringExternal("Param/Value/lib_90F7C81D_F2B85B7B") + StringExternal("Param/Value/lib_90F7C81D_CE3D0C97")));
    }
    else {
        if ((PlayerGroupHasPlayer(lib90F7C81D_gv_players, lv_killingplayer) == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/lib_90F7C81D_10035CA8") + UnitGetName(lv_deadHero) + StringExternal("Param/Value/lib_90F7C81D_4657E212") + StringExternal("Param/Value/lib_90F7C81D_3F949333") + TextWithColor(PlayerName(lv_killingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingplayer, false)))));
            if ((libNtve_gf_PlayerIsEnemy(lv_killingplayer, lv_heroKilled, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                lib90F7C81D_gv_revivePenalty[lv_killingplayer] += 15;
                lib90F7C81D_gv_voteKick.lv_teamKills[lv_killingplayer] += 1;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_killingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingplayer, false))) + StringExternal("Param/Value/lib_90F7C81D_A352843F") + IntToText(lib90F7C81D_gv_voteKick.lv_teamKills[lv_killingplayer])));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_90F7C81D_E0CB9748") + TextWithColor(PlayerName(lv_killingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingplayer, false))) + StringExternal("Param/Value/lib_90F7C81D_70488147") + UnitGetName(lib90F7C81D_gv_playerHeroes[lv_killingplayer]) + StringExternal("Param/Value/lib_90F7C81D_673DFE37")));
                UnitGroupAdd(lib90F7C81D_gv_heroskilledbyplayer[lv_killingplayer], lv_deadHero);
            }

        }
        else {
            if ((libNtve_gf_KillingUnit() != null)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/lib_90F7C81D_D49C9AB8") + UnitGetName(lv_deadHero) + StringExternal("Param/Value/lib_90F7C81D_D8696FA9") + StringExternal("Param/Value/lib_90F7C81D_D29ECCD9") + UnitGetName(libNtve_gf_KillingUnit()) + StringExternal("Param/Value/lib_90F7C81D_7D072DF0")));
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/lib_90F7C81D_5E1DBD9D") + UnitGetName(lv_deadHero) + StringExternal("Param/Value/lib_90F7C81D_7BF91BF7") + StringExternal("Param/Value/lib_90F7C81D_586EED0E")));
            }
        }
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicator", 0, lv_heroKilled, UnitGetPosition(lv_deadHero));
    lib90F7C81D_gv_deadHeroIndicator[lv_heroKilled] = UnitLastCreated();
    lv_penalty += lib90F7C81D_gv_revivePenalty[lv_heroKilled];
    lib90F7C81D_gf_UpdateRevivePenalty(lv_heroKilled, lv_penalty);
    UnitSetInfoTip(lib90F7C81D_gv_deadHeroIndicator[lv_heroKilled], PlayerName(lv_heroKilled));
    auto391CFEDA_g = lib90F7C81D_gv_players;
    auto391CFEDA_var = -1;
    while (true) {
        auto391CFEDA_var = PlayerGroupNextPlayer(auto391CFEDA_g, auto391CFEDA_var);
        if (auto391CFEDA_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(lib90F7C81D_gv_deadHeroIndicator[lv_heroKilled], true, auto391CFEDA_var);
    }
    lib90F7C81D_gv_bankData.lv_totalDeaths[lv_heroKilled] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Deaths[lv_heroKilled], IntToText(lib90F7C81D_gv_sTATS.lv_deaths[lv_heroKilled]), PlayerGroupAll());
    lib90F7C81D_gv_teamDeathTotal += 1;
    lib90F7C81D_gv_uI_DeadHeroCount += 1;
    DialogControlSetAnimationState(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame[lv_heroKilled], PlayerGroupAll(), "MOS", "KIA");
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_deadHeroLabel, IntToText(lib90F7C81D_gv_uI_DeadHeroCount), PlayerGroupAll());
    lib90F7C81D_gf_RemoveAilmentsFromHero(lv_heroKilled);
    if ((lib90F7C81D_gv_mOSTexture.lv_material[lv_heroKilled] != null)) {
        lib90F7C81D_gv_mOSTexture.lv_material[lv_heroKilled] = null;
    }
    autoF92C8AAE_g = lib90F7C81D_gv_players;
    autoF92C8AAE_var = -1;
    while (true) {
        autoF92C8AAE_var = PlayerGroupNextPlayer(autoF92C8AAE_g, autoF92C8AAE_var);
        if (autoF92C8AAE_var < 0) { break; }
        if ((PlayerStatus(autoF92C8AAE_var) == c_playerStatusActive)) {
            PlayerSetAlliance(autoF92C8AAE_var, c_allianceIdVision, EventPlayer(), true);
        }

    }
    if ((PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene) >= 3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing((PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene) / 3), "Magazines", 0, 0, PointWithOffset(UnitGetPosition(lv_deadHero), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)));
        UnitGroupAddUnitGroup(lib90F7C81D_gv_playerdroppedammo[EventPlayer()], UnitLastCreatedGroup());
        autoBB2DEBD6_g = lib90F7C81D_gv_playerdroppedammo[EventPlayer()];
        autoBB2DEBD6_u = UnitGroupCount(autoBB2DEBD6_g, c_unitCountAll);
        for (;; autoBB2DEBD6_u -= 1) {
            autoBB2DEBD6_var = UnitGroupUnitFromEnd(autoBB2DEBD6_g, autoBB2DEBD6_u);
            if (autoBB2DEBD6_var == null) { break; }
            lv_chargeCount = lib90F7C81D_gf_ItemChargesRemaining(autoBB2DEBD6_var, "AmmoCharges", 1.0);
            UnitSetInfoTip(autoBB2DEBD6_var, (StringExternal("Param/Value/lib_90F7C81D_D3A5F9A0") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/lib_90F7C81D_828792BE") + FixedToText(lv_chargeCount, 0) + StringExternal("Param/Value/lib_90F7C81D_9C16FD74") + UserDataGetText("Items", UserDataInstance("Items", 1), "Tooltip", 1)));
        }
        if ((ModI(PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene), 3) == 0)) {
            PlayerModifyPropertyInt(lv_heroKilled, c_playerPropVespene, c_playerPropOperSetTo, 0);
        }
        else if ((ModI(PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene), 3) == 1)) {
            PlayerModifyPropertyInt(lv_heroKilled, c_playerPropVespene, c_playerPropOperSetTo, 1);
        }
        else if ((ModI(PlayerGetPropertyInt(lv_heroKilled, c_playerPropVespene), 3) == 2)) {
            PlayerModifyPropertyInt(lv_heroKilled, c_playerPropVespene, c_playerPropOperSetTo, 2);
        }
    }

    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10) == false) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[29][lv_heroKilled] == false)) {
        if ((lib90F7C81D_gv_bankData.lv_totalDeaths[lv_heroKilled] >= 150)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[29][lv_heroKilled] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Left 4 Dead", lv_heroKilled);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][4], PlayerGroupSingle(lv_heroKilled), "AchievementBadge", "Earned");
        }
        else {
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][4], IntToText(lib90F7C81D_gv_bankData.lv_totalDeaths[lv_heroKilled]), PlayerGroupSingle(lv_heroKilled));
        }
    }
    if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) == 0) && (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10) == false) && (GameIsOnline() == true)) {
        lib90F7C81D_gf_RunEvent("GameOver");
    }
    else {
        lib90F7C81D_gf_DisplayReviveProgressBar(lv_heroKilled);
        if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10)) {
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel01/List");
            DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupSingle(lv_heroKilled), "Enabled", "False");
            DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TriggerContainer/AutoReviveButton");
            DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(lv_heroKilled), "Show");
        }
    }
    lv_deadHero = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_HeroDeath_Init () {
    lib90F7C81D_gt_HeroDeath = TriggerCreate("lib90F7C81D_gt_HeroDeath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Campaign
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_StartCampaign_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent("Campaign Init");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_StartCampaign_Init () {
    lib90F7C81D_gt_StartCampaign = TriggerCreate("lib90F7C81D_gt_StartCampaign_Func");
    lib90F7C81D_gf_StartGameMode(lib90F7C81D_gt_StartCampaign, "Recruit");
    lib90F7C81D_gf_StartGameMode(lib90F7C81D_gt_StartCampaign, "Normal");
    lib90F7C81D_gf_StartGameMode(lib90F7C81D_gt_StartCampaign, "Hard");
    lib90F7C81D_gf_StartGameMode(lib90F7C81D_gt_StartCampaign, "Insane");
    lib90F7C81D_gf_StartGameMode(lib90F7C81D_gt_StartCampaign, "Nightmare");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Rush Wave Display
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_BossRushWaveDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_WaveNumber;
    int lv_MaxWave;
    int lv_waveInstanceID;
    string lv_waveText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_WaveNumber = DataTableGetInt(false, lib90F7C81D_gf_PresetGenericEventParameter("BossRushWaveDisplay", "Integer"));
    lv_MaxWave = DataTableGetInt(false, lib90F7C81D_gf_PresetGenericEventParameter("BossRushWaveDisplay", "Real"));
    lv_waveInstanceID = DataTableGetInt(false, lib90F7C81D_gf_PresetGenericEventParameter("BossRushWaveDisplay", "String"));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_WaveNumber == 1)) {
        DialogControlSetAnimationState(lib90F7C81D_gv_bossRushWaveDisplay, PlayerGroupAll(), "Display", "Show");
    }
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_bossRushWaveLabel, (StringExternal("Param/Value/lib_90F7C81D_C2A03586") + IntToText(lv_WaveNumber) + StringExternal("Param/Value/lib_90F7C81D_C8166A51") + IntToText(lv_MaxWave) + StringExternal("Param/Value/lib_90F7C81D_9F4A4A61") + StringToText(lv_waveText)), PlayerGroupAll());
    DataTableValueRemove(false, lib90F7C81D_gf_PresetGenericEventParameter("BossRushWaveDisplay", "Integer"));
    DataTableValueRemove(false, lib90F7C81D_gf_PresetGenericEventParameter("BossRushWaveDisplay", "Real"));
    DataTableValueRemove(false, lib90F7C81D_gf_PresetGenericEventParameter("BossRushWaveDisplay", "String"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_BossRushWaveDisplay_Init () {
    lib90F7C81D_gt_BossRushWaveDisplay = TriggerCreate("lib90F7C81D_gt_BossRushWaveDisplay_Func");
    lib90F7C81D_gf_BossRushWaveDisplay(lib90F7C81D_gt_BossRushWaveDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Logic
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_WeaponLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itemtype;
    fixed lv_weaponMaxCharges;
    fixed lv_weaponRoundsRemaining;
    int lv_preset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemtype = UnitGetType(EventUnitInventoryItem());

    // Conditions
    if (testConds) {
        if (!(((lv_itemtype == "HK42") || (lv_itemtype == "SOFAR") || (lv_itemtype == "M41SAW") || (lv_itemtype == "StynerBR2") || (lv_itemtype == "M5MAR") || (lv_itemtype == "USMCR") || (lv_itemtype == "W1200") || (lv_itemtype == "M241MMG") || (lv_itemtype == "Mk14") || (lv_itemtype == "M92Torrent") || (lv_itemtype == "M9Flamethrower") || (lv_itemtype == "M1014") || (lv_itemtype == "IPR") || (lv_itemtype == "M935Minigun") || (lv_itemtype == "DeathMachine") || (lv_itemtype == "XR42")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_preset = (lib90F7C81D_gf_GetWeaponPreset(EventUnitInventoryItem()));
    if ((UnitHasBehavior2(EventUnit(), "WeaponSlotEquipped") == true) && (UnitHasBehavior2(EventUnit(), "WeaponInInventory") == false) && ((EventUnitInventoryChange() == c_unitInventoryChangePicksUp) || (EventUnitInventoryChange() == c_unitInventoryChangeReceives) || (EventUnitInventoryChange() == c_unitInventoryChangeMoves))) {
        if ((UnitHasBehavior2(EventUnit(), "ReloadTime") == false)) {
            UnitBehaviorAdd(EventUnit(), "WeaponInInventory", EventUnit(), 1);
            UnitBehaviorAdd(EventUnit(), "WeaponSwitch", EventUnit(), 1);
            lv_weaponRoundsRemaining = UnitGetCustomValue(EventUnitInventoryItem(), lv_preset);
            lib90F7C81D_gv_stockWeaponRounds[UnitGetOwner(EventUnit())] = PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals);
            PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSetTo, lv_weaponRoundsRemaining);
        }
        else {
            UnitBehaviorSetDurationRemaining(lib90F7C81D_gv_playerHeroes[UnitGetOwner(EventUnit())], "ReloadTime", lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())]);
        }
    }
    else if ((UnitHasBehavior2(EventUnit(), "WeaponSlotUnequipped") == true) && ((EventUnitInventoryChange() == c_unitInventoryChangeMoves) || (EventUnitInventoryChange() == c_unitInventoryChangeGives) || (EventUnitInventoryChange() == c_unitInventoryChangeDrops))) {
        UnitBehaviorAdd(EventUnit(), "WeaponSwitch", EventUnit(), 1);
        UnitSetCustomValue(EventUnitInventoryItem(), lv_preset, PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals));
        if ((UnitHasBehavior2(EventUnit(), "ReloadTime") == false)) {
            PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSetTo, lib90F7C81D_gv_stockWeaponRounds[UnitGetOwner(EventUnit())]);
        }
        if ((EventUnitInventoryChange() == c_unitInventoryChangeDrops)) {
            UnitSetInfoText(EventUnitInventoryItem(), StringToText(""), (StringExternal("Param/Value/lib_90F7C81D_7AAEC5B7") + UnitGetName(EventUnitInventoryItem()) + StringExternal("Param/Value/lib_90F7C81D_CF1A39DC") + FixedToText(UnitGetCustomValue(EventUnitInventoryItem(), lv_preset), 0) + lib90F7C81D_gf_GetWeaponTooltipIcons(lv_itemtype)), StringToText(""));
            UnitSetFacing(EventUnitInventoryItem(), RandomFixed(360.0, 180.0), 0.0);
        }
    }
    else if (((EventUnitInventoryChange() == c_unitInventoryChangeMoves) || (EventUnitInventoryChange() == c_unitInventoryChangeGives) || (EventUnitInventoryChange() == c_unitInventoryChangeDrops) || (EventUnitInventoryChange() == c_unitInventoryChangeReceives) || (EventUnitInventoryChange() == c_unitInventoryChangePicksUp))) {
        if ((EventUnitInventoryChange() == c_unitInventoryChangeDrops)) {
            if ((UnitIsAlive(EventUnit()) == false)) {
                PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSetTo, lib90F7C81D_gv_stockWeaponRounds[UnitGetOwner(EventUnit())]);
            }
            UnitSetInfoText(EventUnitInventoryItem(), StringToText(""), (StringExternal("Param/Value/lib_90F7C81D_CF210948") + UnitGetName(EventUnitInventoryItem()) + StringExternal("Param/Value/lib_90F7C81D_E26E5E6D") + FixedToText(UnitGetCustomValue(EventUnitInventoryItem(), lv_preset), 0) + lib90F7C81D_gf_GetWeaponTooltipIcons(lv_itemtype)), StringToText(""));
            UnitSetFacing(EventUnitInventoryItem(), RandomFixed(360.0, 180.0), 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_WeaponLogic_Init () {
    lib90F7C81D_gt_WeaponLogic = TriggerCreate("lib90F7C81D_gt_WeaponLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Created
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_WeaponCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_StoreWeaponIndex(EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_WeaponCreated_Init () {
    lib90F7C81D_gt_WeaponCreated = TriggerCreate("lib90F7C81D_gt_WeaponCreated_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_WeaponCreated, c_playerAny, "CreateWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armor Created
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ArmorCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_StoreArmorIndex(EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ArmorCreated_Init () {
    lib90F7C81D_gt_ArmorCreated = TriggerCreate("lib90F7C81D_gt_ArmorCreated_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_ArmorCreated, c_playerAny, "CreateArmor");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armor Damaged
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ArmorDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_armorHealth;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_armorHealth = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropShields, c_unitPropCurrent);
    if ((lv_armorHealth < 1.0)) {
        lib90F7C81D_gf_StoreArmorStats(lv_armorHealth, EventPlayerEffectUsedUnit(c_effectUnitSource), true);
    }
    else {
        lib90F7C81D_gf_StoreArmorStats(lv_armorHealth, EventPlayerEffectUsedUnit(c_effectUnitSource), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ArmorDamaged_Init () {
    lib90F7C81D_gt_ArmorDamaged = TriggerCreate("lib90F7C81D_gt_ArmorDamaged_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_ArmorDamaged, c_playerAny, "ReduceArmorValue");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armor Logic
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ArmorLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    string lv_itemtype;
    unit lv_unit;
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_itemtype = UnitGetType(lv_item);
    lv_unit = UnitInventoryUnit(lv_item);

    // Conditions
    if (testConds) {
        if (!((lv_item != null))) {
            return false;
        }

        if (!((lv_itemtype != null))) {
            return false;
        }

        if (!(((lv_itemtype == "KevlarBodyArmor") || (lv_itemtype == "SPCS")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "ArmorSlotEquipped") == true) && (UnitHasBehavior2(EventUnit(), "ArmorInInventory") == false) && ((EventUnitInventoryChange() == c_unitInventoryChangePicksUp) || (EventUnitInventoryChange() == c_unitInventoryChangeReceives) || (EventUnitInventoryChange() == c_unitInventoryChangeMoves))) {
        UnitBehaviorAdd(EventUnit(), "ArmorInInventory", EventUnit(), 1);
        UnitBehaviorAdd(lv_item, "ArmorMain", lv_item, 1);
        libNtve_gf_MakeUnitInvulnerable(lv_item, true);
        lv_amount = DataTableGetFixed(true, ("ArmorHealth" + IntToString(lib90F7C81D_gf_GetDataTableArmorIndex(lv_item))));
        SoundPlayOnUnit(SoundLink("PickupItem", -1), PlayerGroupAll(), lv_unit, 0.0, 100.0, 0.0);
        UnitSetPropertyFixed(lv_unit, c_unitPropShields, lv_amount);
    }
    else if ((UnitHasBehavior2(EventUnit(), "ArmorSlotEquipped") == true) && (EventUnitInventoryChange() == c_unitInventoryChangeMoves)) {
        UnitBehaviorAdd(lv_item, "ArmorMain", lv_item, 1);
        lv_amount = DataTableGetFixed(true, ("ArmorHealth" + IntToString(lib90F7C81D_gf_GetDataTableArmorIndex(lv_item))));
        UnitSetPropertyFixed(lv_unit, c_unitPropShields, lv_amount);
    }
    else if (((EventUnitInventoryChange() == c_unitInventoryChangePicksUp) || (EventUnitInventoryChange() == c_unitInventoryChangeReceives) || (EventUnitInventoryChange() == c_unitInventoryChangeDrops) || (EventUnitInventoryChange() == c_unitInventoryChangeMoves))) {
        UnitBehaviorRemove(lv_item, "ArmorMain", 1);
        if ((EventUnitInventoryChange() == c_unitInventoryChangeDrops)) {
            if ((UnitHasBehavior2(lv_item, "NewItem") == true)) {
                UnitBehaviorRemove(lv_item, "NewItem", 1);
            }
            if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_itemtype, "FlagArray[" + IntToString(c_unitFlagInvulnerable) + "]", c_playerAny) == 0)) {
                libNtve_gf_MakeUnitInvulnerable(lv_item, false);
            }

            lib90F7C81D_gf_UpdateItemTextChargeDisplay(lv_item);
        }

    }
    lv_itemtype = null;
    lv_item = null;
    lv_unit = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ArmorLogic_Init () {
    lib90F7C81D_gt_ArmorLogic = TriggerCreate("lib90F7C81D_gt_ArmorLogic_Func");
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ArmorLogic, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ArmorLogic, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ArmorLogic, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ArmorLogic, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapons & Items 1 NEW
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_WeaponsItems1NEW_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_itemIndex;
    string lv_instanceName;
    string lv_itemName;
    int lv_playerCountMaxSpawnModified;

    // Automatic Variable Declarations
    int autoE9FABCCC_ae;
    const int autoE9FABCCC_ai = 1;
    int auto42B99835_ae;
    const int auto42B99835_ai = 1;
    string auto40611221_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        autoE9FABCCC_ae = UserDataInstanceCount("SpawnedItems");
        lv_index = 0;
        for ( ; ( (autoE9FABCCC_ai >= 0 && lv_index <= autoE9FABCCC_ae) || (autoE9FABCCC_ai < 0 && lv_index >= autoE9FABCCC_ae) ) ; lv_index += autoE9FABCCC_ai ) {
            if ((lv_index == 0)) {
                continue;
            }
            lv_instanceName = UserDataInstance("SpawnedItems", lv_index);
            if ((UserDataGetInt("SpawnedItems", lv_instanceName, "Group Allowed", 1) > 2)) {
                continue;
            }
            if ((lv_instanceName == "Rifles") && (lib90F7C81D_gv_allowWeapon.lv_rifles == false)) {
                continue;
            }
            else if ((lv_instanceName == "Automatics") && (lib90F7C81D_gv_allowWeapon.lv_automatics == false)) {
                continue;
            }
            else if ((lv_instanceName == "Shotguns") && (lib90F7C81D_gv_allowWeapon.lv_shotguns == false)) {
                continue;
            }
            else if ((lv_instanceName == "DMR") && (lib90F7C81D_gv_allowWeapon.lv_dMR == false)) {
                continue;
            }
            else if ((lv_instanceName == "Flamethrowers") && (lib90F7C81D_gv_allowWeapon.lv_flamethrowers == false)) {
                continue;
            }
            else if ((lv_instanceName == "Plasmas") && (lib90F7C81D_gv_allowWeapon.lv_plasmas == false)) {
                continue;
            }
            else if ((lv_instanceName == "Minigun") && (lib90F7C81D_gv_allowWeapon.lv_minigun == false)) {
                continue;
            }
            else if (true) {
                auto42B99835_ae = UserDataGetInt("SpawnedItems", lv_instanceName, "Index Max", 1);
                lv_itemIndex = 1;
                for ( ; ( (auto42B99835_ai >= 0 && lv_itemIndex <= auto42B99835_ae) || (auto42B99835_ai < 0 && lv_itemIndex >= auto42B99835_ae) ) ; lv_itemIndex += auto42B99835_ai ) {
                    auto40611221_val = UserDataGetUnit("SpawnedItems", lv_instanceName, "Unit Name", lv_itemIndex);
                    if (auto40611221_val == "Magazines") {
                        lv_playerCountMaxSpawnModified = CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(2)));
                    }
                    else if (auto40611221_val == "QuikClot") {
                        lv_playerCountMaxSpawnModified = CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(4)));
                    }
                    else if (auto40611221_val == "FirstAidKit") {
                        lv_playerCountMaxSpawnModified = CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(4)));
                    }
                    else if (auto40611221_val == "AntiVeninShot") {
                        lv_playerCountMaxSpawnModified = CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(6)));
                    }
                    else if (auto40611221_val == "FragGrenade") {
                        lv_playerCountMaxSpawnModified = CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(6)));
                    }
                    else if (auto40611221_val == "EnergyCell") {
                        lv_playerCountMaxSpawnModified = CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(6)));
                    }
                    else if (auto40611221_val == "SmokeGrenadeItem") {
                        lv_playerCountMaxSpawnModified = CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(6)));
                    }
                    else if (auto40611221_val == "AmmoCase") {
                        lv_playerCountMaxSpawnModified = CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(6)));
                    }
                    else {
                        lv_playerCountMaxSpawnModified = 0;
                    }
                    lib90F7C81D_gf_SpawnItemNEW(UserDataGetUnit("SpawnedItems", lv_instanceName, "Unit Name", lv_itemIndex), UserDataGetInt("SpawnedItems", lv_instanceName, "Weight", lv_itemIndex), UserDataGetInt("SpawnedItems", lv_instanceName, "Weight Max", 1), UserDataGetInt("SpawnedItems", lv_instanceName, "Min Spawn Amount", lv_itemIndex), (UserDataGetInt("SpawnedItems", lv_instanceName, "Max Spawn Amount", lv_itemIndex) + lv_playerCountMaxSpawnModified));
                }
            }
        }
        Wait(lib90F7C81D_gv_weaponsItemsTimer.lv_weaponsItemsTime_1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_WeaponsItems1NEW_Init () {
    lib90F7C81D_gt_WeaponsItems1NEW = TriggerCreate("lib90F7C81D_gt_WeaponsItems1NEW_Func");
    TriggerEnable(lib90F7C81D_gt_WeaponsItems1NEW, false);
    lib90F7C81D_gf_WeaponsItemsEvent(lib90F7C81D_gt_WeaponsItems1NEW, "Weapons&Items_1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapons & Items 2
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_WeaponsItems2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto34F80401_n;
    int auto34F80401_i;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        auto34F80401_n = (3 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(2))));
        for (auto34F80401_i = 1; auto34F80401_i <= auto34F80401_n; auto34F80401_i += 1) {
            lib90F7C81D_gf_SpawnItem("Magazines", 1);
            Wait(0.0625, c_timeGame);
        }
        lib90F7C81D_gf_SpawnItem("Binoculars", 2);
        lib90F7C81D_gf_SpawnItem("LiftBoots", 2);
        lib90F7C81D_gf_SpawnItem("OPA", 2);
        lib90F7C81D_gf_SpawnItem("SPCS", 2);
        lib90F7C81D_gf_SpawnItem("Flashlight", 2);
        lib90F7C81D_gf_SpawnItem("MuscleRelaxant", 2);
        lib90F7C81D_gf_SpawnItem("KineticIntegrator", 2);
        lib90F7C81D_gf_SpawnItem("MGL", 2);
        lib90F7C81D_gf_SpawnItem("MRL", 3);
        lib90F7C81D_gf_SpawnItem("40mmGrenadeItem", 1);
        lib90F7C81D_gf_SpawnItem("MRLRocket2", 1);
        Wait(lib90F7C81D_gv_weaponsItemsTimer.lv_weaponsItemsTime_2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_WeaponsItems2_Init () {
    lib90F7C81D_gt_WeaponsItems2 = TriggerCreate("lib90F7C81D_gt_WeaponsItems2_Func");
    TriggerEnable(lib90F7C81D_gt_WeaponsItems2, false);
    lib90F7C81D_gf_WeaponsItemsEvent(lib90F7C81D_gt_WeaponsItems2, "Weapons&Items_2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Charge Combining
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ItemChargeCombining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_inventorySlot;
    unit lv_item;

    // Automatic Variable Declarations
    int auto7F5E104B_ae;
    const int auto7F5E104B_ai = 1;

    // Variable Initialization
    lv_unit = UnitInventoryUnit(EventUnitInventoryItem());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitInventoryItem(), "CombinableItem") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitInventoryChange() == c_unitInventoryChangePicksUp)) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    auto7F5E104B_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lv_unit)];
    lv_inventorySlot = 1;
    for ( ; ( (auto7F5E104B_ai >= 0 && lv_inventorySlot <= auto7F5E104B_ae) || (auto7F5E104B_ai < 0 && lv_inventorySlot >= auto7F5E104B_ae) ) ; lv_inventorySlot += auto7F5E104B_ai ) {
        lv_item = UnitInventoryItem(lv_unit, lv_inventorySlot);
        if ((UnitGetType(lv_item) == "Magazines") && (lib90F7C81D_gf_ItemCountChargesAreGOE("AmmoCase", lv_unit, "AmmoCharges") >= 1) && (UnitGetChargeUsed(lib90F7C81D_gf_FirstAmmoCaseUsed(lv_unit), "AmmoCharges") >= 1.0) && (UnitHasBehavior2(lv_unit, "ReadyMag") == false)) {
            lib90F7C81D_gf_DonateItems(lib90F7C81D_gf_FirstAmmoCaseUsed(lv_unit), lv_item, "AmmoCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "Magazines") && (lib90F7C81D_gf_ItemCountChargesAreGOE("Magazines", lv_unit, "AmmoCharges") >= 2) && (UnitGetChargeUsed(lv_item, "AmmoCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "AmmoCharges"), "AmmoCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "MRLRocket2") && (lib90F7C81D_gf_ItemCountChargesAreGOE("MRL", lv_unit, "ItemCharges") >= 1) && (UnitGetChargeUsed(lib90F7C81D_gf_FirstMRLUsed(lv_unit), "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_DonateItems(lib90F7C81D_gf_FirstMRLUsed(lv_unit), lv_item, "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "MRLRocket2") && (lib90F7C81D_gf_ItemCountChargesAreGOE("MRLRocket2", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "40mmGrenadeItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("MGL", lv_unit, "ItemCharges") >= 1) && (UnitGetChargeUsed(lib90F7C81D_gf_FirstMGLUsed(lv_unit), "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_DonateItems(lib90F7C81D_gf_FirstMGLUsed(lv_unit), lv_item, "ItemCharges", 10.0);
        }
        else if ((UnitGetType(lv_item) == "40mmGrenadeItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("40mmGrenadeItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 10.0);
        }
        else if ((UnitGetType(lv_item) == "StingerMissileItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("StingerMissileLauncher", lv_unit, "ItemCharges") >= 1) && (UnitGetChargeUsed(lib90F7C81D_gf_FirstSMLUsed(lv_unit), "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_DonateItems(lib90F7C81D_gf_FirstSMLUsed(lv_unit), lv_item, "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "StingerMissileItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("StingerMissileItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "GroundFlareItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("GroundFlareItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "FlareGun") && (lib90F7C81D_gf_ItemCountChargesAreGOE("FlareGun", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "FragGrenade") && (lib90F7C81D_gf_ItemCountChargesAreGOE("FragGrenade", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "SmokeGrenadeItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("SmokeGrenadeItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "QuikClot") && (lib90F7C81D_gf_ItemCountChargesAreGOE("QuikClot", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "AdvancedQuikClot") && (lib90F7C81D_gf_ItemCountChargesAreGOE("AdvancedQuikClot", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "FirstAidKit") && (lib90F7C81D_gf_ItemCountChargesAreGOE("FirstAidKit", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "AdvancedFirstAidKit") && (lib90F7C81D_gf_ItemCountChargesAreGOE("AdvancedFirstAidKit", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "AntiVeninShot") && (lib90F7C81D_gf_ItemCountChargesAreGOE("AntiVeninShot", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "AdvancedAntiVeninShot") && (lib90F7C81D_gf_ItemCountChargesAreGOE("AdvancedAntiVeninShot", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "EnergyCell") && (lib90F7C81D_gf_ItemCountChargesAreGOE("EnergyCell", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "SuperiorEnergyCell") && (lib90F7C81D_gf_ItemCountChargesAreGOE("SuperiorEnergyCell", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "ClaymoreItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("ClaymoreItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "WildfireMineItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("WildfireMineItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
        else if ((UnitGetType(lv_item) == "WildfireGrenadeItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("WildfireGrenadeItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "CryoGrenadeItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("CryoGrenadeItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 3.0);
        }
        else if ((UnitGetType(lv_item) == "CryoMineItem") && (lib90F7C81D_gf_ItemCountChargesAreGOE("CryoMineItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_item, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_item, lib90F7C81D_gf_SameItemTypeUsed(lv_unit, lv_item, "ItemCharges"), "ItemCharges", 5.0);
        }
    }
    lv_item = null;
    lv_unit = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ItemChargeCombining_Init () {
    lib90F7C81D_gt_ItemChargeCombining = TriggerCreate("lib90F7C81D_gt_ItemChargeCombining_Func");
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ItemChargeCombining, null, c_unitInventoryChangeUses, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ItemChargeCombining, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ItemChargeCombining, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Charge Tooltip Update
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ItemChargeTooltipUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    string lv_itemtype;
    unit lv_unit;
    int lv_i;

    // Automatic Variable Declarations
    const int auto6AB70ED3_ae = 12;
    const int auto6AB70ED3_ai = 1;
    string autoB7C36CFA_val;

    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_itemtype = UnitGetType(lv_item);
    lv_unit = UnitInventoryUnit(lv_item);

    // Conditions
    if (testConds) {
        if (!((lv_item != null))) {
            return false;
        }

        if (!((lv_itemtype != null))) {
            return false;
        }

        if (!((!((lv_itemtype == "KevlarBodyArmor") || (lv_itemtype == "OPA") || (lv_itemtype == "SPCS"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitInventoryChange() == c_unitInventoryChangePicksUp) || (EventUnitInventoryChange() == c_unitInventoryChangeReceives))) {
        libNtve_gf_MakeUnitInvulnerable(lv_item, true);
        SoundPlayOnUnit(SoundLink("PickupItem", -1), PlayerGroupAll(), lv_unit, 0.0, 100.0, 0.0);
        if ((lv_itemtype == "Magazines")) {
            lv_i = 1;
            for ( ; ( (auto6AB70ED3_ai >= 0 && lv_i <= auto6AB70ED3_ae) || (auto6AB70ED3_ai < 0 && lv_i >= auto6AB70ED3_ae) ) ; lv_i += auto6AB70ED3_ai ) {
                if ((UnitGroupHasUnit(lib90F7C81D_gv_playerdroppedammo[lv_i], lv_item) == true)) {
                    UnitGroupRemove(lib90F7C81D_gv_playerdroppedammo[lv_i], lv_item);
                    break;
                }

            }
        }
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
            autoB7C36CFA_val = UnitGetType(lv_item);
            if (autoB7C36CFA_val == "QuikClot") {
                if ((UnitHasBehavior2(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "QuikClotInInventory") == false)) {
                    UnitBehaviorAdd(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "QuikClotInInventory", lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], 1);
                }
            }
            else if (autoB7C36CFA_val == "AdvancedQuikClot") {
                if ((UnitHasBehavior2(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "AdvancedQuikClotInInventory") == false)) {
                    UnitBehaviorAdd(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "AdvancedQuikClotInInventory", lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], 1);
                }
            }
            else if (autoB7C36CFA_val == "FirstAidKit") {
                if ((UnitHasBehavior2(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "FirstAidInInventory") == false)) {
                    UnitBehaviorAdd(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "FirstAidInInventory", lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], 1);
                }
            }
            else if (autoB7C36CFA_val == "AdvancedFirstAidKit") {
                if ((UnitHasBehavior2(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "AdvancedFirstAidInInventory") == false)) {
                    UnitBehaviorAdd(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "AdvancedFirstAidInInventory", lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], 1);
                }
            }
            else if (autoB7C36CFA_val == "AntiVeninShot") {
                if ((UnitHasBehavior2(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "AntiVeninInInventory") == false)) {
                    UnitBehaviorAdd(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "AntiVeninInInventory", lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], 1);
                }
            }
            else if (autoB7C36CFA_val == "AdvancedAntiVeninShot") {
                if ((UnitHasBehavior2(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "AdvancedAntiVeninInInventory") == false)) {
                    UnitBehaviorAdd(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "AdvancedAntiVeninInInventory", lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], 1);
                }
            }
            else if (autoB7C36CFA_val == "EnergyCell") {
                if ((UnitHasBehavior2(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "EnergyCellInInventory") == false)) {
                    UnitBehaviorAdd(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "EnergyCellInInventory", lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], 1);
                }
            }
            else if (autoB7C36CFA_val == "SuperiorEnergyCell") {
                if ((UnitHasBehavior2(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "SuperiorEnergyCellInInventory") == false)) {
                    UnitBehaviorAdd(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], "SuperiorEnergyCellInInventory", lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(lv_unit)], 1);
                }
            }
            else {
            }
        }
    }
    else {
        if ((EventUnitInventoryChange() == c_unitInventoryChangeDrops)) {
            UnitBehaviorRemove(lv_item, "NewItem", 1);
            if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_itemtype, "FlagArray[" + IntToString(c_unitFlagInvulnerable) + "]", c_playerAny) == 0)) {
                libNtve_gf_MakeUnitInvulnerable(lv_item, false);
            }

            lib90F7C81D_gf_UpdateItemTextChargeDisplay(lv_item);
        }

        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && ((UnitGetType(lv_item) == "FirstAidKit") || (UnitGetType(lv_item) == "QuikClot") || (UnitGetType(lv_item) == "AntiVeninShot") || (UnitGetType(lv_item) == "AdvancedFirstAidKit") || (UnitGetType(lv_item) == "AdvancedQuikClot") || (UnitGetType(lv_item) == "AdvancedAntiVeninShot") || (UnitGetType(lv_item) == "EnergyCell") || (UnitGetType(lv_item) == "SuperiorEnergyCell"))) {
            if ((UnitGetType(lv_item) == "FirstAidKit") && (lib90F7C81D_gf_ItemCount("FirstAidKit", EventUnit()) == 0)) {
                UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(EventUnit())], "FirstAidInInventory", 1);
            }
            else if ((UnitGetType(lv_item) == "QuikClot") && (lib90F7C81D_gf_ItemCount("QuikClot", EventUnit()) == 0)) {
                UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(EventUnit())], "QuikClotInInventory", 1);
            }
            else if ((UnitGetType(lv_item) == "AntiVeninShot") && (lib90F7C81D_gf_ItemCount("AntiVeninShot", EventUnit()) == 0)) {
                UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(EventUnit())], "AntiVeninInInventory", 1);
            }
            else if ((UnitGetType(lv_item) == "AdvancedFirstAidKit") && (lib90F7C81D_gf_ItemCount("AdvancedFirstAidKit", EventUnit()) == 0)) {
                UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(EventUnit())], "AdvancedFirstAidInInventory", 1);
            }
            else if ((UnitGetType(lv_item) == "AdvancedQuikClot") && (lib90F7C81D_gf_ItemCount("AdvancedQuikClot", EventUnit()) == 0)) {
                UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(EventUnit())], "AdvancedQuikClotInInventory", 1);
            }
            else if ((UnitGetType(lv_item) == "AdvancedAntiVeninShot") && (lib90F7C81D_gf_ItemCount("AdvancedAntiVeninShot", EventUnit()) == 0)) {
                UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(EventUnit())], "AdvancedAntiVeninInInventory", 1);
            }
            else if ((UnitGetType(lv_item) == "EnergyCell") && (lib90F7C81D_gf_ItemCount("EnergyCell", EventUnit()) == 0)) {
                UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(EventUnit())], "EnergyCellInInventory", 1);
            }
            else if ((UnitGetType(lv_item) == "SuperiorEnergyCell") && (lib90F7C81D_gf_ItemCount("SuperiorEnergyCell", EventUnit()) == 0)) {
                UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[UnitGetOwner(EventUnit())], "SuperiorEnergyCellInInventory", 1);
            }
        }
    }
    lv_itemtype = null;
    lv_item = null;
    lv_unit = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ItemChargeTooltipUpdate_Init () {
    lib90F7C81D_gt_ItemChargeTooltipUpdate = TriggerCreate("lib90F7C81D_gt_ItemChargeTooltipUpdate_Func");
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ItemChargeTooltipUpdate, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ItemChargeTooltipUpdate, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ItemChargeTooltipUpdate, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_ItemChargeTooltipUpdate, null, c_unitInventoryChangeExhausts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vulcan Mk88 Sentry Reload
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_VulcanMk88SentryReload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_engineeringBayRegion;
    unit lv_turret;
    unit lv_repairMan;

    // Automatic Variable Declarations
    fixed autoC7D51B04_at;

    // Variable Initialization
    lv_engineeringBayRegion = RegionFromId(87);
    lv_turret = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianEngineer", 0, 0, RegionGetCenter(lv_engineeringBayRegion));
    lv_repairMan = UnitLastCreated();
    UnitIssueOrder(lv_repairMan, OrderTargetingUnit(AbilityCommand("ReloadVulcanTurret", 0), lv_turret), c_orderQueueReplace);
    Wait(2.5, c_timeGame);
    UnitIssueOrder(lv_repairMan, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(lv_engineeringBayRegion)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    autoC7D51B04_at = 0;
    while (!(((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(lv_repairMan)) == true) || (libNtve_gf_UnitInRegion(lv_repairMan, lv_engineeringBayRegion) == true))) && autoC7D51B04_at <= 360.0) {
        Wait(1.0, c_timeGame);
        autoC7D51B04_at = autoC7D51B04_at + 1.0;
    }
    if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(lv_repairMan)) == true)) {
    }
    else {
        UnitRemove(lv_repairMan);
    }
    return true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_VulcanMk88SentryReload_Init () {
    lib90F7C81D_gt_VulcanMk88SentryReload = TriggerCreate("lib90F7C81D_gt_VulcanMk88SentryReload_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_VulcanMk88SentryReload, c_playerAny, "VulcanTurretReloadDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TBI Camera Sway
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TBICameraSway_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(UnitGetOwner(EventUnit()), c_cameraPositionTarget, c_cameraDirectionXY, 1.0, 0.33, 0.0, 0.0);
    while ((UnitHasBehavior2(EventUnit(), "TraumaticBrainInjury") == true) && (UnitIsAlive(EventUnit()) == true)) {
        Wait(1.0, c_timeGame);
    }
    CameraShakeStop(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TBICameraSway_Init () {
    lib90F7C81D_gt_TBICameraSway = TriggerCreate("lib90F7C81D_gt_TBICameraSway_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TBICameraSway, null, "TraumaticBrainInjury", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Level
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_HeroLevel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_level;
    fixed lv_currentReloadMod;

    // Automatic Variable Declarations
    int auto4FF19DE6_val;

    // Variable Initialization
    lv_level = UnitLevel(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(UnitGetOwner(EventUnit()), c_playerPropCustom, c_playerPropOperAdd, 1.0);
    lib90F7C81D_gf_FlashCCButton(UnitGetOwner(EventUnit()), "LearnSkills", 2.5);
    if ((lib90F7C81D_gv_levelActorOn == true)) {
        Wait(0.0625, c_timeGame);
        ActorCreate(ActorScopeFromUnit(EventUnit()), ("LevelUp" + IntToString((UnitGetOwner(EventUnit())))), null, null, null);
        ActorSend(libNtve_gf_ActorLastCreated(), (("Signal " + libNtve_gf_ConvertColorToString(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))))));
    }
    if (((lv_level == 2) || (lv_level == 4) || (lv_level == 6) || (lv_level == 8) || (lv_level == 10))) {
        auto4FF19DE6_val = lv_level;
        if (auto4FF19DE6_val == 2) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SoldierSkillsBonus1", 1);
        }
        else if (auto4FF19DE6_val == 4) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SoldierSkillsBonus2", 1);
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperAdd, 1);
        }
        else if (auto4FF19DE6_val == 6) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SoldierSkillsBonus3", 1);
        }
        else if (auto4FF19DE6_val == 8) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SoldierSkillsBonus4", 1);
            PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropTerrazine, c_playerPropOperAdd, 1);
        }
        else if (auto4FF19DE6_val == 10) {
            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SoldierSkillsBonus5", 1);
        }
        else {
        }
        lv_currentReloadMod = lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())];
        lv_currentReloadMod *= 0.03;
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] -= lv_currentReloadMod;
        lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[UnitGetOwner(EventUnit())]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_HeroLevel_Init () {
    lib90F7C81D_gt_HeroLevel = TriggerCreate("lib90F7C81D_gt_HeroLevel_Func");
    TriggerAddEventUnitGainLevel(lib90F7C81D_gt_HeroLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dexterity Points
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_DexterityPoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentReloadMod;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_playerHeroes[UnitGetOwner(EventUnit())] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentReloadMod = lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())];
    lv_currentReloadMod *= 0.03;
    lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] -= lv_currentReloadMod;
    lib90F7C81D_gf_UpdateReloadDurationLabel(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_DexterityPoints_Init () {
    lib90F7C81D_gt_DexterityPoints = TriggerCreate("lib90F7C81D_gt_DexterityPoints_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_DexterityPoints, null, "1Dexterity", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_DexterityPoints, null, "1DexterityMechanical", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_DexterityPoints, null, "1FitnessDexterity", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_DexterityPoints, null, "1FitnessDexterityMechanical", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawned Unit Vision
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SpawnedUnitVision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto882F6378_g;
    int auto882F6378_var;
    playergroup autoCD9DDE43_g;
    int autoCD9DDE43_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, 0);
    if (((UnitGetType(EventUnitCreatedUnit()) == "FieldCamera") || (UnitGetType(EventUnitCreatedUnit()) == "GapGenerator") || (UnitGetType(EventUnitCreatedUnit()) == "MotionSensor") || (UnitGetType(EventUnitCreatedUnit()) == "ReconDrone") || (UnitGetType(EventUnitCreatedUnit()) == "AH42") || (UnitGetType(EventUnitCreatedUnit()) == "PredatorDrone"))) {
        auto882F6378_g = lib90F7C81D_gv_players;
        auto882F6378_var = -1;
        while (true) {
            auto882F6378_var = PlayerGroupNextPlayer(auto882F6378_g, auto882F6378_var);
            if (auto882F6378_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(auto882F6378_var, UnitGetOwner(EventUnitCreatedUnit()), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, auto882F6378_var);
            }
        }
        if ((UnitGetType(EventUnitCreatedUnit()) == "AH42")) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(EventUnitCreatedUnit()), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 30.0, 270.0);
            PingSetUnit(PingLastCreated(), EventUnitCreatedUnit());
            PingSetTooltip(PingLastCreated(), UnitGetName(EventUnitCreatedUnit()));
        }
        else if ((UnitGetType(EventUnitCreatedUnit()) == "PredatorDrone")) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(EventUnitCreatedUnit()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
            PingSetUnit(PingLastCreated(), EventUnitCreatedUnit());
            PingSetTooltip(PingLastCreated(), UnitGetName(EventUnitCreatedUnit()));
        }
    }
    else {
        libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, 15);
        autoCD9DDE43_g = lib90F7C81D_gv_players;
        autoCD9DDE43_var = -1;
        while (true) {
            autoCD9DDE43_var = PlayerGroupNextPlayer(autoCD9DDE43_g, autoCD9DDE43_var);
            if (autoCD9DDE43_var < 0) { break; }
            libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, autoCD9DDE43_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SpawnedUnitVision_Init () {
    lib90F7C81D_gt_SpawnedUnitVision = TriggerCreate("lib90F7C81D_gt_SpawnedUnitVision_Func");
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "GroundFlareItem", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "RiflemanFlareGun", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "FlareGunItem", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "GroundFlare", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "GroundFlareCav", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "GroundFlareSDM", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "GroundFlareLN", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "MotionSensorCav", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "ReconDroneSDM", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "AttackWeaponsTeam", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "CloseAirSupport", null);
    TriggerAddEventUnitCreated(lib90F7C81D_gt_SpawnedUnitVision, null, "GapGenerator", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Belt Link
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ResearchBeltLink_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(SoundLink("AmmoBelt", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    if ((EventUnitAbility() == AbilityCommand("AutomaticRiflemanResearch", 9))) {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, 40);
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] = (lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] * 0.85);
    }
    else {
        PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, 60);
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] = (lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] * 0.705);
    }
    lib90F7C81D_gf_UpdateReloadDurationLabel(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ResearchBeltLink_Init () {
    lib90F7C81D_gt_ResearchBeltLink = TriggerCreate("lib90F7C81D_gt_ResearchBeltLink_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ResearchBeltLink, null, AbilityCommand("AutomaticRiflemanResearch", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ResearchBeltLink, null, AbilityCommand("AutomaticRiflemanResearch", 11), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heartbeat Sensor
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_HeartbeatSensor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "HeartbeatSensorISR", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
        PingSetTooltip(PingLastCreated(), UnitGetName(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    }
    else {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_HeartbeatSensor_Init () {
    lib90F7C81D_gt_HeartbeatSensor = TriggerCreate("lib90F7C81D_gt_HeartbeatSensor_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_HeartbeatSensor, c_playerAny, "HeartbeatTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Designator
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LaserDesignator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCA331F43_g;
    int autoCA331F43_var;
    playergroup autoF7EF926F_g;
    int autoF7EF926F_var;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (TextWithColor(UnitTypeGetName(UnitGetType(EventUnit())), Color(50.20, 0.00, 50.20)) + StringExternal("Param/Value/lib_90F7C81D_E9AD29D9")));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(EventUnit()), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 4.0, 270.0);
        PingSetUnit(PingLastCreated(), EventUnit());
        autoF7EF926F_g = lib90F7C81D_gv_players;
        autoF7EF926F_var = -1;
        while (true) {
            autoF7EF926F_var = PlayerGroupNextPlayer(autoF7EF926F_g, autoF7EF926F_var);
            if (autoF7EF926F_var < 0) { break; }
            if ((UnitIsAlive(EventUnit()) == false)) {
                break;
            }
            else {
                libNtve_gf_ShareVisionofUnit(EventUnit(), true, autoF7EF926F_var);
            }
        }
    }
    else {
        autoCA331F43_g = lib90F7C81D_gv_players;
        autoCA331F43_var = -1;
        while (true) {
            autoCA331F43_var = PlayerGroupNextPlayer(autoCA331F43_g, autoCA331F43_var);
            if (autoCA331F43_var < 0) { break; }
            if ((UnitIsAlive(EventUnit()) == false)) {
                break;
            }
            else {
                libNtve_gf_ShareVisionofUnit(EventUnit(), false, autoCA331F43_var);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LaserDesignator_Init () {
    lib90F7C81D_gt_LaserDesignator = TriggerCreate("lib90F7C81D_gt_LaserDesignator_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_LaserDesignator, null, "LaserDesignator", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_LaserDesignator, null, "LaserDesignator", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bandolier
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Bandolier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoF6857B00_val;
    unitgroup auto1B98479B_g;
    int auto1B98479B_u;
    unit auto1B98479B_var;
    unitgroup auto06361A9C_g;
    int auto06361A9C_u;
    unit auto06361A9C_var;
    unitgroup autoC5683D21_g;
    int autoC5683D21_u;
    unit autoC5683D21_var;
    unitgroup autoDD96A6FB_g;
    int autoDD96A6FB_u;
    unit autoDD96A6FB_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF6857B00_val = TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Bandolier", c_techCountCompleteOnly);
    if (autoF6857B00_val == 1) {
        lib90F7C81D_gv_mOSAchievements.lv_cS_Bandolier[UnitGetOwner(EventUnit())] += 1;
        auto1B98479B_g = UnitInventoryGroup(EventUnit());
        auto1B98479B_u = UnitGroupCount(auto1B98479B_g, c_unitCountAll);
        for (;; auto1B98479B_u -= 1) {
            auto1B98479B_var = UnitGroupUnitFromEnd(auto1B98479B_g, auto1B98479B_u);
            if (auto1B98479B_var == null) { break; }
            if ((UnitGetType(auto1B98479B_var) == "BandolierSlot1")) {
                UnitInventoryRemove(auto1B98479B_var);
            }
        }
    }
    else if (autoF6857B00_val == 2) {
        lib90F7C81D_gv_mOSAchievements.lv_cS_Bandolier[UnitGetOwner(EventUnit())] += 1;
        auto06361A9C_g = UnitInventoryGroup(EventUnit());
        auto06361A9C_u = UnitGroupCount(auto06361A9C_g, c_unitCountAll);
        for (;; auto06361A9C_u -= 1) {
            auto06361A9C_var = UnitGroupUnitFromEnd(auto06361A9C_g, auto06361A9C_u);
            if (auto06361A9C_var == null) { break; }
            if ((UnitGetType(auto06361A9C_var) == "BandolierSlot2")) {
                UnitInventoryRemove(auto06361A9C_var);
            }
        }
    }
    else if (autoF6857B00_val == 3) {
        lib90F7C81D_gv_mOSAchievements.lv_cS_Bandolier[UnitGetOwner(EventUnit())] += 2;
        autoC5683D21_g = UnitInventoryGroup(EventUnit());
        autoC5683D21_u = UnitGroupCount(autoC5683D21_g, c_unitCountAll);
        for (;; autoC5683D21_u -= 1) {
            autoC5683D21_var = UnitGroupUnitFromEnd(autoC5683D21_g, autoC5683D21_u);
            if (autoC5683D21_var == null) { break; }
            if (((UnitGetType(autoC5683D21_var) == "BandolierSlot3") || (UnitGetType(autoC5683D21_var) == "BandolierSlot4"))) {
                UnitInventoryRemove(autoC5683D21_var);
            }
        }
    }
    else if (autoF6857B00_val == 4) {
        lib90F7C81D_gv_mOSAchievements.lv_cS_Bandolier[UnitGetOwner(EventUnit())] += 2;
        autoDD96A6FB_g = UnitInventoryGroup(EventUnit());
        autoDD96A6FB_u = UnitGroupCount(autoDD96A6FB_g, c_unitCountAll);
        for (;; autoDD96A6FB_u -= 1) {
            autoDD96A6FB_var = UnitGroupUnitFromEnd(autoDD96A6FB_g, autoDD96A6FB_u);
            if (autoDD96A6FB_var == null) { break; }
            if (((UnitGetType(autoDD96A6FB_var) == "BandolierSlot5") || (UnitGetType(autoDD96A6FB_var) == "BandolierSlot6"))) {
                UnitInventoryRemove(autoDD96A6FB_var);
            }
        }
    }
    else {
    }
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[89][UnitGetOwner(EventUnit())] == false) && (lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[3][3], IntToText(lib90F7C81D_gv_mOSAchievements.lv_cS_Bandolier[UnitGetOwner(EventUnit())]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        if ((lib90F7C81D_gv_mOSAchievements.lv_cS_Bandolier[UnitGetOwner(EventUnit())] == 6)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[89][UnitGetOwner(EventUnit())] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Full Stock", UnitGetOwner(EventUnit()));
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[3][3], PlayerGroupSingle(UnitGetOwner(EventUnit())), "AchievementBadge", "Earned");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Bandolier_Init () {
    lib90F7C81D_gt_Bandolier = TriggerCreate("lib90F7C81D_gt_Bandolier_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Bandolier, null, AbilityCommand("CavalryScoutResearch", 17), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Motion Sensor: Early Detection
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_MotionSensorEarlyDetection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    fixed lv_duration;
    fixed lv_life;

    // Automatic Variable Declarations
    unitgroup auto8B9CADD7_g;
    int auto8B9CADD7_u;
    unit auto8B9CADD7_var;
    playergroup auto0243D834_g;
    int auto0243D834_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B9CADD7_g = UnitGroup(null, UnitGetOwner(EventUnit()), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B9CADD7_u = UnitGroupCount(auto8B9CADD7_g, c_unitCountAll);
    for (;; auto8B9CADD7_u -= 1) {
        auto8B9CADD7_var = UnitGroupUnitFromEnd(auto8B9CADD7_g, auto8B9CADD7_u);
        if (auto8B9CADD7_var == null) { break; }
        if ((UnitGetType(auto8B9CADD7_var) == "MotionSensor")) {
            lv_point = UnitGetPosition(auto8B9CADD7_var);
            lv_duration = UnitBehaviorDuration(auto8B9CADD7_var, "MotionSensorTimedLife");
            lv_life = UnitGetPropertyFixed(auto8B9CADD7_var, c_unitPropLife, c_unitPropCurrent);
            UnitRemove(auto8B9CADD7_var);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MotionSensor", 0, EventPlayer(), lv_point);
            UnitBehaviorAdd(UnitLastCreated(), "MotionSensorTimedLife", UnitLastCreated(), 1);
            UnitBehaviorSetDurationRemaining(UnitLastCreated(), "MotionSensorTimedLife", lv_duration);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, lv_life);
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 0);
            auto0243D834_g = lib90F7C81D_gv_players;
            auto0243D834_var = -1;
            while (true) {
                auto0243D834_var = PlayerGroupNextPlayer(auto0243D834_g, auto0243D834_var);
                if (auto0243D834_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto0243D834_var, UnitGetOwner(UnitLastCreated()), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, auto0243D834_var);
                }

            }
            lv_point = null;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_MotionSensorEarlyDetection_Init () {
    lib90F7C81D_gt_MotionSensorEarlyDetection = TriggerCreate("lib90F7C81D_gt_MotionSensorEarlyDetection_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_MotionSensorEarlyDetection, null, AbilityCommand("CavalryScoutSkillUpgrades", 19), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_MotionSensorEarlyDetection, null, AbilityCommand("CavalryScoutResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Recruited
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LNRecruited_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sFAAT;
    point lv_barracks;
    int lv_max;
    int lv_index;

    // Automatic Variable Declarations
    const int auto95BC4E45_ae = 5;
    const int auto95BC4E45_ai = 1;
    const int autoEB9FCF86_ae = 5;
    const int autoEB9FCF86_ai = 1;

    // Variable Initialization
    lv_sFAAT = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_barracks = RegionRandomPoint(RegionFromId(62));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lib90F7C81D_gf_RandomLN(), c_unitCreateIgnoreBirth, lv_sFAAT, lv_barracks);
    UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_localNationals, UnitLastCreated());
    if ((lib90F7C81D_gv_sFAAT.lv_spawnRallyPoint != null)) {
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("NPCSprint", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lib90F7C81D_gv_sFAAT.lv_spawnRallyPoint), c_orderQueueReplace);
    }
    if ((TechTreeUpgradeCount(lv_sFAAT, "HasLocalNationals", c_techCountCompleteOnly) == 0)) {
        TechTreeUpgradeAddLevel(lv_sFAAT, "HasLocalNationals", 1);
    }
    lv_barracks = null;
    if ((lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[93][lv_sFAAT] == false) && (lib90F7C81D_gv_mOSAchievements.lv_sFAATLNRecruited[lv_sFAAT] == false)) {
        lib90F7C81D_gv_mOSAchievements.lv_sFAATLNRecruited[lv_sFAAT] = true;
    }
    if ((lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[90][lv_sFAAT] == false)) {
        lv_index = lib90F7C81D_gf_TwoOfAKindIndex(UnitGetType(UnitLastCreated()));
        if ((lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[lv_index][lv_sFAAT] != 2)) {
            lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[lv_index][lv_sFAAT] += 1;
            libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_sFAATLNTooltip[lv_index], lib90F7C81D_gf_TwoOfAKindCount(lv_index, lv_sFAAT), PlayerGroupSingle(lv_sFAAT));
            if ((lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[lv_index][lv_sFAAT] >= 2)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], PlayerGroupSingle(lv_sFAAT), ("ExtraIcon" + IntToString((lv_index + 1))), "Unlocked");
            }
        }
        lv_index = 0;
        for ( ; ( (auto95BC4E45_ai >= 0 && lv_index <= auto95BC4E45_ae) || (auto95BC4E45_ai < 0 && lv_index >= auto95BC4E45_ae) ) ; lv_index += auto95BC4E45_ai ) {
            if ((lib90F7C81D_gv_mOSAchievements.lv_sFAATLNCount[lv_index][lv_sFAAT] == 2)) {
                lv_max += 1;
            }
        }
        if ((lv_max == 6)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[90][lv_sFAAT] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Two Of A Kind", lv_sFAAT);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], PlayerGroupSingle(lv_sFAAT), "AchievementBadge", "Earned");
            lv_index = 0;
            for ( ; ( (autoEB9FCF86_ai >= 0 && lv_index <= autoEB9FCF86_ae) || (autoEB9FCF86_ai < 0 && lv_index >= autoEB9FCF86_ae) ) ; lv_index += autoEB9FCF86_ai ) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][0], PlayerGroupSingle(lv_sFAAT), ("ExtraIcon" + IntToString((lv_index + 1))), "Hidden");
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LNRecruited_Init () {
    lib90F7C81D_gt_LNRecruited = TriggerCreate("lib90F7C81D_gt_LNRecruited_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_LNRecruited, c_playerAny, "RecruitLNDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Rally
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LNRally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "SetRallyPointDummyEffect")) {
        if ((lib90F7C81D_gv_sFAAT.lv_spawnRallyPoint == null)) {
            lib90F7C81D_gv_sFAAT.lv_spawnRallyPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
        }
        else {
            libNtve_gf_SendActorMessageToGameRegion(RegionCircle(lib90F7C81D_gv_sFAAT.lv_spawnRallyPoint, 1.0), "Signal DestroyRallyPointBeacon");
            lib90F7C81D_gv_sFAAT.lv_spawnRallyPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
        }
        lib90F7C81D_gf_PingBeaconAdd("SetRallyPointBeacon", lib90F7C81D_gv_sFAAT.lv_spawnRallyPoint, EventPlayer());
    }
    else {
        if ((lib90F7C81D_gv_sFAAT.lv_rallyPoint == null)) {
            lib90F7C81D_gv_sFAAT.lv_rallyPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
            if ((UnitGroupCount(lib90F7C81D_gv_sFAAT.lv_localNationals, c_unitCountAlive) >= 1)) {
                UnitGroupIssueOrder(lib90F7C81D_gv_sFAAT.lv_localNationals, OrderTargetingPoint(AbilityCommand("move", 0), lib90F7C81D_gv_sFAAT.lv_rallyPoint), c_orderQueueReplace);
            }
        }
        else {
            libNtve_gf_SendActorMessageToGameRegion(RegionCircle(lib90F7C81D_gv_sFAAT.lv_rallyPoint, 1.0), "Signal DestroyLNBeacon");
            lib90F7C81D_gv_sFAAT.lv_rallyPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
            if ((UnitGroupCount(lib90F7C81D_gv_sFAAT.lv_localNationals, c_unitCountAlive) >= 1)) {
                UnitGroupIssueOrder(lib90F7C81D_gv_sFAAT.lv_localNationals, OrderTargetingPoint(AbilityCommand("attack", 0), lib90F7C81D_gv_sFAAT.lv_rallyPoint), c_orderQueueReplace);
            }
        }
        if ((EventPlayerEffectUsed() == "RallyLocalNationalsDummyEffect")) {
            lib90F7C81D_gf_PingBeaconAdd("RallyLocalNationalsBeacon", lib90F7C81D_gv_sFAAT.lv_rallyPoint, EventPlayer());
        }
        else {
            lib90F7C81D_gf_PingBeaconAdd("OffensiveRallyBeacon", lib90F7C81D_gv_sFAAT.lv_rallyPoint, EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LNRally_Init () {
    lib90F7C81D_gt_LNRally = TriggerCreate("lib90F7C81D_gt_LNRally_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_LNRally, c_playerAny, "SetRallyPointDummyEffect");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_LNRally, c_playerAny, "RallyLocalNationalsDummyEffect");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_LNRally, c_playerAny, "OffensiveRallyDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Group Update
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LNGroupUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto93026775_ae;
    const int auto93026775_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto93026775_ae = lib90F7C81D_gv_sFAAT.lv_lNMax;
    lv_index = 1;
    for ( ; ( (auto93026775_ai >= 0 && lv_index <= auto93026775_ae) || (auto93026775_ai < 0 && lv_index >= auto93026775_ae) ) ; lv_index += auto93026775_ai ) {
        if ((EventPlayerEffectUsedUnitType(c_effectUnitSource) == UserDataGetUnit("LocalNationals", "Local Nationals", "Unit", lv_index))) {
            lib90F7C81D_gf_UpdateLNPool(lv_index, lib90F7C81D_ge_LNSlot_Add);
            break;
        }
    }
    UnitGroupRemove(lib90F7C81D_gv_sFAAT.lv_localNationals, EventPlayerEffectUsedUnit(c_effectUnitSource));
    if ((UnitGroupCount(lib90F7C81D_gv_sFAAT.lv_localNationals, c_unitCountAlive) == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "HasLocalNationals", -1);
        lib90F7C81D_gv_sFAAT.lv_rallyPoint = null;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LNGroupUpdate_Init () {
    lib90F7C81D_gt_LNGroupUpdate = TriggerCreate("lib90F7C81D_gt_LNGroupUpdate_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_LNGroupUpdate, c_playerAny, "LocalNationalDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN SITREP
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LNSITREP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    text lv_floattext;
    string lv_healthicon;
    int lv_count;
    string lv_instanceIndex;

    // Automatic Variable Declarations
    unitgroup auto042F20D2_g;
    int auto042F20D2_u;
    unit auto042F20D2_var;
    string autoE1471DAD_userType;
    int autoE1471DAD_i;

    // Variable Initialization
    lv_temptext = StringToText("");
    lv_healthicon = "Assets\\Textures\\icon-health-nobg.dds";

    // Actions
    if (!runActions) {
        return true;
    }

    auto042F20D2_g = lib90F7C81D_gv_sFAAT.lv_localNationals;
    auto042F20D2_u = UnitGroupCount(auto042F20D2_g, c_unitCountAll);
    for (;; auto042F20D2_u -= 1) {
        auto042F20D2_var = UnitGroupUnitFromEnd(auto042F20D2_g, auto042F20D2_u);
        if (auto042F20D2_var == null) { break; }
        if ((UnitGetPropertyFixed(auto042F20D2_var, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
            lv_count += 1;
            lv_floattext = StringToText("");
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(auto042F20D2_var), Color(100.00, 100.00, 100.00), 7.0, 270.0);
            PingSetUnit(PingLastCreated(), auto042F20D2_var);
            PingSetTooltip(PingLastCreated(), UnitGetName(auto042F20D2_var));
            lv_temptext = (lv_temptext + TextWithColor(UnitGetName(auto042F20D2_var), Color(100.00, 100.00, 100.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_055EC090"));
            lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(auto042F20D2_var, c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(auto042F20D2_var, c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(auto042F20D2_var, c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_01AEF0D8"));
            lv_floattext = (lv_floattext + lib90F7C81D_gf_TextImage(lv_healthicon, 22));
            autoE1471DAD_userType = "Ailments";
            autoE1471DAD_i = 1;
            for ( ; autoE1471DAD_i <= UserDataInstanceCount(autoE1471DAD_userType) ; autoE1471DAD_i += 1 ) {
                lv_instanceIndex = UserDataInstance(autoE1471DAD_userType, autoE1471DAD_i);
                if ((UnitHasBehavior2(auto042F20D2_var, UserDataGetGameLink("Ailments", lv_instanceIndex, "Ailment Behavior", 1)) == true)) {
                    lv_temptext = (lv_temptext + lib90F7C81D_gf_TextImage((UserDataGetImagePath("Ailments", lv_instanceIndex, "Ailment Image", 1)), 22));
                    lv_floattext = (lv_floattext + lib90F7C81D_gf_TextImage((UserDataGetImagePath("Ailments", lv_instanceIndex, "Ailment Image", 1)), 22));
                }

            }
            lib90F7C81D_gf_FloatingTextforPlayer(auto042F20D2_var, lv_floattext, EventPlayer());
            lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_A10EC7E4"));
        }
    }
    if ((lv_count == 0)) {
        lv_temptext = StringExternal("Param/Value/lib_90F7C81D_AA3307C9");
    }

    lib90F7C81D_gf_DisplayVisorTextDialog(lv_temptext, EventPlayer());
    lv_temptext = null;
    lv_healthicon = null;
    lv_floattext = null;
    lv_instanceIndex = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LNSITREP_Init () {
    lib90F7C81D_gt_LNSITREP = TriggerCreate("lib90F7C81D_gt_LNSITREP_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_LNSITREP, null, AbilityCommand("LNSITREP", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Subgroup Panel
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LNSubgroupPanel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(EventPlayer());
    if ((EventDialogControl() == lib90F7C81D_gv_sFAAT.lv_lNButtons[0])) {
        UnitSelect(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1), EventPlayer(), true);
    }
    else if ((EventDialogControl() == lib90F7C81D_gv_sFAAT.lv_lNButtons[1])) {
        UnitSelect(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 2), EventPlayer(), true);
    }
    else if ((EventDialogControl() == lib90F7C81D_gv_sFAAT.lv_lNButtons[2])) {
        UnitSelect(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 3), EventPlayer(), true);
    }
    else if ((EventDialogControl() == lib90F7C81D_gv_sFAAT.lv_lNButtons[3])) {
        UnitSelect(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 4), EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LNSubgroupPanel_Init () {
    lib90F7C81D_gt_LNSubgroupPanel = TriggerCreate("lib90F7C81D_gt_LNSubgroupPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Training To All
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ApplyTrainingToAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto379EB6CE_ae = 13;
    const int auto379EB6CE_ai = 1;
    const int auto1CB8FE30_ae = 13;
    const int auto1CB8FE30_ai = 1;
    const int autoDA202797_ae = 13;
    const int autoDA202797_ai = 1;
    const int auto2E718F11_ae = 13;
    const int auto2E718F11_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("SFAATResearch", 12))) {
        lv_i = 0;
        for ( ; ( (auto379EB6CE_ai >= 0 && lv_i <= auto379EB6CE_ae) || (auto379EB6CE_ai < 0 && lv_i >= auto379EB6CE_ae) ) ; lv_i += auto379EB6CE_ai ) {
            if ((lv_i != EventPlayer())) {
                if ((lv_i == 0)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "Training4", 1);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "TrainingLevel4Dummy", 1);
                }
            }
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("SFAATResearch", 11))) {
        lv_i = 0;
        for ( ; ( (auto1CB8FE30_ai >= 0 && lv_i <= auto1CB8FE30_ae) || (auto1CB8FE30_ai < 0 && lv_i >= auto1CB8FE30_ae) ) ; lv_i += auto1CB8FE30_ai ) {
            if ((lv_i != EventPlayer())) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "TrainingLevel3Dummy", 1);
            }
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("SFAATResearch", 10))) {
        lv_i = 0;
        for ( ; ( (autoDA202797_ai >= 0 && lv_i <= autoDA202797_ae) || (autoDA202797_ai < 0 && lv_i >= autoDA202797_ae) ) ; lv_i += autoDA202797_ai ) {
            if ((lv_i != EventPlayer())) {
                if ((lv_i == 0)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "Training2", 1);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "TrainingLevel2Dummy", 1);
                }
            }
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("SFAATResearch", 9))) {
        lv_i = 0;
        for ( ; ( (auto2E718F11_ai >= 0 && lv_i <= auto2E718F11_ae) || (auto2E718F11_ai < 0 && lv_i >= auto2E718F11_ae) ) ; lv_i += auto2E718F11_ai ) {
            if ((lv_i != EventPlayer())) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "TrainingLevel1Dummy", 1);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ApplyTrainingToAll_Init () {
    lib90F7C81D_gt_ApplyTrainingToAll = TriggerCreate("lib90F7C81D_gt_ApplyTrainingToAll_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ApplyTrainingToAll, null, AbilityCommand("SFAATResearch", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ApplyTrainingToAll, null, AbilityCommand("SFAATResearch", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ApplyTrainingToAll, null, AbilityCommand("SFAATResearch", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ApplyTrainingToAll, null, AbilityCommand("SFAATResearch", 10), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Armored Vests To Neutral
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ApplyArmoredVestsToNeutral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(0, "ReinforcePositionArmoredVests", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ApplyArmoredVestsToNeutral_Init () {
    lib90F7C81D_gt_ApplyArmoredVestsToNeutral = TriggerCreate("lib90F7C81D_gt_ApplyArmoredVestsToNeutral_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ApplyArmoredVestsToNeutral, null, AbilityCommand("SFAATSkillUpgrades", 7), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Popo Reaches Barracks
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PopoReachesBarracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "ReinforcePositionEnd") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PopoReachesBarracks_Init () {
    lib90F7C81D_gt_PopoReachesBarracks = TriggerCreate("lib90F7C81D_gt_PopoReachesBarracks_Func");
    TriggerEnable(lib90F7C81D_gt_PopoReachesBarracks, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforce Position End
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ReinforcePositionEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto74559B7A_n = 15;
    int auto74559B7A_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib90F7C81D_gt_PopoReachesBarracks) == false)) {
        TriggerEnable(lib90F7C81D_gt_PopoReachesBarracks, true);
    }
    for (auto74559B7A_i = 1; auto74559B7A_i <= auto74559B7A_n; auto74559B7A_i += 1) {
        if ((UnitIsAlive(EventUnit()) == true)) {
            if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(45)) == true)) {
                UnitRemove(EventUnit());
                break;
            }
            else {
                if ((lib90F7C81D_gf_UnitCanSprint(EventUnit()) == true)) {
                    UnitIssueOrder(EventUnit(), Order(AbilityCommand("NPCSprint", 0)), c_orderQueueReplace);
                }
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(45))), c_orderQueueReplace);
            }
        }
        else {
            break;
        }
        Wait(1.0, c_timeReal);
    }
    if ((UnitIsAlive(EventUnit()) == true)) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetOpacity 0.500000");
        UnitRemove(EventUnit());
    }
    if ((UnitGroupCount(lib90F7C81D_gv_sFAAT.lv_police, c_unitCountAlive) == 0)) {
        if ((TriggerIsEnabled(lib90F7C81D_gt_PopoReachesBarracks) == true)) {
            TriggerEnable(lib90F7C81D_gt_PopoReachesBarracks, false);
            UnitGroupClear(lib90F7C81D_gv_sFAAT.lv_police);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ReinforcePositionEnd_Init () {
    lib90F7C81D_gt_ReinforcePositionEnd = TriggerCreate("lib90F7C81D_gt_ReinforcePositionEnd_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReinforcePositionEnd, null, "ReinforcePositionTimedLife", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforce Position
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ReinforcePosition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_policeGroup;
    playergroup lv_triggeringPlayer;

    // Automatic Variable Declarations
    const int auto9E2AFF29_n = 2;
    int auto9E2AFF29_i;
    const int auto4EEE652C_n = 3;
    int auto4EEE652C_i;
    const int auto321A5C2B_n = 4;
    int auto321A5C2B_i;
    const int autoB2A0FD2A_n = 5;
    int autoB2A0FD2A_i;
    const int autoECE5034F_n = 2;
    int autoECE5034F_i;
    unitgroup auto65FCAB7E_g;
    int auto65FCAB7E_u;
    unit auto65FCAB7E_var;

    // Variable Initialization
    lv_policeGroup = UnitGroupEmpty();
    lv_triggeringPlayer = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionFromId(47), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) == true)) {
        lib90F7C81D_gf_PingBeaconAdd("PingPanelBeaconDefend", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), EventPlayer());
        RegionSetCenter(RegionFromId(48), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Training1", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Training2", c_techCountCompleteOnly) == 0)) {
            for (auto9E2AFF29_i = 1; auto9E2AFF29_i <= auto9E2AFF29_n; auto9E2AFF29_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(45)));
                TriggerAddEventUnitRegion(lib90F7C81D_gt_PopoReachesBarracks, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(UnitLastCreated())), RegionFromId(45), true);
                UnitBehaviorAdd(UnitLastCreated(), "ReinforcePositionTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitBehaviorAdd(UnitLastCreated(), "ArmoredVests", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitGroupAdd(lv_policeGroup, UnitLastCreated());
                UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_police, UnitLastCreated());
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(45)));
            TriggerAddEventUnitRegion(lib90F7C81D_gt_PopoReachesBarracks, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(UnitLastCreated())), RegionFromId(45), true);
            UnitBehaviorAdd(UnitLastCreated(), "ReinforcePositionTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
            UnitBehaviorAdd(UnitLastCreated(), "ArmoredVests", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
            UnitGroupAdd(lv_policeGroup, UnitLastCreated());
            UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_police, UnitLastCreated());
        }
        else if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Training2", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Training3", c_techCountCompleteOnly) == 0)) {
            for (auto4EEE652C_i = 1; auto4EEE652C_i <= auto4EEE652C_n; auto4EEE652C_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(45)));
                TriggerAddEventUnitRegion(lib90F7C81D_gt_PopoReachesBarracks, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(UnitLastCreated())), RegionFromId(45), true);
                UnitBehaviorAdd(UnitLastCreated(), "ReinforcePositionTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitBehaviorAdd(UnitLastCreated(), "ArmoredVests", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitGroupAdd(lv_policeGroup, UnitLastCreated());
                UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_police, UnitLastCreated());
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(45)));
            TriggerAddEventUnitRegion(lib90F7C81D_gt_PopoReachesBarracks, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(UnitLastCreated())), RegionFromId(45), true);
            UnitBehaviorAdd(UnitLastCreated(), "ReinforcePositionTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
            UnitBehaviorAdd(UnitLastCreated(), "ArmoredVests", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
            UnitGroupAdd(lv_policeGroup, UnitLastCreated());
            UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_police, UnitLastCreated());
        }
        else if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Training3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Training4", c_techCountCompleteOnly) == 0)) {
            for (auto321A5C2B_i = 1; auto321A5C2B_i <= auto321A5C2B_n; auto321A5C2B_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(45)));
                TriggerAddEventUnitRegion(lib90F7C81D_gt_PopoReachesBarracks, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(UnitLastCreated())), RegionFromId(45), true);
                UnitBehaviorAdd(UnitLastCreated(), "ReinforcePositionTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitBehaviorAdd(UnitLastCreated(), "ArmoredVests", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitGroupAdd(lv_policeGroup, UnitLastCreated());
                UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_police, UnitLastCreated());
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(45)));
            TriggerAddEventUnitRegion(lib90F7C81D_gt_PopoReachesBarracks, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(UnitLastCreated())), RegionFromId(45), true);
            UnitBehaviorAdd(UnitLastCreated(), "ReinforcePositionTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
            UnitBehaviorAdd(UnitLastCreated(), "ArmoredVests", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
            UnitGroupAdd(lv_policeGroup, UnitLastCreated());
            UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_police, UnitLastCreated());
        }
        else if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "Training4", c_techCountCompleteOnly) == 1)) {
            for (autoB2A0FD2A_i = 1; autoB2A0FD2A_i <= autoB2A0FD2A_n; autoB2A0FD2A_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(45)));
                TriggerAddEventUnitRegion(lib90F7C81D_gt_PopoReachesBarracks, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(UnitLastCreated())), RegionFromId(45), true);
                UnitBehaviorAdd(UnitLastCreated(), "ReinforcePositionTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitBehaviorAdd(UnitLastCreated(), "ArmoredVests", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitGroupAdd(lv_policeGroup, UnitLastCreated());
                UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_police, UnitLastCreated());
            }
            for (autoECE5034F_i = 1; autoECE5034F_i <= autoECE5034F_n; autoECE5034F_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(45)));
                TriggerAddEventUnitRegion(lib90F7C81D_gt_PopoReachesBarracks, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(UnitLastCreated())), RegionFromId(45), true);
                UnitBehaviorAdd(UnitLastCreated(), "ReinforcePositionTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitBehaviorAdd(UnitLastCreated(), "ArmoredVests", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
                UnitGroupAdd(lv_policeGroup, UnitLastCreated());
                UnitGroupAdd(lib90F7C81D_gv_sFAAT.lv_police, UnitLastCreated());
            }
        }
        Wait(0.75, c_timeGame);
        while ((UnitGroupCount(lv_policeGroup, c_unitCountAlive) > 0)) {
            auto65FCAB7E_g = lv_policeGroup;
            auto65FCAB7E_u = UnitGroupCount(auto65FCAB7E_g, c_unitCountAll);
            for (;; auto65FCAB7E_u -= 1) {
                auto65FCAB7E_var = UnitGroupUnitFromEnd(auto65FCAB7E_g, auto65FCAB7E_u);
                if (auto65FCAB7E_var == null) { break; }
                if ((UnitIsAlive(auto65FCAB7E_var) == true)) {
                    if ((libNtve_gf_UnitInRegion(auto65FCAB7E_var, RegionFromId(48)) == false)) {
                        if ((lib90F7C81D_gf_UnitCanSprint(auto65FCAB7E_var) == true)) {
                            UnitIssueOrder(auto65FCAB7E_var, Order(AbilityCommand("NPCSprint", 0)), c_orderQueueReplace);
                        }

                        UnitIssueOrder(auto65FCAB7E_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(48))), c_orderQueueReplace);
                    }
                    else {
                        UnitGroupRemove(lv_policeGroup, auto65FCAB7E_var);
                    }
                }
                else {
                    UnitGroupRemove(lv_policeGroup, auto65FCAB7E_var);
                }
            }
            Wait(0.25, c_timeReal);
        }
    }
    else {
        PlayerGroupAdd(lv_triggeringPlayer, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
        libNtve_gf_UIErrorMessage(lv_triggeringPlayer, StringExternal("Param/Value/lib_90F7C81D_DA177F1F"), SoundLink("UI_GenericError", -1));
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ReinforcePositionRefund", EventPlayerEffectUsedUnit(c_effectUnitCaster));
        PlayerGroupClear(lv_triggeringPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ReinforcePosition_Init () {
    lib90F7C81D_gt_ReinforcePosition = TriggerCreate("lib90F7C81D_gt_ReinforcePosition_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_ReinforcePosition, c_playerAny, "ReinforcePositionDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Air Support Pings
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_AirSupportPings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "MortarStrikeDelayCP")) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 4.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_90F7C81D_8F51F73A"));
    }
    else if ((EventPlayerEffectUsed() == "CASCalldownMarker")) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_90F7C81D_0A960592"));
    }
    else if ((EventPlayerEffectUsed() == "AWTCalldownMarker")) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 6.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_90F7C81D_E7D07EE8"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_AirSupportPings_Init () {
    lib90F7C81D_gt_AirSupportPings = TriggerCreate("lib90F7C81D_gt_AirSupportPings_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_AirSupportPings, c_playerAny, "CASCalldownMarker");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_AirSupportPings, c_playerAny, "AWTCalldownMarker");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_AirSupportPings, c_playerAny, "MortarStrikeDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Security Researched
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SecurityResearched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_combatEngineer.lv_securityCharge += 1;
    PlayerScoreValueSetFromInt(EventPlayer(), "Security", lib90F7C81D_gv_combatEngineer.lv_securityCharge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SecurityResearched_Init () {
    lib90F7C81D_gt_SecurityResearched = TriggerCreate("lib90F7C81D_gt_SecurityResearched_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_SecurityResearched, null, AbilityCommand("CombatEngineerResearch", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_SecurityResearched, null, AbilityCommand("CombatEngineerResearch", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_SecurityResearched, null, AbilityCommand("CombatEngineerResearch", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_SecurityResearched, null, AbilityCommand("CombatEngineerResearch", 12), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SD Creation & Death
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SDCreationDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnitType(c_effectUnitSource) != "EnergyGenerator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "UpdateSentryDroneUI")) {
        lib90F7C81D_gv_combatEngineer.lv_securityCharge += 1;
    }
    else {
        lib90F7C81D_gv_combatEngineer.lv_securityCharge -= 1;
    }
    PlayerScoreValueSetFromInt(EventPlayer(), "Security", lib90F7C81D_gv_combatEngineer.lv_securityCharge);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SDCreationDeath_Init () {
    lib90F7C81D_gt_SDCreationDeath = TriggerCreate("lib90F7C81D_gt_SDCreationDeath_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SDCreationDeath, c_playerAny, "MK17Place");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SDCreationDeath, c_playerAny, "MK18Place");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SDCreationDeath, c_playerAny, "MK19Place");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SDCreationDeath, c_playerAny, "AttackDronePlace");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SDCreationDeath, c_playerAny, "DisruptorDronePlace");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SDCreationDeath, c_playerAny, "RepairDronePlace");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SDCreationDeath, c_playerAny, "UpdateSentryDroneUI");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Architect Researched
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ArchitectResearched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    abilcmd autoF7319B00_val;
    const int auto8C6F3505_ae = 13;
    const int auto8C6F3505_ai = 1;
    const int auto2328EB37_ae = 13;
    const int auto2328EB37_ai = 1;
    const int autoF03DA254_ae = 13;
    const int autoF03DA254_ai = 1;
    const int auto79729B43_ae = 13;
    const int auto79729B43_ai = 1;
    const int autoDC2EADE7_ae = 13;
    const int autoDC2EADE7_ai = 1;
    const int auto54B07051_ae = 13;
    const int auto54B07051_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7319B00_val = EventUnitAbility();
    if (autoF7319B00_val == AbilityCommand("CombatEngineerResearch", 6)) {
        lv_i = 0;
        for ( ; ( (auto2328EB37_ai >= 0 && lv_i <= auto2328EB37_ae) || (auto2328EB37_ai < 0 && lv_i >= auto2328EB37_ae) ) ; lv_i += auto2328EB37_ai ) {
            if ((lv_i != EventPlayer())) {
                TechTreeUpgradeAddLevel(lv_i, "ArchitectLevel2Dummy", 1);
            }
        }
    }
    else if (autoF7319B00_val == AbilityCommand("CombatEngineerResearch", 7)) {
        lv_i = 0;
        for ( ; ( (autoF03DA254_ai >= 0 && lv_i <= autoF03DA254_ae) || (autoF03DA254_ai < 0 && lv_i >= autoF03DA254_ae) ) ; lv_i += autoF03DA254_ai ) {
            if ((lv_i != EventPlayer())) {
                TechTreeUpgradeAddLevel(lv_i, "ArchitectLevel3Dummy", 1);
            }
        }
    }
    else if (autoF7319B00_val == AbilityCommand("CombatEngineerResearch", 8)) {
        lv_i = 0;
        for ( ; ( (auto79729B43_ai >= 0 && lv_i <= auto79729B43_ae) || (auto79729B43_ai < 0 && lv_i >= auto79729B43_ae) ) ; lv_i += auto79729B43_ai ) {
            if ((lv_i != EventPlayer())) {
                TechTreeUpgradeAddLevel(lv_i, "ArchitectLevel4Dummy", 1);
            }
        }
    }
    else if (autoF7319B00_val == AbilityCommand("CombatEngineerSkillUpgrades", 4)) {
        lv_i = 0;
        for ( ; ( (autoDC2EADE7_ai >= 0 && lv_i <= autoDC2EADE7_ae) || (autoDC2EADE7_ai < 0 && lv_i >= autoDC2EADE7_ae) ) ; lv_i += autoDC2EADE7_ai ) {
            if ((lv_i != EventPlayer())) {
                TechTreeUpgradeAddLevel(lv_i, "ArchitectDurableFrameDummy", 1);
            }
        }
    }
    else if (autoF7319B00_val == AbilityCommand("CombatEngineerSkillUpgrades", 5)) {
        lv_i = 0;
        for ( ; ( (auto54B07051_ai >= 0 && lv_i <= auto54B07051_ae) || (auto54B07051_ai < 0 && lv_i >= auto54B07051_ae) ) ; lv_i += auto54B07051_ai ) {
            if ((lv_i != EventPlayer())) {
                TechTreeUpgradeAddLevel(lv_i, "ArchitectReusableMaterialsDummy", 1);
            }
        }
    }
    else {
        lv_i = 0;
        for ( ; ( (auto8C6F3505_ai >= 0 && lv_i <= auto8C6F3505_ae) || (auto8C6F3505_ai < 0 && lv_i >= auto8C6F3505_ae) ) ; lv_i += auto8C6F3505_ai ) {
            if ((lv_i != EventPlayer())) {
                TechTreeUpgradeAddLevel(lv_i, "ArchitectLevel1Dummy", 1);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ArchitectResearched_Init () {
    lib90F7C81D_gt_ArchitectResearched = TriggerCreate("lib90F7C81D_gt_ArchitectResearched_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ArchitectResearched, null, AbilityCommand("CombatEngineerResearch", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ArchitectResearched, null, AbilityCommand("CombatEngineerResearch", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ArchitectResearched, null, AbilityCommand("CombatEngineerResearch", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ArchitectResearched, null, AbilityCommand("CombatEngineerResearch", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ArchitectResearched, null, AbilityCommand("CombatEngineerSkillUpgrades", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ArchitectResearched, null, AbilityCommand("CombatEngineerSkillUpgrades", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scrap Parts Pickup
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ScrapPartsPickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE501046C_val;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE501046C_val = lib90F7C81D_gv_gamemode;
    {
        if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(lib90F7C81D_gv_combatEngineer.lv_scrapRandom)) == true) && (lib90F7C81D_gv_combatEngineer.lv_scrapRandomRespawning == false)) {
            lib90F7C81D_gf_SpawnScrapRandom();
        }
        else if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(lib90F7C81D_gv_combatEngineer.lv_scrapEngineerBay)) == true) && (lib90F7C81D_gv_combatEngineer.lv_scrapEngineerBayRespawning == false)) {
            lib90F7C81D_gf_SpawnScrapEngineerBay();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ScrapPartsPickup_Init () {
    lib90F7C81D_gt_ScrapPartsPickup = TriggerCreate("lib90F7C81D_gt_ScrapPartsPickup_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_ScrapPartsPickup, c_playerAny, "ScrapPartPickupsTriggerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grapple Hook Reset Height
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_GrappleHookResetHeight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_unit, 0.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_GrappleHookResetHeight_Init () {
    lib90F7C81D_gt_GrappleHookResetHeight = TriggerCreate("lib90F7C81D_gt_GrappleHookResetHeight_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_GrappleHookResetHeight, c_playerAny, "GrappleHookSA");
}

//--------------------------------------------------------------------------------------------------
// Trigger: IR Sensor
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_IRSensor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 1.5, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_90F7C81D_374B0AF4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_IRSensor_Init () {
    lib90F7C81D_gt_IRSensor = TriggerCreate("lib90F7C81D_gt_IRSensor_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_IRSensor, c_playerAny, "IRSensorTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gap Generator Shroud
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_GapGeneratorShroud_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_enemy;
    region lv_area;

    // Automatic Variable Declarations
    playergroup auto49BDC96E_g;
    int auto49BDC96E_var;

    // Variable Initialization
    lv_area = RegionCircle(UnitGetPosition(EventUnitCreatedUnit()), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "GapGeneratorDisorientationSA", "AreaArray[" + IntToString(0) + "].Radius", UnitGetOwner(EventUnitCreatedUnit())));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitCreatedUnit()) == 15)) {
        lv_enemy = true;
    }
    while ((UnitIsAlive(EventUnitCreatedUnit()) == true)) {
        if ((lv_enemy == false)) {
            VisFillArea(14, lv_area, c_fillTypeUnexplored, false);
            VisFillArea(15, lv_area, c_fillTypeUnexplored, false);
        }
        else {
            auto49BDC96E_g = lib90F7C81D_gv_players;
            auto49BDC96E_var = -1;
            while (true) {
                auto49BDC96E_var = PlayerGroupNextPlayer(auto49BDC96E_g, auto49BDC96E_var);
                if (auto49BDC96E_var < 0) { break; }
                VisFillArea(auto49BDC96E_var, lv_area, c_fillTypeUnexplored, false);
            }
        }
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_GapGeneratorShroud_Init () {
    lib90F7C81D_gt_GapGeneratorShroud = TriggerCreate("lib90F7C81D_gt_GapGeneratorShroud_Func");
    TriggerAddEventUnitCreated(lib90F7C81D_gt_GapGeneratorShroud, null, "GapGenerator", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Item Picked Up
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_MissionItemPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unit lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_item = EventUnitInventoryItem();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib90F7C81D_gv_players, lv_owner) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(lib90F7C81D_gv_missionItemPingItems, lv_item) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_MissionItemCarried(lv_item, lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_MissionItemPickedUp_Init () {
    lib90F7C81D_gt_MissionItemPickedUp = TriggerCreate("lib90F7C81D_gt_MissionItemPickedUp_Func");
    TriggerEnable(lib90F7C81D_gt_MissionItemPickedUp, false);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_MissionItemPickedUp, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_MissionItemPickedUp, null, c_unitInventoryChangeReceives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Item Dropped
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_MissionItemDropped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unit lv_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_item = EventUnitInventoryItem();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib90F7C81D_gv_missionItemPingItems, lv_item) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_MissionItemDropped(lv_owner, lv_item);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_MissionItemDropped_Init () {
    lib90F7C81D_gt_MissionItemDropped = TriggerCreate("lib90F7C81D_gt_MissionItemDropped_Func");
    TriggerEnable(lib90F7C81D_gt_MissionItemDropped, false);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_MissionItemDropped, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_MissionItemDropped, null, c_unitInventoryChangeLoses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Ability Text
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FragAbilityText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(lib90F7C81D_gv_players, UnitGetOwner(EventUnit())) == true) || (UnitGetOwner(EventUnit()) == 0) || (UnitGetOwner(EventUnit()) == 13)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_AIScatterFromPoint(EventUnitTargetPoint(), 4.0);
    if ((RandomInt(0, 7) == 4)) {
        lib90F7C81D_gf_CreateTextTagForAllPlayers(EventUnit(), StringExternal("Param/Value/lib_90F7C81D_565A4F0B"));
    }
    else {
        lib90F7C81D_gf_CreateTextTagForAllPlayers(EventUnit(), StringExternal("Param/Value/lib_90F7C81D_1455D741"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FragAbilityText_Init () {
    lib90F7C81D_gt_FragAbilityText = TriggerCreate("lib90F7C81D_gt_FragAbilityText_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_FragAbilityText, null, AbilityCommand("NewFragGrenade", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_FragAbilityText, null, AbilityCommand("FragGrenadeCav", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Item Text
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FragItemText_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_AIScatterFromPoint(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 4.0);
    if ((RandomInt(0, 7) == 4)) {
        lib90F7C81D_gf_CreateTextTagForAllPlayers(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/lib_90F7C81D_92CE698C"));
    }
    else {
        lib90F7C81D_gf_CreateTextTagForAllPlayers(EventPlayerEffectUsedUnit(c_effectUnitCaster), StringExternal("Param/Value/lib_90F7C81D_B5697A98"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FragItemText_Init () {
    lib90F7C81D_gt_FragItemText = TriggerCreate("lib90F7C81D_gt_FragItemText_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_FragItemText, c_playerAny, "FragGrenadeItemLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocket Warning
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_RocketWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_CreateTextTagForAllPlayers(EventUnit(), StringExternal("Param/Value/lib_90F7C81D_2D88B661"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_RocketWarning_Init () {
    lib90F7C81D_gt_RocketWarning = TriggerCreate("lib90F7C81D_gt_RocketWarning_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("ATRocket", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("HERocket", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("HERocketLN", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("StingerMissile", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("StingerMissileLN", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("JavelinMissile", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("StingerMissileLauncher", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("MiniMRL", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("MRL", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_RocketWarning, null, AbilityCommand("RAMRL", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake Small
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_CameraShakeSmall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;

    // Automatic Variable Declarations
    unitgroup autoA5F4CA46_g;
    int autoA5F4CA46_u;
    unit autoA5F4CA46_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA5F4CA46_g = lib90F7C81D_gv_heroesGroup;
    autoA5F4CA46_u = UnitGroupCount(autoA5F4CA46_g, c_unitCountAll);
    for (;; autoA5F4CA46_u -= 1) {
        autoA5F4CA46_var = UnitGroupUnitFromEnd(autoA5F4CA46_g, autoA5F4CA46_u);
        if (autoA5F4CA46_var == null) { break; }
        if ((lib90F7C81D_gv_gameplay.lv_cameraShake[UnitGetOwner(autoA5F4CA46_var)] == true) && (UnitIsAlive(autoA5F4CA46_var) == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(autoA5F4CA46_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 8.0)) {
                lv_magnitude = (2.2 - (DistanceBetweenPoints(UnitGetPosition(autoA5F4CA46_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) / 4.0));
                lv_dist = DistanceBetweenPoints(UnitGetPosition(autoA5F4CA46_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
                CameraShakeStart(UnitGetOwner(autoA5F4CA46_var), c_cameraPositionTarget, c_cameraDirectionXY, lv_magnitude, 11.0, 5.0, 1.0);
                SoundPlay(SoundLink("EarRinging", -1), PlayerGroupSingle(UnitGetOwner(autoA5F4CA46_var)), (80.0 - (lv_dist * 10.0)), 0.0);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_CameraShakeSmall_Init () {
    lib90F7C81D_gt_CameraShakeSmall = TriggerCreate("lib90F7C81D_gt_CameraShakeSmall_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamageItem");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage2");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage3");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage4");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "ClusterRocketsDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "HurricaneMissilesDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "CrowdControlDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "RACrowdControlDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "RiflemanMGLDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "MGLDamageItem");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "VesaniaGLDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "OrbitalStrikeDamage1");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "OrbitalStrikeEMPDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "CycloneMissileDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeSmall, c_playerAny, "CycloneMissileDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake Large
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_CameraShakeLarge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;

    // Automatic Variable Declarations
    unitgroup autoC35ED3A8_g;
    int autoC35ED3A8_u;
    unit autoC35ED3A8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC35ED3A8_g = lib90F7C81D_gv_heroesGroup;
    autoC35ED3A8_u = UnitGroupCount(autoC35ED3A8_g, c_unitCountAll);
    for (;; autoC35ED3A8_u -= 1) {
        autoC35ED3A8_var = UnitGroupUnitFromEnd(autoC35ED3A8_g, autoC35ED3A8_u);
        if (autoC35ED3A8_var == null) { break; }
        if ((UnitIsAlive(autoC35ED3A8_var) == true) && (lib90F7C81D_gv_gameplay.lv_cameraShake[UnitGetOwner(autoC35ED3A8_var)] == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(autoC35ED3A8_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 10.0)) {
                lv_magnitude = (2.9 - (DistanceBetweenPoints(UnitGetPosition(autoC35ED3A8_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) / 5.0));
                lv_dist = DistanceBetweenPoints(UnitGetPosition(autoC35ED3A8_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
                CameraShakeStart(UnitGetOwner(autoC35ED3A8_var), c_cameraPositionTarget, c_cameraDirectionXY, lv_magnitude, 11.0, 2.0, 1.5);
                SoundPlay(SoundLink("EarRinging", -1), PlayerGroupSingle(UnitGetOwner(autoC35ED3A8_var)), (100.0 - (lv_dist * 10.0)), 0.0);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_CameraShakeLarge_Init () {
    lib90F7C81D_gt_CameraShakeLarge = TriggerCreate("lib90F7C81D_gt_CameraShakeLarge_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "MRLDamageItem");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "ExplosiveChargeDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "C4ChargeExplosionDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "CallforFirePLDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "StingerMissileDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "HERocketDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "ATRocketDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "JavelinMissileImpactDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "SatchelExplosionDamage");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_CameraShakeLarge, c_playerAny, "OrbitalBombardmentDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weekly Modifier Init
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_WeeklyModifierInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    datetime lv_dateTimeInit;
    int lv_i;
    int lv_d;

    // Automatic Variable Declarations
    const int auto12292FB2_ae = 2;
    const int auto12292FB2_ai = 1;

    // Variable Initialization
    lv_d = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dateTimeInit = InitialDateTimeGet();
    lib90F7C81D_gv_weeklyModifier.lv_date_Time = lv_dateTimeInit;
    lib90F7C81D_gv_weeklyModifier.lv_modifier = lib90F7C81D_gf_GetModifier();
    lib90F7C81D_gv_weeklyModifier.lv_mode = UserDataGetInt("Modifiers", UserDataInstance("Modifiers", lib90F7C81D_gv_weeklyModifier.lv_modifier), "Mode", 1);
    DialogControlHookupStandard(c_triggerControlTypePanel, "$ModifierContainer");
    lib90F7C81D_gv_weeklyModifier.lv_frame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "$ModifierMode");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Mode", IntToString(lib90F7C81D_gv_weeklyModifier.lv_mode));
    lv_i = 0;
    for ( ; ( (auto12292FB2_ai >= 0 && lv_i <= auto12292FB2_ae) || (auto12292FB2_ai < 0 && lv_i >= auto12292FB2_ae) ) ; lv_i += auto12292FB2_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("$ModifierIcon" + IntToString(lv_i)));
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), UserDataGetText("Modifiers", UserDataInstance("Modifiers", lib90F7C81D_gv_weeklyModifier.lv_modifier), "Icon Tooltip", (lv_i + 1)), PlayerGroupAll());
        DialogControlHookupStandard(c_triggerControlTypeImage, ("$ModifierIcon" + IntToString(lv_i) + "/IconImage"));
        lib90F7C81D_gv_weeklyModifier.lv_icons[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_weeklyModifier.lv_icons[lv_i], UserDataGetImagePath("Modifiers", UserDataInstance("Modifiers", lib90F7C81D_gv_weeklyModifier.lv_modifier), "Icons", (lv_i + 1)), PlayerGroupAll());
        if ((lv_i < 2)) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("$RewardIcon" + IntToString(lv_i)));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), UserDataGetText("Modifiers", UserDataInstance("Modifiers", lib90F7C81D_gv_weeklyModifier.lv_modifier), "Reward Text", (lv_i + 1)), PlayerGroupAll());
            DialogControlHookupStandard(c_triggerControlTypeImage, ("$RewardIcon" + IntToString(lv_i) + "/IconImage"));
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("Modifiers", UserDataInstance("Modifiers", lib90F7C81D_gv_weeklyModifier.lv_modifier), "Unlock Icon", (lv_i + 1)), PlayerGroupAll());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_WeeklyModifierInit_Init () {
    lib90F7C81D_gt_WeeklyModifierInit = TriggerCreate("lib90F7C81D_gt_WeeklyModifierInit_Func");
    TriggerAddEventMapInit(lib90F7C81D_gt_WeeklyModifierInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 1
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddResponse(14, "SpeedFreaks");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week1_Init () {
    lib90F7C81D_gt_Week1 = TriggerCreate("lib90F7C81D_gt_Week1_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week1, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 2
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddResponse(14, "WeMoveUnseen");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week2_Init () {
    lib90F7C81D_gt_Week2 = TriggerCreate("lib90F7C81D_gt_Week2_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week2, 2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 3
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddResponse(14, "HardenedWill");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week3_Init () {
    lib90F7C81D_gt_Week3 = TriggerCreate("lib90F7C81D_gt_Week3_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week3, 3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 4
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    string lv_unit;
    string lv_weapon;

    // Automatic Variable Declarations
    int auto434E2164_ae;
    const int auto434E2164_ai = 1;
    playergroup autoC06468F3_g;
    int autoC06468F3_var;

    // Variable Initialization
    lv_unit = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto434E2164_ae = (UserDataInstanceCount("SandBoxEnemyList") - 1);
    lv_i = 1;
    for ( ; ( (auto434E2164_ai >= 0 && lv_i <= auto434E2164_ae) || (auto434E2164_ai < 0 && lv_i >= auto434E2164_ae) ) ; lv_i += auto434E2164_ai ) {
        lv_unit = (UserDataGetGameLink("SandBoxEnemyList", UserDataInstance("SandBoxEnemyList", lv_i), "Unit", 1));
        lv_weapon = "Unit,lv_unit,WeaponArray[0].Link";
        CatalogFieldValueModify(c_gameCatalogWeapon, CatalogReferenceGet((("Unit," + lv_unit + ",WeaponArray[0].Link")), c_playerAny), "CriticalChance", 14, "0.50", c_upgradeOperationSet);
    }
    autoC06468F3_g = lib90F7C81D_gv_players;
    autoC06468F3_var = -1;
    while (true) {
        autoC06468F3_var = PlayerGroupNextPlayer(autoC06468F3_g, autoC06468F3_var);
        if (autoC06468F3_var < 0) { break; }
        TechTreeUpgradeAddLevel(autoC06468F3_var, "AmmoShortage", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week4_Init () {
    lib90F7C81D_gt_Week4 = TriggerCreate("lib90F7C81D_gt_Week4_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week4, 4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 5
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weeklyModifier.lv_going_Dark_Enabled = true;
    while (!((GameGetMissionTime() >= 120.0))) {
        Wait(1.0, c_timeGame);
    }
    while ((lib90F7C81D_gv_gameOver == false)) {
        if ((TriggerIsEnabled(TriggerGetCurrent()) == true)) {
            lib90F7C81D_gf_MinimapOffline(true);
            Wait(RandomFixed(30.0, 60.0), c_timeGame);
            if ((TriggerIsEnabled(TriggerGetCurrent()) == true)) {
                lib90F7C81D_gf_MinimapOffline(false);
                Wait(RandomFixed(40.0, 100.0), c_timeGame);
            }
        }
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week5_Init () {
    lib90F7C81D_gt_Week5 = TriggerCreate("lib90F7C81D_gt_Week5_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week5, 5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 6
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weeklyModifier.lv_race_Against_Time = true;
    PlayerAddResponse(14, "Barrier");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week6_Init () {
    lib90F7C81D_gt_Week6 = TriggerCreate("lib90F7C81D_gt_Week6_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week6, 6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 7
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_weather;

    // Automatic Variable Declarations
    int auto97A99094_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weeklyModifier.lv_random_Weather_Disable = true;
    DialogControlHookupStandard(c_triggerControlTypePanel, "$MutationMOSSelection");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "RifleMode", "ON");
    lib90F7C81D_gv_weather.lv_weatherEventOn = false;
    while (!((GameGetMissionTime() >= 60.0))) {
        Wait(10.0, c_timeGame);
    }
    while ((lib90F7C81D_gv_gameOver == false)) {
        if ((lib90F7C81D_gv_weather.lv_weatherEventOn == true)) {
            lib90F7C81D_gf_DebugWeatherEvent(lv_weather);
            Wait(5.0, c_timeGame);
        }
        lib90F7C81D_gv_weather.lv_randomWeatherChance = ((lib90F7C81D_gv_weather.lv_randomWeatherChance + RandomInt(1, 5)) % 6);
        auto97A99094_val = lib90F7C81D_gv_weather.lv_randomWeatherChance;
        if (auto97A99094_val == 1) {
            lv_weather = "RainStorm";
        }
        else if (auto97A99094_val == 2) {
            lv_weather = "Cloudy";
        }
        else if (auto97A99094_val == 3) {
            lv_weather = "BloodMoon";
        }
        else if (auto97A99094_val == 4) {
            lv_weather = "IntenseSunlight";
        }
        else if (auto97A99094_val == 5) {
            lv_weather = "Snow";
        }
        else {
            lv_weather = "Fog";
        }
        lib90F7C81D_gf_DebugWeatherEvent(lv_weather);
        Wait(RandomFixed(215.0, 495.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week7_Init () {
    lib90F7C81D_gt_Week7 = TriggerCreate("lib90F7C81D_gt_Week7_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week7, 7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 8
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF749B91A_g;
    int autoF749B91A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyFixed(14, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 80.0);
    PlayerModifyPropertyFixed(14, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, 115.0);
    autoF749B91A_g = lib90F7C81D_gv_players;
    autoF749B91A_var = -1;
    while (true) {
        autoF749B91A_var = PlayerGroupNextPlayer(autoF749B91A_g, autoF749B91A_var);
        if (autoF749B91A_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoF749B91A_var, "1LifeModifier", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week8_Init () {
    lib90F7C81D_gt_Week8 = TriggerCreate("lib90F7C81D_gt_Week8_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week8, 8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Week 9
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Week9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_weeklyModifier.lv_tier1 = true;
    lib90F7C81D_gv_weeklyModifier.lv_tier1_Timer = 80.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Week9_Init () {
    lib90F7C81D_gt_Week9 = TriggerCreate("lib90F7C81D_gt_Week9_Func");
    lib90F7C81D_gf_ModifierEvent(lib90F7C81D_gt_Week9, 9);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievements Panel Init
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_AchievementsPanelInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1EB953C4_g;
    int auto1EB953C4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto1EB953C4_g = lib90F7C81D_gv_players;
    auto1EB953C4_var = -1;
    while (true) {
        auto1EB953C4_var = PlayerGroupNextPlayer(auto1EB953C4_g, auto1EB953C4_var);
        if (auto1EB953C4_var < 0) { break; }
        lib90F7C81D_gf_SetupSkinPanel(auto1EB953C4_var);
        lib90F7C81D_gf_SetupModeAchievementsPanel(auto1EB953C4_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_AchievementsPanelInit_Init () {
    lib90F7C81D_gt_AchievementsPanelInit = TriggerCreate("lib90F7C81D_gt_AchievementsPanelInit_Func");
    lib90F7C81D_gf_GameEvent(lib90F7C81D_gt_AchievementsPanelInit, "InitializeAchievements");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Concentrated Fire
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ConcentratedFire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killsUpdate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[74][UnitGetOwner(EventUnit())] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        lib90F7C81D_gv_mOSAchievements.lv_rifleman_CF[UnitGetOwner(EventUnit())] = PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "UnitsKilledCount");
    }
    else {
        lv_killsUpdate = (PlayerScoreValueGetAsInt(UnitGetOwner(EventUnit()), "UnitsKilledCount") - lib90F7C81D_gv_mOSAchievements.lv_rifleman_CF[UnitGetOwner(EventUnit())]);
        lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[0][UnitGetOwner(EventUnit())] += lv_killsUpdate;
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[0][0], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[0][UnitGetOwner(EventUnit())]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[0][UnitGetOwner(EventUnit())] >= 2000) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[74][UnitGetOwner(EventUnit())] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[74][UnitGetOwner(EventUnit())] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Concentrated Fire", UnitGetOwner(EventUnit()));
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[0][0], PlayerGroupSingle(UnitGetOwner(EventUnit())), "AchievementBadge", "Earned");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ConcentratedFire_Init () {
    lib90F7C81D_gt_ConcentratedFire = TriggerCreate("lib90F7C81D_gt_ConcentratedFire_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ConcentratedFire, null, "FocusFireNew", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ConcentratedFire, null, "FocusFireNew", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jack Of All Trades
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_JackOfAllTrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_count;

    // Automatic Variable Declarations
    const int auto2B2B1E00_ae = 13;
    const int auto2B2B1E00_ai = 1;
    const int autoC9A557A1_ae = 13;
    const int autoC9A557A1_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[75][UnitGetOwner(EventUnit())] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (auto2B2B1E00_ai >= 0 && lv_index <= auto2B2B1E00_ae) || (auto2B2B1E00_ai < 0 && lv_index >= auto2B2B1E00_ae) ) ; lv_index += auto2B2B1E00_ai ) {
        if ((lib90F7C81D_gv_mOSAchievements.lv_rifleman_JOAT[lv_index][UnitGetOwner(EventUnit())] == true)) {
            lv_count += 1;
        }
        else {
            if ((lib90F7C81D_gv_mOSAchievements.lv_rifleman_JOAT[lv_index][UnitGetOwner(EventUnit())] == false) && (lib90F7C81D_gf_RiflemanSUIndex(EventUnitAbility()) == lv_index)) {
                lib90F7C81D_gv_mOSAchievements.lv_rifleman_JOAT[lv_index][UnitGetOwner(EventUnit())] = true;
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[0][1], PlayerGroupSingle(UnitGetOwner(EventUnit())), ("ExtraIcon" + IntToString((lv_index + 1))), "Unlocked");
                lv_count += 1;
            }
        }
    }
    if ((lv_count == 14)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[75][UnitGetOwner(EventUnit())] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Jack of All Trades", UnitGetOwner(EventUnit()));
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[0][1], PlayerGroupSingle(UnitGetOwner(EventUnit())), "AchievementBadge", "Earned");
        lv_index = 0;
        for ( ; ( (autoC9A557A1_ai >= 0 && lv_index <= autoC9A557A1_ae) || (autoC9A557A1_ai < 0 && lv_index >= autoC9A557A1_ae) ) ; lv_index += autoC9A557A1_ai ) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[0][1], PlayerGroupSingle(EventPlayer()), ("ExtraIcon" + IntToString((lv_index + 1))), "Hidden");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_JackOfAllTrades_Init () {
    lib90F7C81D_gt_JackOfAllTrades = TriggerCreate("lib90F7C81D_gt_JackOfAllTrades_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_JackOfAllTrades, null, AbilityCommand("RiflemanSkillUpgrades", 13), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pull The Pin
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PullThePin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[76][UnitGetOwner(EventUnit())] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[2][UnitGetOwner(EventUnit())] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[0][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[2][UnitGetOwner(EventUnit())]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[2][UnitGetOwner(EventUnit())] >= 150)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[76][UnitGetOwner(EventUnit())] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Pull The Pin", UnitGetOwner(EventUnit()));
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[0][2], PlayerGroupSingle(UnitGetOwner(EventUnit())), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PullThePin_Init () {
    lib90F7C81D_gt_PullThePin = TriggerCreate("lib90F7C81D_gt_PullThePin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Not Enough Energy
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_NotEnoughEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7FE80172_g;
    int auto7FE80172_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7FE80172_g = lib90F7C81D_gv_players;
    auto7FE80172_var = -1;
    while (true) {
        auto7FE80172_var = PlayerGroupNextPlayer(auto7FE80172_g, auto7FE80172_var);
        if (auto7FE80172_var < 0) { break; }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[auto7FE80172_var]) == "NewRifleman") && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[77][auto7FE80172_var] == false) && (PlayerScoreValueGetAsInt(auto7FE80172_var, "MineralsSpent") == 0) && (lib90F7C81D_gv_sTATS.lv_tempKills[auto7FE80172_var] >= 300)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[77][auto7FE80172_var] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Not Enough Energy", auto7FE80172_var);
            PlayerBankSave(auto7FE80172_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_NotEnoughEnergy_Init () {
    lib90F7C81D_gt_NotEnoughEnergy = TriggerCreate("lib90F7C81D_gt_NotEnoughEnergy_Func");
    TriggerAddEventGeneric(lib90F7C81D_gt_NotEnoughEnergy, "Not Enough Energy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Big Pharma
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_BigPharma_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_caster) == "CombatMedic"))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[79][EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[5][EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[1][1], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[5][EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)]), PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[5][EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] >= 100)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[79][EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Big Pharma", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[1][1], PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_BigPharma_Init () {
    lib90F7C81D_gt_BigPharma = TriggerCreate("lib90F7C81D_gt_BigPharma_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "BrokenArmRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "BrokenLegRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "BrokenRibCageRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "BruisedHeadRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "BruisedTorsoRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "BenignInfectionRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "ClassIIHemorrhagingRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "ClassIIIHemorrhagingRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "ClassIVHemorrhagingRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "ConcussionRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "CorrosiveVenomRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "DebilitatingInfectionRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "FracturedArmRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "FracturedLegRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "FracturedRibCageRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "GreaterVenomRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "GreaterWidowVenomRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "JumpInjuryRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "MalignantInfectionRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "MinorLacerationsRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "ModerateLacerationsRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "ModerateLacerationsRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "NeurotoxicVenomIRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "NeurotoxicVenomIIRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "ParasiteEggsRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "ParasiticInfectionRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "SevereLacerationsRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "SprainedAnkleRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "SprainedWristRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "TBIRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "VenomRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "WidowVenomRB");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_BigPharma, c_playerAny, "WidowersKissRB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Full Auto Please
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FullAutoPlease_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AutomaticRifleman"))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[82][EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[8][UnitGetOwner(EventUnit())] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[2][0], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[8][UnitGetOwner(EventUnit())]), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[8][UnitGetOwner(EventUnit())] >= 50) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[82][EventPlayer()] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[82][UnitGetOwner(EventUnit())] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Full Auto Please", UnitGetOwner(EventUnit()));
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[2][0], PlayerGroupSingle(UnitGetOwner(EventUnit())), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FullAutoPlease_Init () {
    lib90F7C81D_gt_FullAutoPlease = TriggerCreate("lib90F7C81D_gt_FullAutoPlease_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_FullAutoPlease, null, "FullAuto", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Point Of Impact
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PointOfImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damageSource;
    fixed lv_damageTaken;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageSource = EventUnitDamageSourceUnit();
    lv_damageTaken = EventUnitDamageAmount();

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_CreateTextTagWithAnimation(lv_damageSource, FixedToString(lv_damageTaken, 0), "FCT_Status_Crit", lib90F7C81D_ge_FCTDirection_Middle, PlayerGroupSingle(UnitGetOwner(lv_damageSource)), "Ref_Overhead", 0.8125, 0, true);
    if ((UnitGetType(lv_damageSource) == "AutomaticRifleman") && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[83][EventUnitDamageSourcePlayer()] == false) && (lib90F7C81D_gv_achievementPanel.lv_achievementsDisabled == false)) {
        lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[9][EventUnitDamageSourcePlayer()] += FixedToInt(lv_damageTaken);
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[2][1], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[9][EventUnitDamageSourcePlayer()]), PlayerGroupSingle(EventUnitDamageSourcePlayer()));
        if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[9][EventUnitDamageSourcePlayer()] >= 50000)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[83][EventUnitDamageSourcePlayer()] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Point Of Impact", EventUnitDamageSourcePlayer());
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[2][1], PlayerGroupSingle(EventUnitDamageSourcePlayer()), "AchievementBadge", "Earned");
        }
    }
    lv_damageSource = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PointOfImpact_Init () {
    lib90F7C81D_gt_PointOfImpact = TriggerCreate("lib90F7C81D_gt_PointOfImpact_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_PointOfImpact, null, c_unitDamageTypeRanged, c_unitDamageEither, "MachineGunCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_PointOfImpact, null, c_unitDamageTypeRanged, c_unitDamageEither, "M41SAWCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_PointOfImpact, null, c_unitDamageTypeRanged, c_unitDamageEither, "M241MMGCriticalDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Ready
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_BattleReady_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[85][EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_aR_SU[EventPlayer()] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[2][3], IntToText(lib90F7C81D_gv_mOSAchievements.lv_aR_SU[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lib90F7C81D_gv_mOSAchievements.lv_aR_SU[EventPlayer()] >= 5)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[85][EventPlayer()] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Battle Ready", EventPlayer());
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[2][3], PlayerGroupSingle(EventPlayer()), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_BattleReady_Init () {
    lib90F7C81D_gt_BattleReady = TriggerCreate("lib90F7C81D_gt_BattleReady_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_BattleReady, null, AbilityCommand("AutomaticRiflemanSkillUpgrades", 12), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Booby Trap
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_BoobyTrap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[86][EventUnitDamageSourcePlayer()] == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_mOSAchievements.lv_playerCS[EventUnitDamageSourcePlayer()] == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[12][EventUnitDamageSourcePlayer()] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[3][0], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[12][EventUnitDamageSourcePlayer()]), PlayerGroupSingle(EventUnitDamageSourcePlayer()));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[12][EventUnitDamageSourcePlayer()] >= 500)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[86][EventUnitDamageSourcePlayer()] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Booby Trap", EventUnitDamageSourcePlayer());
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[3][0], PlayerGroupSingle(EventUnitDamageSourcePlayer()), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_BoobyTrap_Init () {
    lib90F7C81D_gt_BoobyTrap = TriggerCreate("lib90F7C81D_gt_BoobyTrap_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_BoobyTrap, null, c_unitDamageTypeSpell, c_unitDamageFatal, "ClaymoreDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Eye See You
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_EyeSeeYou_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[87][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[13][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[3][1], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[13][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[13][lv_player] >= 35)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[87][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Eye See You", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[3][1], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_EyeSeeYou_Init () {
    lib90F7C81D_gt_EyeSeeYou = TriggerCreate("lib90F7C81D_gt_EyeSeeYou_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_EyeSeeYou, null, AbilityCommand("MotionSensorCav", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Target Locked In
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TargetLockedIn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[88][EventPlayer()] == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitTargetUnit()), c_unitAttributeMassive) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[14][EventPlayer()] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[3][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[14][EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[14][EventPlayer()] >= 50)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[88][EventPlayer()] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Target Locked In", EventPlayer());
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[3][2], PlayerGroupSingle(EventPlayer()), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TargetLockedIn_Init () {
    lib90F7C81D_gt_TargetLockedIn = TriggerCreate("lib90F7C81D_gt_TargetLockedIn_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_TargetLockedIn, null, AbilityCommand("LaserDesignatorCAV", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heavy Hitter
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_HeavyHitter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[91][EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[17][lv_caster] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[4][1], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[17][lv_caster]), PlayerGroupSingle(lv_caster));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[17][lv_caster] >= 15)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[91][lv_caster] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Heavy Hitter", lv_caster);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][1], PlayerGroupSingle(lv_caster), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_HeavyHitter_Init () {
    lib90F7C81D_gt_HeavyHitter = TriggerCreate("lib90F7C81D_gt_HeavyHitter_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_HeavyHitter, null, AbilityCommand("ReinforcePosition", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Kombat
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LNKombat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damage = EventUnitDamageAmount();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[92][EventUnitDamageSourcePlayer()] == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[18][EventUnitDamageSourcePlayer()] += FixedToInt(lv_damage);
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[4][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[18][EventUnitDamageSourcePlayer()]), PlayerGroupSingle(EventUnitDamageSourcePlayer()));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[18][EventUnitDamageSourcePlayer()] >= 125000)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[92][EventUnitDamageSourcePlayer()] = true;
        lib90F7C81D_gf_FlashAchievementBadge("LN Kombat", EventUnitDamageSourcePlayer());
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[4][2], PlayerGroupSingle(EventUnitDamageSourcePlayer()), "AchievementBadge", "Earned");
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LNKombat_Init () {
    lib90F7C81D_gt_LNKombat = TriggerCreate("lib90F7C81D_gt_LNKombat_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNARMachineGun");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNARMachineGunCritical");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNARIncendiaryMachineGun");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNRiflemanRifle");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNJavRifle");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNRiflemanRifleCritical");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNDMRDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNDMRCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNShotgun");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNShotgunSpreadDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNShotgunSpreadDamageAir");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_LNKombat, null, c_unitDamageTypeAny, c_unitDamageEither, "LNRifleButtDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defense Budget
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_DefenseBudget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8B6582C4_g;
    int auto8B6582C4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B6582C4_g = lib90F7C81D_gv_players;
    auto8B6582C4_var = -1;
    while (true) {
        auto8B6582C4_var = PlayerGroupNextPlayer(auto8B6582C4_g, auto8B6582C4_var);
        if (auto8B6582C4_var < 0) { break; }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[auto8B6582C4_var]) == "SFAAT") && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[93][auto8B6582C4_var] == false) && (lib90F7C81D_gv_mOSAchievements.lv_sFAATLNRecruited[auto8B6582C4_var] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[93][auto8B6582C4_var] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Defense Budget", auto8B6582C4_var);
            PlayerBankSave(auto8B6582C4_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_DefenseBudget_Init () {
    lib90F7C81D_gt_DefenseBudget = TriggerCreate("lib90F7C81D_gt_DefenseBudget_Func");
    TriggerAddEventGeneric(lib90F7C81D_gt_DefenseBudget, "Defense Budget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocketeer
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Rocketeer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_count;

    // Automatic Variable Declarations
    const int autoFCB1A532_ae = 7;
    const int autoFCB1A532_ai = 1;
    const int autoB2019A28_ae = 7;
    const int autoB2019A28_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[94][EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (autoFCB1A532_ai >= 0 && lv_index <= autoFCB1A532_ae) || (autoFCB1A532_ai < 0 && lv_index >= autoFCB1A532_ae) ) ; lv_index += autoFCB1A532_ai ) {
        if ((lib90F7C81D_gv_mOSAchievements.lv_jV_Rocketeer[lv_index][UnitGetOwner(EventUnit())] == true)) {
            lv_count += 1;
        }
        else {
            if ((lib90F7C81D_gv_mOSAchievements.lv_jV_Rocketeer[lv_index][UnitGetOwner(EventUnit())] == false) && (lib90F7C81D_gf_JavelinGunnerSUIndex(EventUnitAbility()) == lv_index)) {
                lib90F7C81D_gv_mOSAchievements.lv_jV_Rocketeer[lv_index][UnitGetOwner(EventUnit())] = true;
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[5][0], PlayerGroupSingle(UnitGetOwner(EventUnit())), ("ExtraIcon" + IntToString((lv_index + 1))), "Unlocked");
                lv_count += 1;
            }
        }
    }
    if ((lv_count == 8)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[94][UnitGetOwner(EventUnit())] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Rocketeer", UnitGetOwner(EventUnit()));
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[5][0], PlayerGroupSingle(UnitGetOwner(EventUnit())), "AchievementBadge", "Earned");
        lv_index = 0;
        for ( ; ( (autoB2019A28_ai >= 0 && lv_index <= autoB2019A28_ae) || (autoB2019A28_ai < 0 && lv_index >= autoB2019A28_ae) ) ; lv_index += autoB2019A28_ai ) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[5][0], PlayerGroupSingle(EventPlayer()), ("ExtraIcon" + IntToString((lv_index + 1))), "Hidden");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Rocketeer_Init () {
    lib90F7C81D_gt_Rocketeer = TriggerCreate("lib90F7C81D_gt_Rocketeer_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Rocketeer, null, AbilityCommand("JavelinGunnerSkillUpgrades", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Rocketeer, null, AbilityCommand("JavelinGunnerSkillUpgrades", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Rocketeer, null, AbilityCommand("JavelinGunnerSkillUpgrades", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Rocketeer, null, AbilityCommand("JavelinGunnerSkillUpgrades", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Rocketeer, null, AbilityCommand("JavelinGunnerSkillUpgrades", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Rocketeer, null, AbilityCommand("JavelinGunnerSkillUpgrades", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Rocketeer, null, AbilityCommand("JavelinGunnerSkillUpgrades", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Rocketeer, null, AbilityCommand("JavelinGunnerSkillUpgrades", 13), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Work
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TeamWork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayer();
    lv_target = EventUnitTargetUnit();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[95][lv_caster] == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_target, "LaserDesignator") == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_caster, "JavelinMissileLaserGuidance", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[21][lv_caster] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[5][1], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[21][lv_caster]), PlayerGroupSingle(lv_caster));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[21][lv_caster] >= 3)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[95][lv_caster] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Team Work", lv_caster);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[5][1], PlayerGroupSingle(lv_caster), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TeamWork_Init () {
    lib90F7C81D_gt_TeamWork = TriggerCreate("lib90F7C81D_gt_TeamWork_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_TeamWork, null, AbilityCommand("JavelinMissile", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finish Him
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FinishHim_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_mOSAchievements.lv_playerJV[EventUnitDamageSourcePlayer()] == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[96][EventUnitDamageSourcePlayer()] == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[22][EventUnitDamageSourcePlayer()] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[5][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[22][EventUnitDamageSourcePlayer()]), PlayerGroupSingle(EventUnitDamageSourcePlayer()));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[22][EventUnitDamageSourcePlayer()] >= 5) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[96][EventUnitDamageSourcePlayer()] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[96][EventUnitDamageSourcePlayer()] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Finish Him", EventUnitDamageSourcePlayer());
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[5][2], PlayerGroupSingle(EventUnitDamageSourcePlayer()), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FinishHim_Init () {
    lib90F7C81D_gt_FinishHim = TriggerCreate("lib90F7C81D_gt_FinishHim_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_FinishHim, null, c_unitDamageTypeSpell, c_unitDamageFatal, "ATRocketDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Demolition Man
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_DemolitionMan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_mOSAchievements.lv_playerJV[EventUnitDamageSourcePlayer()] == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventUnitDamageSourcePlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[97][EventUnitDamageSourcePlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[23][EventUnitDamageSourcePlayer()] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[5][3], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[23][EventUnitDamageSourcePlayer()]), PlayerGroupSingle(EventUnitDamageSourcePlayer()));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[23][EventUnitDamageSourcePlayer()] >= 2000) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[97][EventUnitDamageSourcePlayer()] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[97][EventUnitDamageSourcePlayer()] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Demolition Man", EventUnitDamageSourcePlayer());
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[5][3], PlayerGroupSingle(EventUnitDamageSourcePlayer()), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_DemolitionMan_Init () {
    lib90F7C81D_gt_DemolitionMan = TriggerCreate("lib90F7C81D_gt_DemolitionMan_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_DemolitionMan, null, c_unitDamageTypeSpell, c_unitDamageFatal, "HERocketDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Maelstrom
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Maelstrom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitBehaviorEffectUnit(EventUnit(), "MonomolecularWire", c_effectUnitCaster, 0);
    lv_player = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_caster) == "SquadDesignatedMarksman"))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[98][lv_player] == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_player, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[24][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[6][0], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[24][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[24][lv_player] >= 500) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[98][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[98][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Maelstrom", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[6][0], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Maelstrom_Init () {
    lib90F7C81D_gt_Maelstrom = TriggerCreate("lib90F7C81D_gt_Maelstrom_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_Maelstrom, null, "MonomolecularWire", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Smoke 'Em
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SmokeEm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[99][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[25][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[6][1], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[25][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[25][lv_player] >= 25)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[99][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Smoke 'Em", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[6][1], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SmokeEm_Init () {
    lib90F7C81D_gt_SmokeEm = TriggerCreate("lib90F7C81D_gt_SmokeEm_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_SmokeEm, null, AbilityCommand("DeploySmoke", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supersoldier
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Supersoldier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_damageScore;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_damageScore = PlayerScoreValueGetAsFixed(lv_player, "TotalDamageDone");

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SquadDesignatedMarksman"))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[100][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        lib90F7C81D_gv_mOSAchievements.lv_sDM_Supersoldier_Prev[lv_player] = lv_damageScore;
    }
    else {
        lib90F7C81D_gv_mOSAchievements.lv_sDM_Supersoldier_Curr[lv_player] = lv_damageScore;
        lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[26][lv_player] += FixedToInt((lib90F7C81D_gv_mOSAchievements.lv_sDM_Supersoldier_Curr[lv_player] - lib90F7C81D_gv_mOSAchievements.lv_sDM_Supersoldier_Prev[lv_player]));
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[6][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[26][lv_player]), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[26][lv_player] >= 25000) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[100][lv_player] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[100][lv_player] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Supersoldier", lv_player);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[6][2], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Supersoldier_Init () {
    lib90F7C81D_gt_Supersoldier = TriggerCreate("lib90F7C81D_gt_Supersoldier_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_Supersoldier, null, "RapidFire", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_Supersoldier, null, "RapidFire", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feel the Force
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FeeltheForce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lib90F7C81D_gv_playerHeroes[lv_player]) == "SquadDesignatedMarksman"))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[101][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[27][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[6][3], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[27][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[27][lv_player] >= 100) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[101][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[101][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Feel the Force", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[6][3], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FeeltheForce_Init () {
    lib90F7C81D_gt_FeeltheForce = TriggerCreate("lib90F7C81D_gt_FeeltheForce_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_FeeltheForce, c_playerAny, "VolatileExplosion");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat Orders
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_CombatOrders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_max;
    int lv_index;

    // Automatic Variable Declarations
    const int auto64EE35FA_ae = 5;
    const int auto64EE35FA_ai = 1;
    const int auto79ABE362_ae = 5;
    const int auto79ABE362_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[102][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = lib90F7C81D_gf_CombatOrdersBuff(EventUnitBehavior());
    if ((lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[lv_index][lv_player] != 5)) {
        lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[lv_index][lv_player] += 1;
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_combatOrdersTooltip[lv_index], lib90F7C81D_gf_CombatOrdersCount(lv_index, lv_player), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[lv_index][lv_player] >= 5)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString((lv_index + 1))), "Unlocked");
        }
    }
    lv_index = 0;
    for ( ; ( (auto64EE35FA_ai >= 0 && lv_index <= auto64EE35FA_ae) || (auto64EE35FA_ai < 0 && lv_index >= auto64EE35FA_ae) ) ; lv_index += auto64EE35FA_ai ) {
        if ((lib90F7C81D_gv_mOSAchievements.lv_pL_Combat_Orders[lv_index][lv_player] == 5)) {
            lv_max += 1;
        }
    }
    if ((lv_max == 6)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[102][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Combat Orders", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
        lv_index = 0;
        for ( ; ( (auto79ABE362_ai >= 0 && lv_index <= auto79ABE362_ae) || (auto79ABE362_ai < 0 && lv_index >= auto79ABE362_ae) ) ; lv_index += auto79ABE362_ai ) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][0], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString((lv_index + 1))), "Hidden");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_CombatOrders_Init () {
    lib90F7C81D_gt_CombatOrders = TriggerCreate("lib90F7C81D_gt_CombatOrders_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_CombatOrders, null, "CombatOrdersAttackSpeed", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_CombatOrders, null, "CombatOrdersDamageResist", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_CombatOrders, null, "CombatOrdersExplosiveDamage", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_CombatOrders, null, "CombatOrdersMovementSpeed", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_CombatOrders, null, "CombatOrdersRange", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_CombatOrders, null, "CombatOrdersWeaponDamage", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Omnipotent
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Omnipotent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    bool lv_unlock;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[103][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("Instructor", 0)) && (lib90F7C81D_gv_mOSAchievements.lv_pL_Aura_Levels[lv_player] == 8) && (UnitHasBehavior2(EventUnit(), "BornToLeadTarget") == true)) {
        lv_unlock = true;
    }
    else if ((EventUnitAbility() == AbilityCommand("BornToLead", 0)) && (lib90F7C81D_gv_mOSAchievements.lv_pL_Aura_Levels[lv_player] == 8) && (UnitHasBehavior2(EventUnit(), "InstructorTarget") == true)) {
        lv_unlock = true;
    }
    if ((lv_unlock == true)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[103][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Omnipotent", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][1], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Omnipotent_Init () {
    lib90F7C81D_gt_Omnipotent = TriggerCreate("lib90F7C81D_gt_Omnipotent_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Omnipotent, null, AbilityCommand("Instructor", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Omnipotent, null, AbilityCommand("BornToLead", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death From Above
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_DeathFromAbove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventUnitDamageSourcePlayer();
    lv_damage = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(lv_player, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[104][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[30][lv_player] += FixedToInt(lv_damage);
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[7][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[30][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[30][lv_player] >= 100000)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[104][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Death From Above", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][2], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_DeathFromAbove_Init () {
    lib90F7C81D_gt_DeathFromAbove = TriggerCreate("lib90F7C81D_gt_DeathFromAbove_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_DeathFromAbove, null, c_unitDamageTypeSpell, c_unitDamageEither, "MortarStrikeDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grenadier
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Grenadier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[105][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_pL_Grenadier[lv_player] += 1;
    if ((lib90F7C81D_gv_mOSAchievements.lv_pL_Grenadier[lv_player] == 2)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[105][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Grenadier", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[7][3], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Grenadier_Init () {
    lib90F7C81D_gt_Grenadier = TriggerCreate("lib90F7C81D_gt_Grenadier_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Grenadier, null, AbilityCommand("PlatoonLeaderSkillUpgrades", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_Grenadier, null, AbilityCommand("PlatoonLeaderSkillUpgrades", 10), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aura Levels
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_AuraLevels_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[103][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_pL_Aura_Levels[lv_player] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_AuraLevels_Init () {
    lib90F7C81D_gt_AuraLevels = TriggerCreate("lib90F7C81D_gt_AuraLevels_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AuraLevels, null, AbilityCommand("PlatoonLeaderResearch", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AuraLevels, null, AbilityCommand("PlatoonLeaderResearch", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AuraLevels, null, AbilityCommand("PlatoonLeaderResearch", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AuraLevels, null, AbilityCommand("PlatoonLeaderResearch", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AuraLevels, null, AbilityCommand("PlatoonLeaderResearch", 13), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AuraLevels, null, AbilityCommand("PlatoonLeaderResearch", 14), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AuraLevels, null, AbilityCommand("PlatoonLeaderResearch", 15), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AuraLevels, null, AbilityCommand("PlatoonLeaderResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wildfire Harvest
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_WildfireHarvest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventUnitDamageSourcePlayer();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(lv_player, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_mOSAchievements.lv_playerFL[EventUnitDamageSourcePlayer()] == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[106][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[32][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[8][0], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[32][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[32][lv_player] >= 250) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[106][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[106][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Wildfire Harvest", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[8][0], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_WildfireHarvest_Init () {
    lib90F7C81D_gt_WildfireHarvest = TriggerCreate("lib90F7C81D_gt_WildfireHarvest_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_WildfireHarvest, null, c_unitDamageTypeSplash, c_unitDamageFatal, "WildfireMineDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Pain No Gain
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_NoPainNoGain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventUnitDamageSourcePlayer();
    lv_damage = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(lv_player, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[107][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[33][lv_player] += FixedToInt(lv_damage);
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[8][1], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[33][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[33][lv_player] >= 5000) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[107][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[107][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("No Pain, No Gain", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[8][1], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_NoPainNoGain_Init () {
    lib90F7C81D_gt_NoPainNoGain = TriggerCreate("lib90F7C81D_gt_NoPainNoGain_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_NoPainNoGain, null, c_unitDamageTypeSplash, c_unitDamageEither, "FireShieldDamageReflect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heavy Weight
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_HeavyWeight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_damage = EventUnitDamageAbsorbed();

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_plasmaShield[lv_player] -= lv_damage;
    libNtve_gf_SetDialogItemCurrentValue(lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay, lib90F7C81D_gv_mOSAchievements.lv_plasmaShield[lv_player], PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[108][lv_player] == false)) {
        lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[34][lv_player] += FixedToInt(lv_damage);
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[8][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[34][lv_player]), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[34][lv_player] >= 50000)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[108][lv_player] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Heavy Weight", lv_player);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[8][2], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_HeavyWeight_Init () {
    lib90F7C81D_gt_HeavyWeight = TriggerCreate("lib90F7C81D_gt_HeavyWeight_Func");
    TriggerAddEventUnitDamageAbsorbed(lib90F7C81D_gt_HeavyWeight, null, "PlasmaShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Let It Burn
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LetItBurn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitBehaviorEffectUnit(EventUnit(), "OilDouse", c_effectUnitCaster, 0);
    lv_player = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[109][lv_player] == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_player, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[35][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[8][3], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[35][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[35][lv_player] >= 500) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[109][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[109][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Let It Burn", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[8][3], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LetItBurn_Init () {
    lib90F7C81D_gt_LetItBurn = TriggerCreate("lib90F7C81D_gt_LetItBurn_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_LetItBurn, null, "OilDouse", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plasma Shield AB
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PlasmaShieldAB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate))) {
        lib90F7C81D_gv_mOSAchievements.lv_plasmaShield[UnitGetOwner(EventUnit())] = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "PlasmaShield", "DamageResponse.ModifyLimit", UnitGetOwner(EventUnit())));
        libNtve_gf_SetDialogItemMaximumValue(lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay, lib90F7C81D_gv_mOSAchievements.lv_plasmaShield[UnitGetOwner(EventUnit())], PlayerGroupSingle(UnitGetOwner(EventUnit())));
        libNtve_gf_SetDialogItemCurrentValue(lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay, lib90F7C81D_gv_mOSAchievements.lv_plasmaShield[UnitGetOwner(EventUnit())], PlayerGroupSingle(UnitGetOwner(EventUnit())));
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay, PlayerGroupSingle(UnitGetOwner(EventUnit())), "Display", "True");
        }
    }
    else {
        DialogControlSetAnimationState(lib90F7C81D_gv_mOSAchievements.lv_plasmaShieldDisplay, PlayerGroupSingle(UnitGetOwner(EventUnit())), "Display", "False");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PlasmaShieldAB_Init () {
    lib90F7C81D_gt_PlasmaShieldAB = TriggerCreate("lib90F7C81D_gt_PlasmaShieldAB_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_PlasmaShieldAB, null, "PlasmaShield", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_PlasmaShieldAB, null, "PlasmaShield", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Junk Yard
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_JunkYard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[110][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[36][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[9][0], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[36][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[36][lv_player] >= 50) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[110][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[110][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Junk Yard", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][0], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_JunkYard_Init () {
    lib90F7C81D_gt_JunkYard = TriggerCreate("lib90F7C81D_gt_JunkYard_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_JunkYard, c_playerAny, "ScrapPartsPickupReduceCooldown3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assemble This
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_AssembleThis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_i;
    int lv_c;
    int lv_a;

    // Automatic Variable Declarations
    const int auto48D7A263_ae = 5;
    const int auto48D7A263_ai = 1;
    const int auto3773BFB1_ae = 5;
    const int auto3773BFB1_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[111][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("ConstructAttackDrone", 0)) && (lib90F7C81D_gv_mOSAchievements.lv_constructCount[0][lv_player] < 5)) {
        lib90F7C81D_gv_mOSAchievements.lv_constructCount[0][lv_player] += 1;
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[0], lib90F7C81D_gf_ConstructCount(0, lv_player), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_constructCount[0][lv_player] >= 5)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(1)), "Unlocked");
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("ConstructDisruptorDrone", 0)) && (lib90F7C81D_gv_mOSAchievements.lv_constructCount[1][lv_player] < 5)) {
        lib90F7C81D_gv_mOSAchievements.lv_constructCount[1][lv_player] += 1;
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[1], lib90F7C81D_gf_ConstructCount(1, lv_player), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_constructCount[1][lv_player] >= 5)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(2)), "Unlocked");
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("ConstructRepairDrone", 0)) && (lib90F7C81D_gv_mOSAchievements.lv_constructCount[2][lv_player] < 5)) {
        lib90F7C81D_gv_mOSAchievements.lv_constructCount[2][lv_player] += 1;
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[2], lib90F7C81D_gf_ConstructCount(2, lv_player), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_constructCount[2][lv_player] >= 5)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(3)), "Unlocked");
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("ConstructMK17SentryGun", 0)) && (lib90F7C81D_gv_mOSAchievements.lv_constructCount[3][lv_player] < 5)) {
        lib90F7C81D_gv_mOSAchievements.lv_constructCount[3][lv_player] += 1;
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[3], lib90F7C81D_gf_ConstructCount(3, lv_player), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_constructCount[3][lv_player] >= 5)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(4)), "Unlocked");
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("ConstructMK18SentryGun", 0)) && (lib90F7C81D_gv_mOSAchievements.lv_constructCount[4][lv_player] < 5)) {
        lib90F7C81D_gv_mOSAchievements.lv_constructCount[4][lv_player] += 1;
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[4], lib90F7C81D_gf_ConstructCount(4, lv_player), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_constructCount[4][lv_player] >= 5)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(5)), "Unlocked");
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("ConstructMK19SentryGun", 0)) && (lib90F7C81D_gv_mOSAchievements.lv_constructCount[5][lv_player] < 5)) {
        lib90F7C81D_gv_mOSAchievements.lv_constructCount[5][lv_player] += 1;
        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_mOSAchievements.lv_assembleTooltip[5], lib90F7C81D_gf_ConstructCount(5, lv_player), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_constructCount[5][lv_player] >= 5)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(6)), "Unlocked");
        }
    }
    lv_i = 0;
    for ( ; ( (auto48D7A263_ai >= 0 && lv_i <= auto48D7A263_ae) || (auto48D7A263_ai < 0 && lv_i >= auto48D7A263_ae) ) ; lv_i += auto48D7A263_ai ) {
        lv_c += lib90F7C81D_gv_mOSAchievements.lv_constructCount[lv_i][lv_player];
        if ((lv_c == 30)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[111][lv_player] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Assemble This", lv_player);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
            lv_a = 0;
            for ( ; ( (auto3773BFB1_ai >= 0 && lv_a <= auto3773BFB1_ae) || (auto3773BFB1_ai < 0 && lv_a >= auto3773BFB1_ae) ) ; lv_a += auto3773BFB1_ai ) {
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][1], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString((lv_a + 1))), "Hidden");
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_AssembleThis_Init () {
    lib90F7C81D_gt_AssembleThis = TriggerCreate("lib90F7C81D_gt_AssembleThis_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AssembleThis, null, AbilityCommand("ConstructAttackDrone", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AssembleThis, null, AbilityCommand("ConstructDisruptorDrone", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AssembleThis, null, AbilityCommand("ConstructRepairDrone", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AssembleThis, null, AbilityCommand("ConstructMK17SentryGun", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AssembleThis, null, AbilityCommand("ConstructMK18SentryGun", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_AssembleThis, null, AbilityCommand("ConstructMK19SentryGun", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rage Against The Machine
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_RageAgainstTheMachine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventUnitDamageSourcePlayer();

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[112][lv_player] == false) && (libNtve_gf_PlayerIsEnemy(lv_player, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[38][lv_player] += 1;
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[9][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[38][lv_player]), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[38][lv_player] >= 2500)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[112][lv_player] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Rage Against The Machine", lv_player);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][2], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_RageAgainstTheMachine_Init () {
    lib90F7C81D_gt_RageAgainstTheMachine = TriggerCreate("lib90F7C81D_gt_RageAgainstTheMachine_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_RageAgainstTheMachine, null, c_unitDamageTypeSpell, c_unitDamageFatal, "32mmCannonsDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_RageAgainstTheMachine, null, c_unitDamageTypeSpell, c_unitDamageFatal, "FlakCannonsDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_RageAgainstTheMachine, null, c_unitDamageTypeSplash, c_unitDamageFatal, "HellfireFlamethrowersDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1.21 Jigawatts!
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt__121Jigawatts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventUnitHealLaunchPlayer();
    lv_amount = EventUnitHealAmount();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[113][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[39][lv_player] += FixedToInt(lv_amount);
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[9][3], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[39][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[39][lv_player] >= 75000) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[113][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[113][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("1.21 Jigawatts!", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[9][3], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt__121Jigawatts_Init () {
    lib90F7C81D_gt__121Jigawatts = TriggerCreate("lib90F7C81D_gt__121Jigawatts_Func");
    TriggerAddEventUnitHealed(lib90F7C81D_gt__121Jigawatts, null, c_unitVitalEnergy, "ArcCellEG");
    TriggerAddEventUnitHealed(lib90F7C81D_gt__121Jigawatts, null, c_unitVitalEnergy, "ArcCellEGMechanical");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Robocrap
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Robocrap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto016AFAE1_g;
    int auto016AFAE1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto016AFAE1_g = lib90F7C81D_gv_players;
    auto016AFAE1_var = -1;
    while (true) {
        auto016AFAE1_var = PlayerGroupNextPlayer(auto016AFAE1_g, auto016AFAE1_var);
        if (auto016AFAE1_var < 0) { break; }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[auto016AFAE1_var]) == "Cyborg") && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[114][auto016AFAE1_var] == false) && (lib90F7C81D_gv_mOSAchievements.lv_cyborgModeUsed[auto016AFAE1_var] == false) && (lib90F7C81D_gv_sTATS.lv_tempKills[auto016AFAE1_var] >= 400)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[114][auto016AFAE1_var] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Robocrap", auto016AFAE1_var);
            PlayerBankSave(auto016AFAE1_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Robocrap_Init () {
    lib90F7C81D_gt_Robocrap = TriggerCreate("lib90F7C81D_gt_Robocrap_Func");
    TriggerAddEventGeneric(lib90F7C81D_gt_Robocrap, "Robocrap");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dazed and Confused
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_DazedandConfused_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[115][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_caster = UnitBehaviorEffectUnit(EventUnit(), "StunnedSupersonic", c_effectUnitCaster, 0);
    lv_player = UnitGetOwner(lv_caster);
    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[41][lv_player] += 1;
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[41][lv_player] >= 100) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[115][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[115][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Dazed and Confused", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[10][1], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_DazedandConfused_Init () {
    lib90F7C81D_gt_DazedandConfused = TriggerCreate("lib90F7C81D_gt_DazedandConfused_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_DazedandConfused, null, "StunnedSupersonic", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lead to...Life?
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_LeadtoLife_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[116][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        lib90F7C81D_gv_mOSAchievements.lv_cyborgLifeCur[lv_player] = UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[lv_player], c_unitPropLife, c_unitPropCurrent);
    }
    else {
        lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[42][lv_player] += FixedToInt((UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[lv_player], c_unitPropLife, c_unitPropCurrent) - lib90F7C81D_gv_mOSAchievements.lv_cyborgLifeCur[lv_player]));
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[10][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[42][lv_player]), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[42][lv_player] >= 5000) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[116][lv_player] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[116][lv_player] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Lead to...Life?", lv_player);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[10][2], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_LeadtoLife_Init () {
    lib90F7C81D_gt_LeadtoLife = TriggerCreate("lib90F7C81D_gt_LeadtoLife_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_LeadtoLife, null, "BlockCyborgArmor", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_LeadtoLife, null, "BlockCyborgArmor", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escapist
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Escapist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerSource);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[117][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[43][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[10][3], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[43][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[43][lv_player] >= 500) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[117][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[117][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Escapist", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[10][3], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Escapist_Init () {
    lib90F7C81D_gt_Escapist = TriggerCreate("lib90F7C81D_gt_Escapist_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_Escapist, c_playerAny, "GrappleHookChangeCliffLevel");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyborg Modes
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_CyborgModes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gv_mOSAchievements.lv_cyborgModeUsed[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_CyborgModes_Init () {
    lib90F7C81D_gt_CyborgModes = TriggerCreate("lib90F7C81D_gt_CyborgModes_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_CyborgModes, null, AbilityCommand("StrengthMode", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_CyborgModes, null, AbilityCommand("GunnerMode", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_CyborgModes, null, AbilityCommand("HunterMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Sonic Pulse Count
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ResetSonicPulseCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[115][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[41][lv_player] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ResetSonicPulseCount_Init () {
    lib90F7C81D_gt_ResetSonicPulseCount = TriggerCreate("lib90F7C81D_gt_ResetSonicPulseCount_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_ResetSonicPulseCount, null, AbilityCommand("SupersonicPulse", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shy Guy
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ShyGuy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7D729D00_g;
    int auto7D729D00_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7D729D00_g = lib90F7C81D_gv_players;
    auto7D729D00_var = -1;
    while (true) {
        auto7D729D00_var = PlayerGroupNextPlayer(auto7D729D00_g, auto7D729D00_var);
        if (auto7D729D00_var < 0) { break; }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[auto7D729D00_var]) == "GhostMOS") && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[118][auto7D729D00_var] == false) && (lib90F7C81D_gv_mOSAchievements.lv_ghostHeatSignature[auto7D729D00_var] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[118][auto7D729D00_var] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Shy Guy", auto7D729D00_var);
            PlayerBankSave(auto7D729D00_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ShyGuy_Init () {
    lib90F7C81D_gt_ShyGuy = TriggerCreate("lib90F7C81D_gt_ShyGuy_Func");
    TriggerAddEventGeneric(lib90F7C81D_gt_ShyGuy, "Shy Guy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sub-Zero
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SubZero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behavior;
    unit lv_caster;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_behavior = EventUnitBehavior();
    lv_caster = UnitBehaviorEffectUnit(EventUnit(), lv_behavior, c_effectUnitCaster, 0);
    lv_player = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_caster) == "GhostMOS"))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_player, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[119][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[45][lv_player] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[11][1], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[45][lv_player]), PlayerGroupSingle(lv_player));
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[45][lv_player] >= 500) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[119][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[119][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Sub-Zero", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[11][1], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SubZero_Init () {
    lib90F7C81D_gt_SubZero = TriggerCreate("lib90F7C81D_gt_SubZero_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SubZero, null, "Frozen4", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SubZero, null, "Frozen5", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SubZero, null, "Frozen8", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SubZero, null, "Frozen10", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Now You See Me, Now You Dont't
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_NowYouSeeMeNowYouDontt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitBehaviorEffectUnit(EventUnit(), "DetectionSuppressed", c_effectUnitCaster, 0);
    lv_player = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[120][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnit(), "KeenSense") == true) || (UnitHasBehavior2(EventUnit(), "KeenSenseA") == true) || (UnitHasBehavior2(EventUnit(), "KeenSense2") == true) || (UnitHasBehavior2(EventUnit(), "KeenSense2A") == true) || (UnitHasBehavior2(EventUnit(), "KeenSense3A") == true) || (UnitHasBehavior2(EventUnit(), "KeenSense3") == true))) {
        lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[46][lv_player] += 1;
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_mOSAchievementsCurP[11][2], IntToText(lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[46][lv_player]), PlayerGroupSingle(lv_player));
        if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[46][lv_player] >= 50) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[120][lv_player] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[120][lv_player] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Now You See Me, Now You Don't", lv_player);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[11][2], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_NowYouSeeMeNowYouDontt_Init () {
    lib90F7C81D_gt_NowYouSeeMeNowYouDontt = TriggerCreate("lib90F7C81D_gt_NowYouSeeMeNowYouDontt_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_NowYouSeeMeNowYouDontt, null, "DetectionSuppressed", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finders Keepers
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FindersKeepers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GhostMOS"))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[121][lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehavior() == "IPR")) {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[11][3], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(1)), "Unlocked");
    }
    else {
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[11][3], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(2)), "Unlocked");
    }
    lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[47][lv_player] += 1;
    if ((lib90F7C81D_gv_mOSAchievements.lv_mOSAchievement[47][lv_player] >= 2) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[121][lv_player] == false)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[121][lv_player] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Finders Keepers", lv_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[11][3], PlayerGroupSingle(lv_player), "AchievementBadge", "Earned");
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[11][3], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(1)), "Hidden");
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[11][3], PlayerGroupSingle(lv_player), ("ExtraIcon" + IntToString(2)), "Hidden");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FindersKeepers_Init () {
    lib90F7C81D_gt_FindersKeepers = TriggerCreate("lib90F7C81D_gt_FindersKeepers_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_FindersKeepers, null, "IPR", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_FindersKeepers, null, "XR42", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heat Signature
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_HeatSignature_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gv_mOSAchievements.lv_ghostHeatSignature[UnitGetOwner(EventUnit())] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_HeatSignature_Init () {
    lib90F7C81D_gt_HeatSignature = TriggerCreate("lib90F7C81D_gt_HeatSignature_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_HeatSignature, null, "MetaFlexArmor", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mos Achievement End Game Update
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_MosAchievementEndGameUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent("Not Enough Energy");
    TriggerSendEvent("Defense Budget");
    TriggerSendEvent("Robocrap");
    TriggerSendEvent("Shy Guy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_MosAchievementEndGameUpdate_Init () {
    lib90F7C81D_gt_MosAchievementEndGameUpdate = TriggerCreate("lib90F7C81D_gt_MosAchievementEndGameUpdate_Func");
    lib90F7C81D_gf_GameEvent(lib90F7C81D_gt_MosAchievementEndGameUpdate, "MOSAchievementsUpdate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pwned Achievement
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PwnedAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[52][EventUnitDamageSourcePlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_iIIIIIlllllll[2][EventUnitDamageSourcePlayer()] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][6], IntToText(lib90F7C81D_gv_careerMisc.lv_pwned[EventUnitDamageSourcePlayer()]), PlayerGroupSingle(EventUnitDamageSourcePlayer()));
    if ((lib90F7C81D_gv_iIIIIIlllllll[2][EventUnitDamageSourcePlayer()] >= 100)) {
        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[52][EventUnitDamageSourcePlayer()] = true;
        lib90F7C81D_gf_FlashAchievementBadge("Pwned", EventUnitDamageSourcePlayer());
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][6], PlayerGroupSingle(EventUnitDamageSourcePlayer()), "AchievementBadge", "Earned");
        lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Mosaic", "Rank Insignia", EventUnitDamageSourcePlayer(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PwnedAchievement_Init () {
    lib90F7C81D_gt_PwnedAchievement = TriggerCreate("lib90F7C81D_gt_PwnedAchievement_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_PwnedAchievement, null, c_unitDamageTypeMelee, c_unitDamageFatal, "RifleButtDamageNew");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clan Tags
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ClanTags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_playerClan;

    // Automatic Variable Declarations
    string auto8A69C631_val;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_playerClan = libNtve_gf_DialogItemEditValue(lib90F7C81D_gv_editBox, lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    auto8A69C631_val = lv_playerClan;
    if (auto8A69C631_val == "<D4Skin>") {
        lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, "Glacier", "Rank Insignia", lv_player, false);
    }
    else {
    }
    lv_playerClan = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ClanTags_Init () {
    lib90F7C81D_gt_ClanTags = TriggerCreate("lib90F7C81D_gt_ClanTags_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camo Texture Change
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_CamoTextureChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_UpdateMOSTextureFromIndex(UserDataInstance("Camos", DialogControlGetSelectedItem(lib90F7C81D_gv_achievementPanel.lv_pulldownCamo, EventPlayer())), lib90F7C81D_ge_TextureType_Camo, EventPlayer());
    lib90F7C81D_gv_bankData.lv_camoSelected[EventPlayer()] = DialogControlGetSelectedItem(lib90F7C81D_gv_achievementPanel.lv_pulldownCamo, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_CamoTextureChange_Init () {
    lib90F7C81D_gt_CamoTextureChange = TriggerCreate("lib90F7C81D_gt_CamoTextureChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decal Texture Change
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_DecalTextureChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_UpdateMOSTextureFromIndex(UserDataInstance("Decals", DialogControlGetSelectedItem(lib90F7C81D_gv_achievementPanel.lv_pulldownDecal, EventPlayer())), lib90F7C81D_ge_TextureType_Decal, EventPlayer());
    lib90F7C81D_gv_bankData.lv_decalSelected[EventPlayer()] = DialogControlGetSelectedItem(lib90F7C81D_gv_achievementPanel.lv_pulldownDecal, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_DecalTextureChange_Init () {
    lib90F7C81D_gt_DecalTextureChange = TriggerCreate("lib90F7C81D_gt_DecalTextureChange_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gameplay Options
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_GameplayOptions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib90F7C81D_gv_gameplay.lv_option[0])) {
        if ((DialogControlGetSelectedItem(lib90F7C81D_gv_gameplay.lv_option[0], lv_player) == 1)) {
            lib90F7C81D_gv_gameplay.lv_cameraShake[lv_player] = true;
        }
        else {
            lib90F7C81D_gv_gameplay.lv_cameraShake[lv_player] = false;
        }
    }
    else if ((EventDialogControl() == lib90F7C81D_gv_gameplay.lv_option[1])) {
        if ((DialogControlGetSelectedItem(lib90F7C81D_gv_gameplay.lv_option[1], lv_player) == 1)) {
            lib90F7C81D_gv_gameplay.lv_tacticalSprint[lv_player] = true;
        }
        else {
            lib90F7C81D_gv_gameplay.lv_tacticalSprint[lv_player] = false;
        }
    }
    else if ((EventDialogControl() == lib90F7C81D_gv_gameplay.lv_option[2])) {
        if ((DialogControlGetSelectedItem(lib90F7C81D_gv_gameplay.lv_option[2], lv_player) == 1)) {
            lib90F7C81D_gv_gameplay.lv_submenuHotkey[lv_player] = "B";
            SubmenuHotkey(lv_player, lib90F7C81D_gv_gameplay.lv_submenuHotkey[lv_player]);
        }
        else {
            lib90F7C81D_gv_gameplay.lv_submenuHotkey[lv_player] = "Escape";
            SubmenuHotkey(lv_player, lib90F7C81D_gv_gameplay.lv_submenuHotkey[lv_player]);
        }
    }
    else if ((EventDialogControl() == lib90F7C81D_gv_gameplay.lv_option[3])) {
        if ((DialogControlGetSelectedItem(lib90F7C81D_gv_gameplay.lv_option[3], lv_player) == 1)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_sDFrame, PlayerGroupSingle(lv_player), "VitalLabels", "True");
            lib90F7C81D_gv_gameplay.lv_vitalsLabel[lv_player] = true;
        }
        else {
            DialogControlSetAnimationState(lib90F7C81D_gv_sDFrame, PlayerGroupSingle(lv_player), "VitalLabels", "False");
            lib90F7C81D_gv_gameplay.lv_vitalsLabel[lv_player] = false;
        }
    }
    else if ((EventDialogControl() == lib90F7C81D_gv_gameplay.lv_option[4])) {
        if ((DialogControlGetSelectedItem(lib90F7C81D_gv_gameplay.lv_option[4], lv_player) == 1)) {
            PlayerOptionOverride(lv_player, "tickedunitstatus", "1");
            lib90F7C81D_gv_gameplay.lv_segmentedBar[lv_player] = true;
        }
        else {
            PlayerOptionOverride(lv_player, "tickedunitstatus", "0");
            lib90F7C81D_gv_gameplay.lv_segmentedBar[lv_player] = false;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_GameplayOptions_Init () {
    lib90F7C81D_gt_GameplayOptions = TriggerCreate("lib90F7C81D_gt_GameplayOptions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Magazine
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_DropMagazine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_charge;
    unit lv_mag;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    SoundPlayOnUnit(SoundLink("AmmoUse", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    if ((lib90F7C81D_gf_ItemCountChargesAreGOE("Magazines", EventUnit(), "AmmoCharges") >= 1)) {
        UnitAddChargeUsed(lib90F7C81D_gf_FirstAmmoUsed(EventUnit()), "AmmoCharges", -1.0);
    }
    else {
        if ((lib90F7C81D_gf_UnitHasEmptyInventorySlot(EventUnit()) == true)) {
            UnitInventoryCreate(EventUnit(), "Magazines");
            UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(EventUnit()));
            lv_mag = UnitLastCreated();
            lv_charge = lib90F7C81D_gf_ItemChargesRemaining(lv_mag, "AmmoCharges", 1.0);
            UnitSetInfoTip(lv_mag, (StringExternal("Param/Value/lib_90F7C81D_E1C5C277") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/lib_90F7C81D_E650A7A4") + FixedToText(lv_charge, 0) + StringExternal("Param/Value/lib_90F7C81D_3720BE7D") + UserDataGetText("Items", UserDataInstance("Items", 1), "Tooltip", 1)));
        }
    }
    lv_mag = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_DropMagazine_Init () {
    lib90F7C81D_gt_DropMagazine = TriggerCreate("lib90F7C81D_gt_DropMagazine_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_DropMagazine, null, AbilityCommand("DropMagazine", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critical Hit Damage Text
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_CriticalHitDamageText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damageSource;
    fixed lv_damageTaken;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageSource = EventUnitDamageSourceUnit();
    lv_damageTaken = EventUnitDamageAmount();

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_CreateTextTagWithAnimation(lv_damageSource, FixedToString(lv_damageTaken, 0), "FCT_Status_Crit", lib90F7C81D_ge_FCTDirection_Middle, PlayerGroupSingle(UnitGetOwner(lv_damageSource)), "Ref_Overhead", 0.8125, 0, true);
    lv_damageSource = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_CriticalHitDamageText_Init () {
    lib90F7C81D_gt_CriticalHitDamageText = TriggerCreate("lib90F7C81D_gt_CriticalHitDamageText_Func");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "AssaultRifleCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "SOFARCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "HK42CriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "StynerBR2CriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "M5MARCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "USMCRCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "DMRCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "Mk14CriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "M92TorrentCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "LNRiflemanRifleCritical");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "LNDMRCriticalDamage");
    TriggerAddEventUnitDamaged(lib90F7C81D_gt_CriticalHitDamageText, null, c_unitDamageTypeRanged, c_unitDamageEither, "LNARMachineGunCritical");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temp Reload Buff Cyborg SS SU
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TempReloadBuffCyborgSSSU_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_reloadbasetime[EventPlayer()] *= 0.97;
    lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TempReloadBuffCyborgSSSU_Init () {
    lib90F7C81D_gt_TempReloadBuffCyborgSSSU = TriggerCreate("lib90F7C81D_gt_TempReloadBuffCyborgSSSU_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_TempReloadBuffCyborgSSSU, null, AbilityCommand("CyborgSkillUpgrades", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temp Reload Buff Cyborg GM Dex SU
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TempReloadBuffCyborgGMDexSU_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "GunnerMode") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_reloadbasetime[EventPlayer()] *= 0.7;
    lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TempReloadBuffCyborgGMDexSU_Init () {
    lib90F7C81D_gt_TempReloadBuffCyborgGMDexSU = TriggerCreate("lib90F7C81D_gt_TempReloadBuffCyborgGMDexSU_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_TempReloadBuffCyborgGMDexSU, null, AbilityCommand("CyborgSkillUpgrades", 19), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temp Reload Speed Buffs Apply
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TempReloadSpeedBuffsApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoCFEB768C_val;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCFEB768C_val = EventUnitBehavior();
    if (autoCFEB768C_val == "AnabolicPerformanceEnhancement") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 0.6;
    }
    else if (autoCFEB768C_val == "AnabolicPerformanceEnhancementImproved") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 0.4;
    }
    else if (autoCFEB768C_val == "SprainedWrist") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.25;
    }
    else if (autoCFEB768C_val == "FracturedArm") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.5;
    }
    else if (autoCFEB768C_val == "BrokenArm") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 2.0;
    }
    else if (autoCFEB768C_val == "BornToLeadTarget") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 0.95;
    }
    else if (autoCFEB768C_val == "RapidFireSleightofHand") {
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "RapidFireSleightofHand", c_techCountCompleteOnly) == 1)) {
            lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 0.4;
        }
        else {
            return true;
        }
    }
    else if (autoCFEB768C_val == "GunnerMode") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 0.86;
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "GunnerModeDexterity", c_techCountCompleteOnly) == 1)) {
            lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 0.7;
        }
    }
    else {
    }
    lib90F7C81D_gf_UpdateReloadDurationLabel(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TempReloadSpeedBuffsApply_Init () {
    lib90F7C81D_gt_TempReloadSpeedBuffsApply = TriggerCreate("lib90F7C81D_gt_TempReloadSpeedBuffsApply_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsApply, null, "AnabolicPerformanceEnhancement", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsApply, null, "AnabolicPerformanceEnhancementImproved", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsApply, null, "SprainedWrist", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsApply, null, "FracturedArm", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsApply, null, "BrokenArm", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsApply, null, "RapidFireSleightofHand", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsApply, null, "BornToLeadTarget", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsApply, null, "GunnerMode", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temp Reload Speed Buffs Remove
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TempReloadSpeedBuffsRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto520262FC_val;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto520262FC_val = EventUnitBehavior();
    if (auto520262FC_val == "AnabolicPerformanceEnhancement") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 0.6;
    }
    else if (auto520262FC_val == "AnabolicPerformanceEnhancementImproved") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 0.4;
    }
    else if (auto520262FC_val == "SprainedWrist") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.25;
    }
    else if (auto520262FC_val == "FracturedArm") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.5;
    }
    else if (auto520262FC_val == "BrokenArm") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 2.0;
    }
    else if (auto520262FC_val == "BornToLeadTarget") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 0.95;
    }
    else if (auto520262FC_val == "RapidFireSleightofHand") {
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "RapidFireSleightofHand", c_techCountCompleteOnly) == 1)) {
            lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 0.4;
        }
        else {
            return true;
        }
    }
    else if (auto520262FC_val == "GunnerMode") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 0.86;
        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "GunnerModeDexterity", c_techCountCompleteOnly) == 1)) {
            lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 0.7;
        }
    }
    else {
    }
    lib90F7C81D_gf_UpdateReloadDurationLabel(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TempReloadSpeedBuffsRemove_Init () {
    lib90F7C81D_gt_TempReloadSpeedBuffsRemove = TriggerCreate("lib90F7C81D_gt_TempReloadSpeedBuffsRemove_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsRemove, null, "AnabolicPerformanceEnhancement", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsRemove, null, "AnabolicPerformanceEnhancementImproved", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsRemove, null, "SprainedWrist", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsRemove, null, "FracturedArm", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsRemove, null, "BrokenArm", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsRemove, null, "RapidFireSleightofHand", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsRemove, null, "BornToLeadTarget", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempReloadSpeedBuffsRemove, null, "GunnerMode", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temp Weapon Reload Speed Buff Apply
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto735C86A6_val;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "CavalryScout") && ((EventUnitBehavior() == "M1014") || (EventUnitBehavior() == "W1200") || (EventUnitBehavior() == "Mk14") || (EventUnitBehavior() == "M9Flamethrower") || (EventUnitBehavior() == "M92Torrent") || (EventUnitBehavior() == "M241MMG") || (EventUnitBehavior() == "IPR") || (EventUnitBehavior() == "M935Minigun") || (EventUnitBehavior() == "DeathMachine") || (EventUnitBehavior() == "XR42"))) {
        return true;
    }
    auto735C86A6_val = EventUnitBehavior();
    if (auto735C86A6_val == "StynerBR2") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.06;
    }
    else if (auto735C86A6_val == "HK42") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.02;
    }
    else if (auto735C86A6_val == "M5MAR") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.03;
    }
    else if (auto735C86A6_val == "SOFAR") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.02;
    }
    else if (auto735C86A6_val == "USMCR") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.05;
    }
    else if (auto735C86A6_val == "W1200") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.04;
    }
    else if (auto735C86A6_val == "M241MMG") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.03;
    }
    else if (auto735C86A6_val == "Mk14") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.04;
    }
    else if (auto735C86A6_val == "M92Torrent") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.06;
    }
    else if (auto735C86A6_val == "M9Flamethrower") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.02;
    }
    else if (auto735C86A6_val == "M1014") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.07;
    }
    else if (auto735C86A6_val == "IPR") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.03;
    }
    else if (auto735C86A6_val == "M935Minigun") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.03;
    }
    else if (auto735C86A6_val == "DeathMachine") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.05;
    }
    else {
    }
    lib90F7C81D_gf_UpdateReloadDurationLabel(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply_Init () {
    lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply = TriggerCreate("lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "StynerBR2", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "M5MAR", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "HK42", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "SOFAR", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "USMCR", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "W1200", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "M241MMG", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "Mk14", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "M92Torrent", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "M9Flamethrower", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "IPR", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "M1014", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "M935Minigun", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "DeathMachine", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply, null, "XR42", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temp Weapon Reload Speed Buff Remove
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto28508F54_val;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "CavalryScout") && ((EventUnitBehavior() == "M1014") || (EventUnitBehavior() == "W1200") || (EventUnitBehavior() == "Mk14") || (EventUnitBehavior() == "M9Flamethrower") || (EventUnitBehavior() == "M92Torrent") || (EventUnitBehavior() == "M241MMG") || (EventUnitBehavior() == "IPR") || (EventUnitBehavior() == "M935Minigun") || (EventUnitBehavior() == "DeathMachine") || (EventUnitBehavior() == "XR42"))) {
        return true;
    }
    auto28508F54_val = EventUnitBehavior();
    if (auto28508F54_val == "StynerBR2") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.06;
    }
    else if (auto28508F54_val == "HK42") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.02;
    }
    else if (auto28508F54_val == "M5MAR") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.03;
    }
    else if (auto28508F54_val == "SOFAR") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.02;
    }
    else if (auto28508F54_val == "USMCR") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.05;
    }
    else if (auto28508F54_val == "W1200") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.04;
    }
    else if (auto28508F54_val == "M241MMG") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.03;
    }
    else if (auto28508F54_val == "Mk14") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.04;
    }
    else if (auto28508F54_val == "M92Torrent") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.06;
    }
    else if (auto28508F54_val == "M9Flamethrower") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.02;
    }
    else if (auto28508F54_val == "M1014") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.07;
    }
    else if (auto28508F54_val == "IPR") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.03;
    }
    else if (auto28508F54_val == "M935Minigun") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] /= 1.03;
    }
    else if (auto28508F54_val == "DeathMachine") {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 1.05;
    }
    else {
    }
    lib90F7C81D_gf_UpdateReloadDurationLabel(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove_Init () {
    lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove = TriggerCreate("lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "StynerBR2", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "M5MAR", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "HK42", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "SOFAR", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "USMCR", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "W1200", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "M241MMG", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "Mk14", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "M92Torrent", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "M9Flamethrower", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "IPR", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "M1014", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "M935Minigun", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "DeathMachine", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove, null, "XR42", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Temp Weapon Speed Buff Sleight of Hand
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TempWeaponSpeedBuffSleightofHand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "RapidFireSleightofHand") == true)) {
        lib90F7C81D_gv_reloadbasetime[UnitGetOwner(EventUnit())] *= 0.4;
        lib90F7C81D_gf_UpdateReloadDurationLabel(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TempWeaponSpeedBuffSleightofHand_Init () {
    lib90F7C81D_gt_TempWeaponSpeedBuffSleightofHand = TriggerCreate("lib90F7C81D_gt_TempWeaponSpeedBuffSleightofHand_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_TempWeaponSpeedBuffSleightofHand, null, AbilityCommand("SDMSkillUpgrades", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reload Behavior Apply
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ReloadBehaviorApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        lib90F7C81D_gf_ReloadWeapon(UnitGetOwner(EventUnit()), EventPlayer());
    }
    else {
        DialogControlSetAnimationState(lib90F7C81D_gv_inventory.lv_inventoryButton, PlayerGroupSingle(UnitGetOwner(EventUnit())), "WeaponSlot", "Enable");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ReloadBehaviorApply_Init () {
    lib90F7C81D_gt_ReloadBehaviorApply = TriggerCreate("lib90F7C81D_gt_ReloadBehaviorApply_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReloadBehaviorApply, null, "ReloadTime", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReloadBehaviorApply, null, "ReloadTime", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encumbered Warning
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_EncumberedWarning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        libNtve_gf_SetDialogItemColor(lib90F7C81D_gv_ammoBar.lv_magazineLabel, Color(100.00, 0.00, 0.00), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        libNtve_gf_SetDialogItemColor(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Magazines[UnitGetOwner(EventUnit())], Color(100.00, 0.00, 0.00), PlayerGroupAll());
        if ((lib90F7C81D_gv_ammoBar.lv_encumberedMessage[UnitGetOwner(EventUnit())] == false)) {
            lib90F7C81D_gv_ammoBar.lv_encumberedMessage[UnitGetOwner(EventUnit())] = true;
            if ((UnitGetType(lib90F7C81D_gv_playerHeroes[UnitGetOwner(EventUnit())]) == "Flamethrower")) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_6E17F17E"));
            }
            else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[UnitGetOwner(EventUnit())]) == "GhostMOS")) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_BE0A3179"));
            }
            else if (true) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_E4DA0650"));
            }
        }

    }
    else {
        libNtve_gf_SetDialogItemColor(lib90F7C81D_gv_ammoBar.lv_magazineLabel, Color(0.00, 100.00, 100.00), PlayerGroupSingle(UnitGetOwner(EventUnit())));
        libNtve_gf_SetDialogItemColor(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Magazines[UnitGetOwner(EventUnit())], Color(100,100,100), PlayerGroupAll());
        lib90F7C81D_gv_ammoBar.lv_encumberedMessage[UnitGetOwner(EventUnit())] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_EncumberedWarning_Init () {
    lib90F7C81D_gt_EncumberedWarning = TriggerCreate("lib90F7C81D_gt_EncumberedWarning_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_EncumberedWarning, null, "Encumbered", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_EncumberedWarning, null, "Encumbered", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reload NPC Behavior Apply
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ReloadNPCBehaviorApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_reloadDuration;
    soundlink lv_magout;
    soundlink lv_magin;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reloadDuration = UnitBehaviorDurationTotal(EventUnit(), EventUnitBehavior());
    lv_magout = SoundLink("magout", -1);
    lv_magin = SoundLink("magin", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "AegisAura") == true)) {
        lv_reloadDuration *= 0.8;
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == true) && (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Tactics1", c_techCountCompleteOnly) == 1)) {
        lv_reloadDuration *= 0.8;
    }

    if ((UnitHasBehavior2(EventUnit(), "AnabolicPerformanceEnhancement") == true)) {
        lv_reloadDuration *= 0.6;
    }

    if ((UnitHasBehavior2(EventUnit(), "AnabolicPerformanceEnhancementImproved") == true)) {
        lv_reloadDuration *= 0.4;
    }

    if ((UnitHasBehavior2(EventUnit(), "SprainedWrist") == true)) {
        lv_reloadDuration *= 1.25;
    }

    if ((UnitHasBehavior2(EventUnit(), "FracturedArm") == true)) {
        lv_reloadDuration *= 1.5;
    }

    if ((UnitHasBehavior2(EventUnit(), "BrokenArm") == true)) {
        lv_reloadDuration *= 2.0;
    }

    if ((UnitHasBehavior2(EventUnit(), "BornToLeadTarget") == true)) {
        lv_reloadDuration *= 0.95;
    }

    if (((UnitHasBehavior2(EventUnit(), "SquadLeaderAura") == true) || (UnitHasBehavior2(EventUnit(), "RASquadLeader") == true))) {
        lv_reloadDuration *= 0.8;
    }

    UnitBehaviorSetDuration(EventUnit(), EventUnitBehavior(), lv_reloadDuration);
    lib90F7C81D_gf_CreateTextTagForAllPlayers(EventUnit(), StringExternal("Param/Value/lib_90F7C81D_6CB6329D"));
    SoundPlayAtPoint(lv_magout, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    Wait(UnitBehaviorDuration(EventUnit(), EventUnitBehavior()), c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        SoundPlayAtPoint(lv_magin, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
        libE6C8C21C_gf_ForceAbilityToSkipCooldown(EventUnit(), lib90F7C81D_gf_ReloadAbilitySkipCooldown(EventUnit()), c_spendLocationAll);
    }

    lv_magout = null;
    lv_magin = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ReloadNPCBehaviorApply_Init () {
    lib90F7C81D_gt_ReloadNPCBehaviorApply = TriggerCreate("lib90F7C81D_gt_ReloadNPCBehaviorApply_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReloadNPCBehaviorApply, null, "NPCShotgunReload", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReloadNPCBehaviorApply, null, "NPCRifleReload", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReloadNPCBehaviorApply, null, "NPCDMRReload", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReloadNPCBehaviorApply, null, "NPCSniperReload", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReloadNPCBehaviorApply, null, "LNAutomaticRifleReload", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_ReloadNPCBehaviorApply, null, "InfantryAutomaticRifleReload", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stasis Web Cutscene
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_StasisWebCutscene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        DialogControlSendAnimationEvent(lib90F7C81D_gv_cutscene.lv_stasisWeb, PlayerGroupSingle(UnitGetOwner(EventUnit())), "PlayBirth");
    }
    else {
        DialogControlSendAnimationEvent(lib90F7C81D_gv_cutscene.lv_stasisWeb, PlayerGroupSingle(UnitGetOwner(EventUnit())), "PlayDeath");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_StasisWebCutscene_Init () {
    lib90F7C81D_gt_StasisWebCutscene = TriggerCreate("lib90F7C81D_gt_StasisWebCutscene_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_StasisWebCutscene, null, "StasisWeb", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_StasisWebCutscene, null, "StasisWeb", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Button
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_CameraButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueDistance, 34.0, 1.25, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, 56.0, 1.25, -1, 10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_CameraButton_Init () {
    lib90F7C81D_gt_CameraButton = TriggerCreate("lib90F7C81D_gt_CameraButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command '
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Command_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((StringSub(EventChatMessage(false), 1, 2) == "' "))) {
            return false;
        }

        if (!((StringContains(EventChatMessage(false), "<a", c_stringAnywhere, c_stringNoCase) == false))) {
            return false;
        }

        if (!((StringContains(EventChatMessage(false), "<d", c_stringAnywhere, c_stringNoCase) == false))) {
            return false;
        }

        if (!((UnitIsAlive(lib90F7C81D_gv_playerHeroes[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_TextChat(lib90F7C81D_gv_playerHeroes[EventPlayer()], StringToText(StringSub(EventChatMessage(false), 3, StringLength(EventChatMessage(false)))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Command_Init () {
    lib90F7C81D_gt_Command = TriggerCreate("lib90F7C81D_gt_Command_Func");
    TriggerAddEventChatMessage(lib90F7C81D_gt_Command, c_playerAny, "' ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Alpha
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FireteamAlpha_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_player;

    // Automatic Variable Declarations
    const int auto9298AAA3_ae = 3;
    const int auto9298AAA3_ai = 1;
    const int auto79462971_ae = 2;
    const int auto79462971_ai = 1;
    const int auto6B2A372E_ae = 3;
    const int auto6B2A372E_ai = 1;
    playergroup auto940DA7FC_g;
    int auto940DA7FC_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (lib90F7C81D_gv_fireteam.lv_alphaQueded) {
        Wait(1.0, c_timeGame);
    }
    lib90F7C81D_gv_fireteam.lv_alphaQueded = true;
    if ((lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] == false) && (PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_alpha) < 4)) {
        UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_alpha, c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_player), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/lib_90F7C81D_8E02629A")));
        PlayerGroupAdd(lib90F7C81D_gv_fireteam.lv_alpha, lv_player);
        lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_alphaButton, PlayerGroupSingle(lv_player), "Fireteam", "Joined");
        lv_index = 0;
        for ( ; ( (auto6B2A372E_ai >= 0 && lv_index <= auto6B2A372E_ae) || (auto6B2A372E_ai < 0 && lv_index >= auto6B2A372E_ae) ) ; lv_index += auto6B2A372E_ai ) {
            if ((lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index] == 0)) {
                lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index] = lv_player;
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_alphaSlot[lv_index], PlayerName(lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index]), PlayerGroupAll());
                if ((lv_index == 0)) {
                    lib90F7C81D_gf_EnableDisablePingPanel(true, PlayerGroupSingle(lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index]));
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_DECDBE18"));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_C4582F89"));
                }
                break;
            }
        }
        if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_alpha) == 4)) {
            auto940DA7FC_g = lib90F7C81D_gv_players;
            auto940DA7FC_var = -1;
            while (true) {
                auto940DA7FC_var = PlayerGroupNextPlayer(auto940DA7FC_g, auto940DA7FC_var);
                if (auto940DA7FC_var < 0) { break; }
                if ((lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] == false)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_alphaButton, PlayerGroupSingle(auto940DA7FC_var), "Fireteam", "Full");
                }

            }
        }
    }
    else {
        if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_alpha, lv_player) == true)) {
            PlayerGroupRemove(lib90F7C81D_gv_fireteam.lv_alpha, lv_player);
            lib90F7C81D_gf_EnableDisablePingPanel(false, PlayerGroupSingle(lv_player));
            lv_index = 0;
            for ( ; ( (auto9298AAA3_ai >= 0 && lv_index <= auto9298AAA3_ae) || (auto9298AAA3_ai < 0 && lv_index >= auto9298AAA3_ae) ) ; lv_index += auto9298AAA3_ai ) {
                if ((lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index] == lv_player)) {
                    lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index] = 0;
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_alphaSlot[lv_index], StringToText(""), PlayerGroupAll());
                    UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_alpha, c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_player), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/lib_90F7C81D_3A84A801")));
                    break;
                }
            }
            lv_index = 0;
            for ( ; ( (auto79462971_ai >= 0 && lv_index <= auto79462971_ae) || (auto79462971_ai < 0 && lv_index >= auto79462971_ae) ) ; lv_index += auto79462971_ai ) {
                if ((lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index] == 0) && (lib90F7C81D_gv_fireteam.lv_alphaMembers[(lv_index + 1)] != 0)) {
                    lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index] = lib90F7C81D_gv_fireteam.lv_alphaMembers[(lv_index + 1)];
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_alphaSlot[lv_index], PlayerName(lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index]), PlayerGroupAll());
                    lib90F7C81D_gv_fireteam.lv_alphaMembers[(lv_index + 1)] = 0;
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_alphaSlot[(lv_index + 1)], StringToText(""), PlayerGroupAll());
                    if ((lv_index == 0)) {
                        lib90F7C81D_gf_EnableDisablePingPanel(true, PlayerGroupSingle(lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index]));
                        UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_alpha, c_messageAreaSubtitle, (TextWithColor(PlayerName(lib90F7C81D_gv_fireteam.lv_alphaMembers[lv_index]), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/lib_90F7C81D_37D7F91E")));
                    }

                }

            }
            DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_alphaButton, PlayerGroupSingle(lv_player), "Fireteam", "Leave");
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_99485971"));
            if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_delta) == 4)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_deltaButton, PlayerGroupSingle(lv_player), "Fireteam", "Full");
            }
            else {
                if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_echo) == 4)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_echoButton, PlayerGroupSingle(lv_player), "Fireteam", "Full");
                }
            }
            lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] = false;
        }
    }
    lib90F7C81D_gv_fireteam.lv_alphaQueded = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FireteamAlpha_Init () {
    lib90F7C81D_gt_FireteamAlpha = TriggerCreate("lib90F7C81D_gt_FireteamAlpha_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Delta
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FireteamDelta_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_player;

    // Automatic Variable Declarations
    const int auto82C528E2_ae = 3;
    const int auto82C528E2_ai = 1;
    const int autoD9480F38_ae = 2;
    const int autoD9480F38_ai = 1;
    const int auto71E7FF83_ae = 3;
    const int auto71E7FF83_ai = 1;
    playergroup autoBAFD0EE9_g;
    int autoBAFD0EE9_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (lib90F7C81D_gv_fireteam.lv_deltaQueded) {
        Wait(1.0, c_timeGame);
    }
    lib90F7C81D_gv_fireteam.lv_deltaQueded = true;
    if ((lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] == false) && (PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_delta) < 4)) {
        UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_delta, c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_player), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/lib_90F7C81D_AE3A9DF2")));
        PlayerGroupAdd(lib90F7C81D_gv_fireteam.lv_delta, lv_player);
        lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_deltaButton, PlayerGroupSingle(lv_player), "Fireteam", "Joined");
        lv_index = 0;
        for ( ; ( (auto71E7FF83_ai >= 0 && lv_index <= auto71E7FF83_ae) || (auto71E7FF83_ai < 0 && lv_index >= auto71E7FF83_ae) ) ; lv_index += auto71E7FF83_ai ) {
            if ((lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index] == 0)) {
                lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index] = lv_player;
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_deltaSlot[lv_index], PlayerName(lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index]), PlayerGroupAll());
                if ((lv_index == 0)) {
                    lib90F7C81D_gf_EnableDisablePingPanel(true, PlayerGroupSingle(lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index]));
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_071D296B"));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_A8FAB412"));
                }
                break;
            }
        }
        if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_delta) == 4)) {
            autoBAFD0EE9_g = lib90F7C81D_gv_players;
            autoBAFD0EE9_var = -1;
            while (true) {
                autoBAFD0EE9_var = PlayerGroupNextPlayer(autoBAFD0EE9_g, autoBAFD0EE9_var);
                if (autoBAFD0EE9_var < 0) { break; }
                if ((lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] == false)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_deltaButton, PlayerGroupSingle(autoBAFD0EE9_var), "Fireteam", "Full");
                }
            }
        }
    }
    else {
        if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_delta, lv_player) == true)) {
            PlayerGroupRemove(lib90F7C81D_gv_fireteam.lv_delta, lv_player);
            lib90F7C81D_gf_EnableDisablePingPanel(false, PlayerGroupSingle(lv_player));
            lv_index = 0;
            for ( ; ( (auto82C528E2_ai >= 0 && lv_index <= auto82C528E2_ae) || (auto82C528E2_ai < 0 && lv_index >= auto82C528E2_ae) ) ; lv_index += auto82C528E2_ai ) {
                if ((lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index] == lv_player)) {
                    lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index] = 0;
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_deltaSlot[lv_index], StringToText(""), PlayerGroupAll());
                    UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_delta, c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_player), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/lib_90F7C81D_892EAC70")));
                    break;
                }
            }
            lv_index = 0;
            for ( ; ( (autoD9480F38_ai >= 0 && lv_index <= autoD9480F38_ae) || (autoD9480F38_ai < 0 && lv_index >= autoD9480F38_ae) ) ; lv_index += autoD9480F38_ai ) {
                if ((lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index] == 0) && (lib90F7C81D_gv_fireteam.lv_deltaMembers[(lv_index + 1)] != 0)) {
                    lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index] = lib90F7C81D_gv_fireteam.lv_deltaMembers[(lv_index + 1)];
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_deltaSlot[lv_index], PlayerName(lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index]), PlayerGroupAll());
                    lib90F7C81D_gv_fireteam.lv_deltaMembers[(lv_index + 1)] = 0;
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_deltaSlot[(lv_index + 1)], StringToText(""), PlayerGroupAll());
                    if ((lv_index == 0)) {
                        lib90F7C81D_gf_EnableDisablePingPanel(true, PlayerGroupSingle(lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index]));
                        UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_delta, c_messageAreaSubtitle, (TextWithColor(PlayerName(lib90F7C81D_gv_fireteam.lv_deltaMembers[lv_index]), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/lib_90F7C81D_F4D9195B")));
                    }

                }

            }
            DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_deltaButton, PlayerGroupSingle(lv_player), "Fireteam", "Leave");
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_3EBA478E"));
            if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_alpha) == 4)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_alphaButton, PlayerGroupSingle(lv_player), "Fireteam", "Full");
            }
            else {
                if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_echo) == 4)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_echoButton, PlayerGroupSingle(lv_player), "Fireteam", "Full");
                }
            }
            lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] = false;
        }
    }
    lib90F7C81D_gv_fireteam.lv_deltaQueded = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FireteamDelta_Init () {
    lib90F7C81D_gt_FireteamDelta = TriggerCreate("lib90F7C81D_gt_FireteamDelta_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Echo
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_FireteamEcho_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_player;

    // Automatic Variable Declarations
    const int auto95324CBC_ae = 3;
    const int auto95324CBC_ai = 1;
    const int autoA741FD79_ae = 2;
    const int autoA741FD79_ai = 1;
    const int autoA5C7B896_ae = 3;
    const int autoA5C7B896_ai = 1;
    playergroup autoF74B136C_g;
    int autoF74B136C_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (lib90F7C81D_gv_fireteam.lv_echoQueded) {
        Wait(1.0, c_timeGame);
    }
    lib90F7C81D_gv_fireteam.lv_echoQueded = true;
    if ((lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] == false) && (PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_echo) < 4)) {
        UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_echo, c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_player), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/lib_90F7C81D_1D1B589E")));
        PlayerGroupAdd(lib90F7C81D_gv_fireteam.lv_echo, lv_player);
        lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] = true;
        DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_echoButton, PlayerGroupSingle(lv_player), "Fireteam", "Joined");
        lv_index = 0;
        for ( ; ( (autoA5C7B896_ai >= 0 && lv_index <= autoA5C7B896_ae) || (autoA5C7B896_ai < 0 && lv_index >= autoA5C7B896_ae) ) ; lv_index += autoA5C7B896_ai ) {
            if ((lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index] == 0)) {
                lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index] = lv_player;
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_echoSlot[lv_index], PlayerName(lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index]), PlayerGroupAll());
                if ((lv_index == 0)) {
                    lib90F7C81D_gf_EnableDisablePingPanel(true, PlayerGroupSingle(lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index]));
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_B9001160"));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_2F840F07"));
                }
                break;
            }
        }
        if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_echo) == 4)) {
            autoF74B136C_g = lib90F7C81D_gv_players;
            autoF74B136C_var = -1;
            while (true) {
                autoF74B136C_var = PlayerGroupNextPlayer(autoF74B136C_g, autoF74B136C_var);
                if (autoF74B136C_var < 0) { break; }
                if ((lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] == false)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_echoButton, PlayerGroupSingle(autoF74B136C_var), "Fireteam", "Full");
                }
            }
        }
    }
    else {
        if ((PlayerGroupHasPlayer(lib90F7C81D_gv_fireteam.lv_echo, lv_player) == true)) {
            PlayerGroupRemove(lib90F7C81D_gv_fireteam.lv_echo, lv_player);
            lib90F7C81D_gf_EnableDisablePingPanel(false, PlayerGroupSingle(lv_player));
            lv_index = 0;
            for ( ; ( (auto95324CBC_ai >= 0 && lv_index <= auto95324CBC_ae) || (auto95324CBC_ai < 0 && lv_index >= auto95324CBC_ae) ) ; lv_index += auto95324CBC_ai ) {
                if ((lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index] == lv_player)) {
                    lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index] = 0;
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_echoSlot[lv_index], StringToText(""), PlayerGroupAll());
                    UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_echo, c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_player), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/lib_90F7C81D_37FA3A65")));
                    break;
                }
            }
            lv_index = 0;
            for ( ; ( (autoA741FD79_ai >= 0 && lv_index <= autoA741FD79_ae) || (autoA741FD79_ai < 0 && lv_index >= autoA741FD79_ae) ) ; lv_index += autoA741FD79_ai ) {
                if ((lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index] == 0) && (lib90F7C81D_gv_fireteam.lv_echoMembers[(lv_index + 1)] != 0)) {
                    lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index] = lib90F7C81D_gv_fireteam.lv_echoMembers[(lv_index + 1)];
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_echoSlot[lv_index], PlayerName(lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index]), PlayerGroupAll());
                    lib90F7C81D_gv_fireteam.lv_echoMembers[(lv_index + 1)] = 0;
                    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fireteam.lv_echoSlot[(lv_index + 1)], StringToText(""), PlayerGroupAll());
                    if ((lv_index == 0)) {
                        lib90F7C81D_gf_EnableDisablePingPanel(true, PlayerGroupSingle(lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index]));
                        UIDisplayMessage(lib90F7C81D_gv_fireteam.lv_echo, c_messageAreaSubtitle, (TextWithColor(PlayerName(lib90F7C81D_gv_fireteam.lv_echoMembers[lv_index]), Color(100.00, 50.20, 0.00)) + StringExternal("Param/Value/lib_90F7C81D_7F367369")));
                    }

                }

            }
            DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_echoButton, PlayerGroupSingle(lv_player), "Fireteam", "Leave");
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_1E00979E"));
            if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_alpha) == 4)) {
                DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_alphaButton, PlayerGroupSingle(lv_player), "Fireteam", "Full");
            }
            else {
                if ((PlayerGroupCount(lib90F7C81D_gv_fireteam.lv_delta) == 4)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_fireteam.lv_deltaButton, PlayerGroupSingle(lv_player), "Fireteam", "Full");
                }
            }
            lib90F7C81D_gv_fireteam.lv_fireteamMember[lv_player] = false;
        }
    }
    lib90F7C81D_gv_fireteam.lv_echoQueded = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_FireteamEcho_Init () {
    lib90F7C81D_gt_FireteamEcho = TriggerCreate("lib90F7C81D_gt_FireteamEcho_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Graph Update
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_GraphUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time_Stamp;
    fixed lv_t1;
    fixed lv_t2;
    fixed lv_t3;

    // Automatic Variable Declarations
    unitgroup auto321992A6_g;
    int auto321992A6_u;
    unit auto321992A6_var;

    // Variable Initialization
    lv_time_Stamp = GameGetMissionTime();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib90F7C81D_gv_gameOver == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    lib90F7C81D_gv_graph.lv_interval += 1;
    if ((lib90F7C81D_gv_graph.lv_interval == 2)) {
        DialogControlAddDataPoint(lib90F7C81D_gv_graph.lv_frame, PlayerGroupAll(), lv_time_Stamp, PlayerScoreValueGetAsFixed(14, "UnitsActiveCount"), 4);
        lib90F7C81D_gv_graph.lv_interval = 0;
    }
    auto321992A6_g = lib90F7C81D_gv_undeadGroup;
    auto321992A6_u = UnitGroupCount(auto321992A6_g, c_unitCountAll);
    for (;; auto321992A6_u -= 1) {
        auto321992A6_var = UnitGroupUnitFromEnd(auto321992A6_g, auto321992A6_u);
        if (auto321992A6_var == null) { break; }
        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto321992A6_var), "Food", 14) == -0.4)) {
            lv_t3 += 1.0;
        }
        else if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto321992A6_var), "Food", 14) == -1.6)) {
            lv_t2 += 1.0;
        }
        else if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto321992A6_var), "Food", 14) == -4.0)) {
            lv_t1 += 1.0;
        }
    }
    DialogControlAddDataPoint(lib90F7C81D_gv_graph.lv_frame, PlayerGroupAll(), lv_time_Stamp, lv_t3, 1);
    DialogControlAddDataPoint(lib90F7C81D_gv_graph.lv_frame, PlayerGroupAll(), lv_time_Stamp, lv_t2, 2);
    DialogControlAddDataPoint(lib90F7C81D_gv_graph.lv_frame, PlayerGroupAll(), lv_time_Stamp, lv_t1, 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_GraphUpdate_Init () {
    lib90F7C81D_gt_GraphUpdate = TriggerCreate("lib90F7C81D_gt_GraphUpdate_Func");
    TriggerEnable(lib90F7C81D_gt_GraphUpdate, false);
    TriggerAddEventTimePeriodic(lib90F7C81D_gt_GraphUpdate, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Get FPS
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_GetFPS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;
    string lv_fPS;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer());
    lv_fPS = "";

    // Conditions
    if (testConds) {
        if (!((lv_string != ""))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringSub(lv_string, 11, StringLength(lv_string));
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_fPS.lv_framerateLabel[EventPlayer()], StringToText(lv_string), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_GetFPS_Init () {
    lib90F7C81D_gt_GetFPS = TriggerCreate("lib90F7C81D_gt_GetFPS_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update FPS
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_UpdateFPS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2C80B1FF_g;
    int auto2C80B1FF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((lib90F7C81D_gv_gameOver == false)) {
        auto2C80B1FF_g = lib90F7C81D_gv_players;
        auto2C80B1FF_var = -1;
        while (true) {
            auto2C80B1FF_var = PlayerGroupNextPlayer(auto2C80B1FF_g, auto2C80B1FF_var);
            if (auto2C80B1FF_var < 0) { break; }
            DialogControlSetAnimationState(lib90F7C81D_gv_fPS.lv_editBox, PlayerGroupAll(), "Update", "True");
        }
        Wait(lib90F7C81D_gv_fPS.lv_framerateInterval, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_UpdateFPS_Init () {
    lib90F7C81D_gt_UpdateFPS = TriggerCreate("lib90F7C81D_gt_UpdateFPS_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Kill Counter
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PMCKillCounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_sTATS.lv_pMC_Kills[UnitGetOwner(EventUnit())] += 1;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_PMC_Label[UnitGetOwner(EventUnit())], IntToText(lib90F7C81D_gv_sTATS.lv_pMC_Kills[UnitGetOwner(EventUnit())]), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PMCKillCounter_Init () {
    lib90F7C81D_gt_PMCKillCounter = TriggerCreate("lib90F7C81D_gt_PMCKillCounter_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_PMCKillCounter, null, "PMCKillCounter", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_PMCKillCounter, null, "PMCKillCounter", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inventory Hotkey Used
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_InventoryHotkeyUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_payload;
    string lv_c_button;
    string lv_id;
    order lv_cmd;
    unitgroup lv_inventory;
    string lv_item;
    int lv_i;
    int lv_slot;

    // Automatic Variable Declarations
    int auto1BB90B11_ae;
    const int auto1BB90B11_ai = 1;

    // Variable Initialization
    lv_payload = libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer());
    lv_c_button = "";
    lv_id = "";
    lv_inventory = UnitGroupEmpty();
    lv_item = "";

    // Conditions
    if (testConds) {
        if (!((lv_payload != null))) {
            return false;
        }

        if (!((UnitIsSelected(lib90F7C81D_gv_playerHeroes[EventPlayer()], EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_c_button = StringWord(lv_payload, 1);
    lv_id = StringWord(lv_payload, 2);
    lv_inventory = UnitInventoryGroup(lib90F7C81D_gv_playerHeroes[EventPlayer()]);
    auto1BB90B11_ae = UnitGroupCount(lv_inventory, c_unitCountAll);
    lv_i = 1;
    for ( ; ( (auto1BB90B11_ai >= 0 && lv_i <= auto1BB90B11_ae) || (auto1BB90B11_ai < 0 && lv_i >= auto1BB90B11_ae) ) ; lv_i += auto1BB90B11_ai ) {
        if ((lib90F7C81D_gf_GetUnitTag(UnitGroupUnit(lv_inventory, lv_i)) == lv_id)) {
            lv_slot = lv_i;
            break;
        }
    }
    lv_item = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(UnitInventoryItem(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_slot)), "Item", EventPlayer());
    if ((CatalogEntryScope(c_gameCatalogItem, lv_item) == "CItemAbil")) {
        lv_cmd = lib90F7C81D_gf_OrderConstructor(EventPlayer(), lib90F7C81D_ge_OrderType_Target, UnitInventoryItem(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_slot), lv_c_button);
        if ((UnitOrderIsValid(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_cmd) == true)) {
            if ((lv_c_button == "Slot")) {
                UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), lib90F7C81D_gv_heroesGroup, lv_cmd, false);
            }
            else {
                UnitIssueOrder(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_cmd, c_orderQueueReplace);
            }
        }
        else {
            libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("e_cmdError"), SoundLink("UI_GenericError", -1));
        }
    }
    else {
        lv_cmd = lib90F7C81D_gf_OrderConstructor(EventPlayer(), lib90F7C81D_ge_OrderType_Instant, UnitInventoryItem(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_slot), lv_c_button);
        if ((UnitOrderIsValid(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_cmd) == true) && (lv_c_button == "Slot")) {
            UnitIssueOrder(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_cmd, c_orderQueueReplace);
        }
        else {
            libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("e_cmdError"), SoundLink("UI_GenericError", -1));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_InventoryHotkeyUsed_Init () {
    lib90F7C81D_gt_InventoryHotkeyUsed = TriggerCreate("lib90F7C81D_gt_InventoryHotkeyUsed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Dead Hero's Button
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PingDeadHerosButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF0C0747E_g;
    int autoF0C0747E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF0C0747E_g = lib90F7C81D_gv_players;
    autoF0C0747E_var = -1;
    while (true) {
        autoF0C0747E_var = PlayerGroupNextPlayer(autoF0C0747E_g, autoF0C0747E_var);
        if (autoF0C0747E_var < 0) { break; }
        if ((UnitIsAlive(lib90F7C81D_gv_playerHeroes[autoF0C0747E_var]) == false)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(lib90F7C81D_gv_deadHeroIndicator[autoF0C0747E_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoF0C0747E_var, false)), 2.5, 270.0);
            PingSetTooltip(PingLastCreated(), PlayerName(autoF0C0747E_var));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PingDeadHerosButton_Init () {
    lib90F7C81D_gt_PingDeadHerosButton = TriggerCreate("lib90F7C81D_gt_PingDeadHerosButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Teammates
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PingTeammates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto17F490B8_g;
    int auto17F490B8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto17F490B8_g = lib90F7C81D_gv_players;
    auto17F490B8_var = -1;
    while (true) {
        auto17F490B8_var = PlayerGroupNextPlayer(auto17F490B8_g, auto17F490B8_var);
        if (auto17F490B8_var < 0) { break; }
        if ((UnitIsAlive(lib90F7C81D_gv_playerHeroes[auto17F490B8_var]) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), "PingSimpleSmall", UnitGetPosition(lib90F7C81D_gv_playerHeroes[auto17F490B8_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto17F490B8_var, false)), 2.5, 270.0);
            PingSetTooltip(PingLastCreated(), PlayerName(auto17F490B8_var));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PingTeammates_Init () {
    lib90F7C81D_gt_PingTeammates = TriggerCreate("lib90F7C81D_gt_PingTeammates_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_PingTeammates, c_playerAny, "PingPlayerLocations");
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Player Death
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_NewPlayerDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(lib90F7C81D_gv_NewPlayerDeath, PlayerGroupSingle(UnitGetOwner(EventUnit())), "Display");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_NewPlayerDeath_Init () {
    lib90F7C81D_gt_NewPlayerDeath = TriggerCreate("lib90F7C81D_gt_NewPlayerDeath_Func");
    TriggerEnable(lib90F7C81D_gt_NewPlayerDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingUsed
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PingUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pingUnit;
    int lv_pingType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib90F7C81D_gv_pingValidPlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingType = (EventPingOption());
    if ((lv_pingType != 4)) {
        lib90F7C81D_gf_PingPlay(lv_pingType, EventPlayer(), EventPingPoint(), EventGameUser(), EventPingUnitType(), EventPingUnitPosition(), EventPingUnitControlPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PingUsed_Init () {
    lib90F7C81D_gt_PingUsed = TriggerCreate("lib90F7C81D_gt_PingUsed_Func");
    TriggerEnable(lib90F7C81D_gt_PingUsed, false);
    TriggerAddEventPing(lib90F7C81D_gt_PingUsed, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Reset Timer Expires
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PingResetTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timerIndex;

    // Automatic Variable Declarations
    const int auto91B8E7D3_ae = 12;
    const int auto91B8E7D3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timerIndex = 1;
    for ( ; ( (auto91B8E7D3_ai >= 0 && lv_timerIndex <= auto91B8E7D3_ae) || (auto91B8E7D3_ai < 0 && lv_timerIndex >= auto91B8E7D3_ae) ) ; lv_timerIndex += auto91B8E7D3_ai ) {
        if ((EventTimer() == lib90F7C81D_gv_pingResetTimer[lv_timerIndex])) {
            lib90F7C81D_gv_pingRecentCount[lv_timerIndex] = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PingResetTimerExpires_Init () {
    lib90F7C81D_gt_PingResetTimerExpires = TriggerCreate("lib90F7C81D_gt_PingResetTimerExpires_Func");
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[1]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[2]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[3]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[4]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[5]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[6]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[7]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[8]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[9]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[10]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[11]);
    TriggerAddEventTimer(lib90F7C81D_gt_PingResetTimerExpires, lib90F7C81D_gv_pingResetTimer[12]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Tooltip
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_UpgradeTooltip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("RiflemanResearch", 1)) && (TechTreeUpgradeCount(EventPlayer(), "FragUpgrade", c_techCountCompleteOnly) == 2)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "FragGrenadeLevel3", 1);
        if (lib90F7C81D_gf_GetGameMode(10)) {
            lib90F7C81D_gv_upgrade[EventPlayer()] += 1;
            DataTableSetString(true, ("Upgrade" + IntToString(EventPlayer()) + IntToString(lib90F7C81D_gv_upgrade[EventPlayer()])), ("FragGrenadeLevel3"));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("RiflemanResearch", 1)) && (TechTreeUpgradeCount(EventPlayer(), "FragUpgrade", c_techCountCompleteOnly) == 3)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "FragGrenadeLevel4", 1);
        if (lib90F7C81D_gf_GetGameMode(10)) {
            lib90F7C81D_gv_upgrade[EventPlayer()] += 1;
            DataTableSetString(true, ("Upgrade" + IntToString(EventPlayer()) + IntToString(lib90F7C81D_gv_upgrade[EventPlayer()])), ("FragGrenadeLevel4"));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("RiflemanResearch", 7)) && (TechTreeUpgradeCount(EventPlayer(), "FocusFireUpgrade1", c_techCountCompleteOnly) == 2)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "FocusFireLevel3", 1);
        if (lib90F7C81D_gf_GetGameMode(10)) {
            lib90F7C81D_gv_upgrade[EventPlayer()] += 1;
            DataTableSetString(true, ("Upgrade" + IntToString(EventPlayer()) + IntToString(lib90F7C81D_gv_upgrade[EventPlayer()])), ("FocusFireLevel3"));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("AutomaticRiflemanResearch", 14)) && (TechTreeUpgradeCount(EventPlayer(), "FullAutoUpgrade1", c_techCountCompleteOnly) == 2)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "FullAutoLevel3", 1);
        if (lib90F7C81D_gf_GetGameMode(10)) {
            lib90F7C81D_gv_upgrade[EventPlayer()] += 1;
            DataTableSetString(true, ("Upgrade" + IntToString(EventPlayer()) + IntToString(lib90F7C81D_gv_upgrade[EventPlayer()])), ("FullAutoLevel3"));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("CavalryScoutResearch", 17)) && (TechTreeUpgradeCount(EventPlayer(), "Bandolier", c_techCountCompleteOnly) == 2)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "BandolierLevel2", 1);
        if (lib90F7C81D_gf_GetGameMode(10)) {
            lib90F7C81D_gv_upgrade[EventPlayer()] += 1;
            DataTableSetString(true, ("Upgrade" + IntToString(EventPlayer()) + IntToString(lib90F7C81D_gv_upgrade[EventPlayer()])), ("BandolierLevel2"));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("CavalryScoutResearch", 17)) && (TechTreeUpgradeCount(EventPlayer(), "Bandolier", c_techCountCompleteOnly) == 3)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "BandolierLevel3", 1);
        if (lib90F7C81D_gf_GetGameMode(10)) {
            lib90F7C81D_gv_upgrade[EventPlayer()] += 1;
            DataTableSetString(true, ("Upgrade" + IntToString(EventPlayer()) + IntToString(lib90F7C81D_gv_upgrade[EventPlayer()])), ("BandolierLevel3"));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("CavalryScoutResearch", 17)) && (TechTreeUpgradeCount(EventPlayer(), "Bandolier", c_techCountCompleteOnly) == 4)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "BandolierLevel4", 1);
        if (lib90F7C81D_gf_GetGameMode(10)) {
            lib90F7C81D_gv_upgrade[EventPlayer()] += 1;
            DataTableSetString(true, ("Upgrade" + IntToString(EventPlayer()) + IntToString(lib90F7C81D_gv_upgrade[EventPlayer()])), ("BandolierLevel4"));
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("SDMResearch", 14)) && (TechTreeUpgradeCount(EventPlayer(), "RapidFireUpgrade1", c_techCountCompleteOnly) == 2)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "RapidFireLevel3", 1);
        if (lib90F7C81D_gf_GetGameMode(10)) {
            lib90F7C81D_gv_upgrade[EventPlayer()] += 1;
            DataTableSetString(true, ("Upgrade" + IntToString(EventPlayer()) + IntToString(lib90F7C81D_gv_upgrade[EventPlayer()])), ("RapidFireLevel3"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_UpgradeTooltip_Init () {
    lib90F7C81D_gt_UpgradeTooltip = TriggerCreate("lib90F7C81D_gt_UpgradeTooltip_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_UpgradeTooltip, null, AbilityCommand("RiflemanResearch", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_UpgradeTooltip, null, AbilityCommand("RiflemanResearch", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_UpgradeTooltip, null, AbilityCommand("AutomaticRiflemanResearch", 14), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_UpgradeTooltip, null, AbilityCommand("CavalryScoutResearch", 17), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(lib90F7C81D_gt_UpgradeTooltip, null, AbilityCommand("SDMResearch", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Visor Text Timer Expire
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_VisorTextTimerExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Automatic Variable Declarations
    const int autoCB067EB5_ae = 12;
    const int autoCB067EB5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_int = 1;
    for ( ; ( (autoCB067EB5_ai >= 0 && lv_int <= autoCB067EB5_ae) || (autoCB067EB5_ai < 0 && lv_int >= autoCB067EB5_ae) ) ; lv_int += autoCB067EB5_ai ) {
        if ((EventTimer() == lib90F7C81D_gv_visorTextTimer[lv_int])) {
            DialogControlFadeTransparency(lib90F7C81D_gv_visorText[lv_int], PlayerGroupSingle(lv_int), 3.0, 100.0);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_VisorTextTimerExpire_Init () {
    lib90F7C81D_gt_VisorTextTimerExpire = TriggerCreate("lib90F7C81D_gt_VisorTextTimerExpire_Func");
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[1]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[2]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[3]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[4]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[5]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[6]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[7]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[8]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[9]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[10]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[11]);
    TriggerAddEventTimer(lib90F7C81D_gt_VisorTextTimerExpire, lib90F7C81D_gv_visorTextTimer[12]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SITREP
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SITREP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    text lv_floattext;
    string lv_healthicon;
    int lv_index;
    int lv_count;
    string lv_instanceIndex;

    // Automatic Variable Declarations
    playergroup auto5C03BA4F_g;
    int auto5C03BA4F_var;
    string auto7932A802_userType;
    int auto7932A802_i;
    unitgroup auto38ED5C1A_g;
    int auto38ED5C1A_u;
    unit auto38ED5C1A_var;
    string auto74350EA1_userType;
    int auto74350EA1_i;

    // Variable Initialization
    lv_temptext = StringToText("");
    lv_healthicon = "Assets\\Textures\\icon-health-nobg.dds";

    // Actions
    if (!runActions) {
        return true;
    }

    auto5C03BA4F_g = lib90F7C81D_gv_players;
    auto5C03BA4F_var = -1;
    while (true) {
        auto5C03BA4F_var = PlayerGroupNextPlayer(auto5C03BA4F_g, auto5C03BA4F_var);
        if (auto5C03BA4F_var < 0) { break; }
        if (((UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) || (UnitIsAlive(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var]) == false))) {
            lv_count += 1;
            lv_floattext = StringToText("");
            if ((EventPlayer() == auto5C03BA4F_var)) {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_D337FE04"));
            }
            else {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_DECD709F"));
            }
            lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_F710D428"));
            lv_temptext = (lv_temptext + TextWithColor(PlayerName(auto5C03BA4F_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto5C03BA4F_var, false))));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_F4997B7B"));
            lv_temptext = (lv_temptext + TextWithColor(UnitTypeGetName(UnitGetType(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var])), Color(0.00, 84.31, 41.96)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_4706F738"));
            if ((UnitIsAlive(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var]) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto5C03BA4F_var, false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var]);
                PingSetTooltip(PingLastCreated(), PlayerName(auto5C03BA4F_var));
                lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var], c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var], c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_35EBF0AC"));
                lv_floattext = (lv_floattext + lib90F7C81D_gf_TextImage(lv_healthicon, 22));
                auto7932A802_userType = "Ailments";
                auto7932A802_i = 1;
                for ( ; auto7932A802_i <= UserDataInstanceCount(auto7932A802_userType) ; auto7932A802_i += 1 ) {
                    lv_instanceIndex = UserDataInstance(auto7932A802_userType, auto7932A802_i);
                    if ((UnitHasBehavior2(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var], UserDataGetGameLink("Ailments", lv_instanceIndex, "Ailment Behavior", 1)) == true)) {
                        lv_temptext = (lv_temptext + lib90F7C81D_gf_TextImage((UserDataGetImagePath("Ailments", lv_instanceIndex, "Ailment Image", 1)), 22));
                        lv_floattext = (lv_floattext + lib90F7C81D_gf_TextImage((UserDataGetImagePath("Ailments", lv_instanceIndex, "Ailment Image", 1)), 22));
                    }

                }
                lib90F7C81D_gf_FloatingTextforPlayer(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var], lv_floattext, EventPlayer());
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_833E210B"));
            }
            else {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_0735F174"));
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto5C03BA4F_var, false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), lib90F7C81D_gv_playerHeroes[auto5C03BA4F_var]);
                PingSetTooltip(PingLastCreated(), PlayerName(auto5C03BA4F_var));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_B51009C9"));
            }
        }

    }
    if ((UnitGroupCount(lib90F7C81D_gv_sFAAT.lv_localNationals, c_unitCountAlive) >= 1)) {
        auto38ED5C1A_g = lib90F7C81D_gv_sFAAT.lv_localNationals;
        auto38ED5C1A_u = UnitGroupCount(auto38ED5C1A_g, c_unitCountAll);
        for (;; auto38ED5C1A_u -= 1) {
            auto38ED5C1A_var = UnitGroupUnitFromEnd(auto38ED5C1A_g, auto38ED5C1A_u);
            if (auto38ED5C1A_var == null) { break; }
            if ((UnitGetPropertyFixed(auto38ED5C1A_var, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                lv_count += 1;
                lv_floattext = StringToText("");
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(auto38ED5C1A_var), Color(100.00, 100.00, 100.00), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), auto38ED5C1A_var);
                PingSetTooltip(PingLastCreated(), UnitGetName(auto38ED5C1A_var));
                lv_temptext = (lv_temptext + TextWithColor(UnitGetName(auto38ED5C1A_var), Color(100.00, 100.00, 100.00)));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_2ABFD856"));
                lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(auto38ED5C1A_var, c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(auto38ED5C1A_var, c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(auto38ED5C1A_var, c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_1199F95E"));
                lv_floattext = (lv_floattext + lib90F7C81D_gf_TextImage(lv_healthicon, 22));
                auto74350EA1_userType = "Ailments";
                auto74350EA1_i = 1;
                for ( ; auto74350EA1_i <= UserDataInstanceCount(auto74350EA1_userType) ; auto74350EA1_i += 1 ) {
                    lv_instanceIndex = UserDataInstance(auto74350EA1_userType, auto74350EA1_i);
                    if ((UnitHasBehavior2(auto38ED5C1A_var, UserDataGetGameLink("Ailments", lv_instanceIndex, "Ailment Behavior", 1)) == true)) {
                        lv_temptext = (lv_temptext + lib90F7C81D_gf_TextImage((UserDataGetImagePath("Ailments", lv_instanceIndex, "Ailment Image", 1)), 22));
                        lv_floattext = (lv_floattext + lib90F7C81D_gf_TextImage((UserDataGetImagePath("Ailments", lv_instanceIndex, "Ailment Image", 1)), 22));
                    }

                }
                lib90F7C81D_gf_FloatingTextforPlayer(auto38ED5C1A_var, lv_floattext, EventPlayer());
                lv_temptext = (lv_temptext + StringExternal("Param/Value/lib_90F7C81D_FE3D0504"));
            }
        }
    }
    if ((lv_count == 0)) {
        lv_temptext = StringExternal("Param/Value/lib_90F7C81D_79CEB4BC");
    }

    lib90F7C81D_gf_DisplayVisorTextDialog(lv_temptext, EventPlayer());
    lv_temptext = null;
    lv_healthicon = null;
    lv_floattext = null;
    lv_instanceIndex = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SITREP_Init () {
    lib90F7C81D_gt_SITREP = TriggerCreate("lib90F7C81D_gt_SITREP_Func");
    TriggerAddEventUnitAbility(lib90F7C81D_gt_SITREP, null, AbilityCommand("SITREP", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Panel Buttons
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TipPanelButtons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib90F7C81D_gv_tipPanel.lv_nextButton) && (lib90F7C81D_gv_tipPanel.lv_tipNumber[EventPlayer()] != 10)) {
        lib90F7C81D_gv_tipPanel.lv_tipNumber[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_tipPanel.lv_tipCurrent, IntToText(lib90F7C81D_gv_tipPanel.lv_tipNumber[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((lib90F7C81D_gv_tipPanel.lv_tipNumber[EventPlayer()] != 1)) {
            lib90F7C81D_gv_tipPanel.lv_tipNumber[EventPlayer()] -= 1;
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_tipPanel.lv_tipCurrent, IntToText(lib90F7C81D_gv_tipPanel.lv_tipNumber[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TipPanelButtons_Init () {
    lib90F7C81D_gt_TipPanelButtons = TriggerCreate("lib90F7C81D_gt_TipPanelButtons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Panel Location
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_TipPanelLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer());

    // Conditions
    if (testConds) {
        if (!((lv_string != ""))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_tipPanel.lv_tipLoc[EventPlayer()] = lv_string;
    lv_string = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_TipPanelLocation_Init () {
    lib90F7C81D_gt_TipPanelLocation = TriggerCreate("lib90F7C81D_gt_TipPanelLocation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Tag Listener
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_UnitTagListener_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_unitTag = libNtve_gf_DialogItemEditValue(lib90F7C81D_gv_heroPanel.lv_editBox, lv_player);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_heroPanel.lv_iDSet[lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_heroPanel.lv_iDSet[lv_player] = true;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_heroPanel.lv_unitTags[lv_player], StringToText(lv_unitTag), PlayerGroupAll());
    lib90F7C81D_gv_heroPanel.lv_count += 1;
    if ((lib90F7C81D_gf_GameMode() != 10) && (lib90F7C81D_gv_heroPanel.lv_count >= PlayerGroupCount(lib90F7C81D_gv_players))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_UnitTagListener_Init () {
    lib90F7C81D_gt_UnitTagListener = TriggerCreate("lib90F7C81D_gt_UnitTagListener_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Speed Label Thread
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SpeedLabelThread_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto995CDB60_g;
    int auto995CDB60_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lib90F7C81D_gv_gameOver == false)) {
        auto995CDB60_g = lib90F7C81D_gv_players;
        auto995CDB60_var = -1;
        while (true) {
            auto995CDB60_var = PlayerGroupNextPlayer(auto995CDB60_g, auto995CDB60_var);
            if (auto995CDB60_var < 0) { break; }
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_heroPanel.lv_speedCurrent[auto995CDB60_var], FixedToText(UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[auto995CDB60_var], c_unitPropMovementSpeed, c_unitPropCurrent), 3), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Movement_Speed[auto995CDB60_var], FixedToText(UnitGetPropertyFixed(lib90F7C81D_gv_playerHeroes[auto995CDB60_var], c_unitPropMovementSpeed, c_unitPropCurrent), 3), PlayerGroupAll());
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SpeedLabelThread_Init () {
    lib90F7C81D_gt_SpeedLabelThread = TriggerCreate("lib90F7C81D_gt_SpeedLabelThread_Func");
    lib90F7C81D_gf_GameEvent(lib90F7C81D_gt_SpeedLabelThread, "MSThreadStart");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_GameOver_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_scoreScreen;
    int lv_panelsContainer;
    int lv_overViewPanel;
    int[13] lv_playerContainer;
    int[13] lv_kills;
    int[13] lv_kills_C;
    int[13] lv_massiveKills;
    int[13] lv_pMCKills;
    int[13] lv_hits;
    int[13] lv_deaths;
    int[13] lv_damageDealt;
    int[13] lv_damageTaken;
    int[13] lv_revivePoints;
    int[13] lv_heals;
    int lv_killsMax;
    int lv_massiveKillsMax;
    int lv_pMCKillsMax;
    int lv_hitsMax;
    int lv_deathsMax;
    int lv_damageDealtMax;
    int lv_damageTakenMax;
    int lv_revivePointsMax;
    int lv_healsMax;
    int lv_hitsMin;
    int lv_damageTakenMin;
    int lv_deathsMin;
    int[13] lv_image;
    int lv_scoreType;
    int lv_maxPlayers;
    bool lv_campaign;

    // Automatic Variable Declarations
    unitgroup auto6B43B691_g;
    int auto6B43B691_u;
    unit auto6B43B691_var;
    unitgroup autoC0CB97BC_g;
    int autoC0CB97BC_u;
    unit autoC0CB97BC_var;
    playergroup autoB4CA7F99_g;
    int autoB4CA7F99_var;
    playergroup auto6389E2A8_g;
    int auto6389E2A8_var;
    playergroup autoC1014C2E_g;
    int autoC1014C2E_var;
    const int auto9941F723_ae = 7;
    const int auto9941F723_ai = 1;
    int auto2512E03F_val;
    int auto316C4D9C_val;
    playergroup auto1B0AAAFB_g;
    int auto1B0AAAFB_var;
    playergroup autoAC8EAA09_g;
    int autoAC8EAA09_var;

    // Variable Initialization
    lv_scoreScreen = c_invalidDialogControlId;
    lv_panelsContainer = c_invalidDialogControlId;
    lv_overViewPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_playerContainer[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_kills[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_kills_C[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_massiveKills[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_pMCKills[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_hits[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_deaths[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_damageDealt[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_damageTaken[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_revivePoints[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_heals[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        lv_image[init_i] = c_invalidDialogControlId;
    }
    lv_maxPlayers = PlayerGroupCount(lib90F7C81D_gv_scoreScreenPlayers);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_gameOverOverride == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gv_gameOver = true;
    TriggerEnable(lib90F7C81D_gt_PlayerLeavesGame, false);
    lib90F7C81D_gf_MoveChatBar(lib90F7C81D_ge_ChatBarAnchor_GameOver);
    UnitPauseAll(true);
    lib90F7C81D_gf_HeroUnitGroupInvunerable(true);
    TriggerEnable(lib90F7C81D_gt_PlayerLeavesGame, false);
    lib90F7C81D_gf_TurnWeaponsItemsOnOff("Weapons&Items_1", false);
    lib90F7C81D_gf_TurnWeaponsItemsOnOff("Weapons&Items_2", false);
    lib90F7C81D_gf_RunEvent("UpdateStats");
    auto6B43B691_g = lib90F7C81D_gv_undeadGroup;
    auto6B43B691_u = UnitGroupCount(auto6B43B691_g, c_unitCountAll);
    for (;; auto6B43B691_u -= 1) {
        auto6B43B691_var = UnitGroupUnitFromEnd(auto6B43B691_g, auto6B43B691_u);
        if (auto6B43B691_var == null) { break; }
        UnitRemove(auto6B43B691_var);
    }
    autoC0CB97BC_g = lib90F7C81D_gv_rAGroup;
    autoC0CB97BC_u = UnitGroupCount(autoC0CB97BC_g, c_unitCountAll);
    for (;; autoC0CB97BC_u -= 1) {
        autoC0CB97BC_var = UnitGroupUnitFromEnd(autoC0CB97BC_g, autoC0CB97BC_u);
        if (autoC0CB97BC_var == null) { break; }
        UnitRemove(autoC0CB97BC_var);
    }
    DialogControlSendAnimationEvent(lib90F7C81D_gv_sTATS.lv_hUD, PlayerGroupAll(), "Close");
    DialogControlSendAnimationEvent(lib90F7C81D_gv_sDFrame, PlayerGroupAll(), "Hide");
    DialogControlSendAnimationEvent(lib90F7C81D_gv_voteKick.lv_voteMenuFrame, PlayerGroupAll(), "End");
    DialogControlSetAnimationState(lib90F7C81D_gv_bossRushWaveDisplay, PlayerGroupAll(), "Display", "Hide");
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GameClockFrame");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "ForceHide");
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 4.0);
    autoB4CA7F99_g = lib90F7C81D_gv_players;
    autoB4CA7F99_var = -1;
    while (true) {
        autoB4CA7F99_var = PlayerGroupNextPlayer(autoB4CA7F99_g, autoB4CA7F99_var);
        if (autoB4CA7F99_var < 0) { break; }
        lib90F7C81D_gf_DisplayUI(false, autoB4CA7F99_var);
    }
    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    DialogControlSendAnimationEvent(lib90F7C81D_gv_backgroundMain, PlayerGroupAll(), "Display");
    DialogControlSetPosition(lib90F7C81D_gv_messageFrame.lv_debug, PlayerGroupAll(), c_anchorBottomRight, -400, 50);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    if ((lib90F7C81D_gv_victory)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MusicVictory_TerranLoop", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/lib_90F7C81D_1FF92EA0"));
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "MusicVictory_ZergLoop", c_soundtrackCueAny, c_soundtrackIndexAny, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/lib_90F7C81D_23ACDF01"));
    }
    TriggerSendEvent("BankBackup");
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ScoreScreenTabs");
    lv_scoreScreen = DialogControlLastCreated();
    DialogControlHookup(lv_scoreScreen, c_triggerControlTypePanel, "PanelsContainer");
    lv_panelsContainer = DialogControlLastCreated();
    DialogControlHookup(lv_panelsContainer, c_triggerControlTypePanel, "Panel00");
    lv_overViewPanel = DialogControlLastCreated();
    Wait(0.125, c_timeGame);
    auto6389E2A8_g = lib90F7C81D_gv_scoreScreenPlayers;
    auto6389E2A8_var = -1;
    while (true) {
        auto6389E2A8_var = PlayerGroupNextPlayer(auto6389E2A8_g, auto6389E2A8_var);
        if (auto6389E2A8_var < 0) { break; }
        lib90F7C81D_gv_gameMode_Int[auto6389E2A8_var] = lib90F7C81D_gf_GameMode();
        DialogControlHookup(lv_overViewPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(auto6389E2A8_var) + "Container")));
        lv_playerContainer[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_playerContainer[auto6389E2A8_var], PlayerGroupAll(), "Display", "True");
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("PlayerIcon" + IntToString(auto6389E2A8_var))));
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("Icon")));
        lv_image[auto6389E2A8_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(lv_image[auto6389E2A8_var], lib90F7C81D_gv_playerHeroImage[auto6389E2A8_var], PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(lv_image[auto6389E2A8_var], UnitGetName(lib90F7C81D_gv_playerHeroes[auto6389E2A8_var]), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player/PlayerName/PlayerNameLabel")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBKills" + IntToString(auto6389E2A8_var))));
        lv_kills[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBMKills" + IntToString(auto6389E2A8_var))));
        lv_massiveKills[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        if (lib90F7C81D_gf_GetGameMode(1)) {
            lv_campaign = true;
            DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PMCKills" + IntToString(auto6389E2A8_var))));
            lv_pMCKills[auto6389E2A8_var] = DialogControlLastCreated();
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
            lv_pMCKillsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_PMCKills);
            DialogControlHookupStandard(c_triggerControlTypeButton, "$SBMKills");
            DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Campaign", "True");
        }
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBHits" + IntToString(auto6389E2A8_var))));
        lv_hits[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBDeaths" + IntToString(auto6389E2A8_var))));
        lv_deaths[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBDamageDealt" + IntToString(auto6389E2A8_var))));
        lv_damageDealt[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBDamageTaken" + IntToString(auto6389E2A8_var))));
        lv_damageTaken[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBRevivePoints" + IntToString(auto6389E2A8_var))));
        lv_revivePoints[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto6389E2A8_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBHeals" + IntToString(auto6389E2A8_var))));
        lv_heals[auto6389E2A8_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto6389E2A8_var, false)), PlayerGroupAll());
        lib90F7C81D_gv_sTATS.lv_damageDealt[auto6389E2A8_var] = PlayerScoreValueGetAsInt(auto6389E2A8_var, "TotalDamageDone");
        lib90F7C81D_gv_sTATS.lv_damageTaken[auto6389E2A8_var] = PlayerScoreValueGetAsInt(auto6389E2A8_var, "LifeDamageTakenTotal");
    }
    lv_killsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_Kills);
    lv_massiveKillsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_MassiveKills);
    lv_hitsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_Hits);
    lv_deathsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_Deaths);
    lv_damageDealtMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_DamageDealt);
    lv_damageTakenMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_DamageTaken);
    lv_revivePointsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_RevivePoints);
    lv_healsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_Heals);
    lv_hitsMin = lib90F7C81D_gf_ReturnMinimumScoreValueType(lib90F7C81D_ge_ScoreType_Hits);
    lv_deathsMin = lib90F7C81D_gf_ReturnMinimumScoreValueType(lib90F7C81D_ge_ScoreType_Deaths);
    lv_damageTakenMin = lib90F7C81D_gf_ReturnMinimumScoreValueType(lib90F7C81D_ge_ScoreType_DamageTaken);
    autoC1014C2E_g = lib90F7C81D_gv_scoreScreenPlayers;
    autoC1014C2E_var = -1;
    while (true) {
        autoC1014C2E_var = PlayerGroupNextPlayer(autoC1014C2E_g, autoC1014C2E_var);
        if (autoC1014C2E_var < 0) { break; }
        libNtve_gf_SetDialogItemMinimumValue(lv_kills[autoC1014C2E_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_kills[autoC1014C2E_var], IntToFixed(lv_killsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_kills[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_kills[autoC1014C2E_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_massiveKills[autoC1014C2E_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_massiveKills[autoC1014C2E_var], IntToFixed(lv_massiveKillsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_massiveKills[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_massiveKills[autoC1014C2E_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_hits[autoC1014C2E_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_hits[autoC1014C2E_var], IntToFixed(lv_hitsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_hits[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_hits[autoC1014C2E_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_deaths[autoC1014C2E_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_deaths[autoC1014C2E_var], IntToFixed(lv_deathsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_deaths[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_deaths[autoC1014C2E_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_damageDealt[autoC1014C2E_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_damageDealt[autoC1014C2E_var], IntToFixed(lv_damageDealtMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_damageDealt[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_damageDealt[autoC1014C2E_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_damageTaken[autoC1014C2E_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_damageTaken[autoC1014C2E_var], IntToFixed(lv_damageTakenMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_damageTaken[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_damageTaken[autoC1014C2E_var]), PlayerGroupAll());
        if ((lv_campaign == true)) {
            libNtve_gf_SetDialogItemMinimumValue(lv_pMCKills[autoC1014C2E_var], 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMaximumValue(lv_pMCKills[autoC1014C2E_var], IntToFixed(lv_pMCKillsMax), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(lv_pMCKills[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_pMC_Kills[autoC1014C2E_var]), PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemMinimumValue(lv_revivePoints[autoC1014C2E_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_revivePoints[autoC1014C2E_var], IntToFixed(lv_revivePointsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_revivePoints[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_revivePoints[autoC1014C2E_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_heals[autoC1014C2E_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_heals[autoC1014C2E_var], IntToFixed(lv_healsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_heals[autoC1014C2E_var], IntToFixed(lib90F7C81D_gv_sTATS.lv_heals[autoC1014C2E_var]), PlayerGroupAll());
        if ((lv_maxPlayers >= 2)) {
            lv_scoreType = 0;
            for ( ; ( (auto9941F723_ai >= 0 && lv_scoreType <= auto9941F723_ae) || (auto9941F723_ai < 0 && lv_scoreType >= auto9941F723_ae) ) ; lv_scoreType += auto9941F723_ai ) {
                if ((lib90F7C81D_gv_highScore[lv_scoreType][autoC1014C2E_var] == true) && (lib90F7C81D_gv_lowScore[lv_scoreType][autoC1014C2E_var] == false)) {
                    auto316C4D9C_val = lv_scoreType;
                    if (auto316C4D9C_val == 0) {
                        DialogControlSetAnimationState(lv_kills[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                    }
                    else if (auto316C4D9C_val == 1) {
                        DialogControlSetAnimationState(lv_massiveKills[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                        if ((lv_campaign == true)) {
                            DialogControlSetAnimationState(lv_pMCKills[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                        }
                    }
                    else if (auto316C4D9C_val == 2) {
                        DialogControlSetAnimationState(lv_revivePoints[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                    }
                    else if (auto316C4D9C_val == 3) {
                        DialogControlSetAnimationState(lv_heals[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                    }
                    else if (auto316C4D9C_val == 7) {
                        DialogControlSetAnimationState(lv_damageDealt[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                    }
                    else {
                    }
                }
                else {
                    if ((lib90F7C81D_gv_lowScore[lv_scoreType][autoC1014C2E_var] == true)) {
                        auto2512E03F_val = lv_scoreType;
                        if (auto2512E03F_val == 4) {
                            DialogControlSetAnimationState(lv_hits[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                        }
                        else if (auto2512E03F_val == 5) {
                            DialogControlSetAnimationState(lv_deaths[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                        }
                        else if (auto2512E03F_val == 6) {
                            DialogControlSetAnimationState(lv_damageTaken[autoC1014C2E_var], PlayerGroupAll(), "FirstPlace", "True");
                        }
                        else {
                        }
                    }
                }
            }
        }
    }
    DialogControlHookup(lv_panelsContainer, c_triggerControlTypePanel, "Panel01");
    lv_overViewPanel = DialogControlLastCreated();
    DialogControlHookup(lv_overViewPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ImageContainer/DamageTaken"));
    lib90F7C81D_gv_gameMode_C = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_gameMode_C, StringToText(UserDataGetString("GameModes", UserDataInstance("GameModes", lib90F7C81D_gf_GameMode()), "Game Mode", 1)), PlayerGroupAll());
    DialogControlHookup(lib90F7C81D_gv_gameMode_C, c_triggerControlTypeImage, "Icon");
    lib90F7C81D_gv_gameMode_Img = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_gameMode_Img, UserDataGetImagePath("GameModes", UserDataInstance("GameModes", lib90F7C81D_gf_GameMode()), "Image", 1), PlayerGroupAll());
    auto1B0AAAFB_g = lib90F7C81D_gv_scoreScreenPlayers;
    auto1B0AAAFB_var = -1;
    while (true) {
        auto1B0AAAFB_var = PlayerGroupNextPlayer(auto1B0AAAFB_g, auto1B0AAAFB_var);
        if (auto1B0AAAFB_var < 0) { break; }
        DialogControlHookup(lv_overViewPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player" + IntToString(auto1B0AAAFB_var) + "Container")));
        lv_playerContainer[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlSetAnimationState(lv_playerContainer[auto1B0AAAFB_var], PlayerGroupAll(), "Display", "True");
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("PlayerIcon" + IntToString(auto1B0AAAFB_var))));
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("Icon")));
        lv_image[auto1B0AAAFB_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(lv_image[auto1B0AAAFB_var], lib90F7C81D_gv_playerHeroImage[auto1B0AAAFB_var], PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(lv_image[auto1B0AAAFB_var], UnitGetName(lib90F7C81D_gv_playerHeroes[auto1B0AAAFB_var]), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName(("Player/PlayerName/PlayerNameLabel")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBKills" + IntToString(auto1B0AAAFB_var))));
        lv_kills_C[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBMKills" + IntToString(auto1B0AAAFB_var))));
        lv_massiveKills[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBHits" + IntToString(auto1B0AAAFB_var))));
        lv_hits[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBDeaths" + IntToString(auto1B0AAAFB_var))));
        lv_deaths[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBDamageDealt" + IntToString(auto1B0AAAFB_var))));
        lv_damageDealt[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBDamageTaken" + IntToString(auto1B0AAAFB_var))));
        lib90F7C81D_gv_careerWins_PB[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBRevivePoints" + IntToString(auto1B0AAAFB_var))));
        lv_revivePoints[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
        DialogControlHookup(lv_playerContainer[auto1B0AAAFB_var], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("PBHeals" + IntToString(auto1B0AAAFB_var))));
        lv_heals[auto1B0AAAFB_var] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName(("FillImageContainer/FillImage")));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1B0AAAFB_var, false)), PlayerGroupAll());
    }
    lv_killsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_Kills_C);
    lv_massiveKillsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_MassiveKills_C);
    lv_hitsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_Hits_C);
    lv_deathsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_Deaths_C);
    lv_damageDealtMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_GamesPlayed_C);
    lv_damageTakenMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_GameModeWins_C);
    lv_revivePointsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_RevivePoints_C);
    lv_healsMax = lib90F7C81D_gf_ReturnMaximumScoreValueType(lib90F7C81D_ge_ScoreType_Heals_C);
    autoAC8EAA09_g = lib90F7C81D_gv_scoreScreenPlayers;
    autoAC8EAA09_var = -1;
    while (true) {
        autoAC8EAA09_var = PlayerGroupNextPlayer(autoAC8EAA09_g, autoAC8EAA09_var);
        if (autoAC8EAA09_var < 0) { break; }
        DialogControlHookup(lv_kills_C[autoAC8EAA09_var], c_triggerControlTypeLabel, "ScoreMax");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_killsMax), PlayerGroupAll());
        DialogControlHookup(lv_kills_C[autoAC8EAA09_var], c_triggerControlTypeLabel, "ScoreCurrent");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lib90F7C81D_gv_bankData.lv_totalKills[autoAC8EAA09_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_massiveKills[autoAC8EAA09_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_massiveKills[autoAC8EAA09_var], IntToFixed(lv_massiveKillsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_massiveKills[autoAC8EAA09_var], IntToFixed(lib90F7C81D_gv_bankData.lv_totalMassiveKills[autoAC8EAA09_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_hits[autoAC8EAA09_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_hits[autoAC8EAA09_var], IntToFixed(lv_hitsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_hits[autoAC8EAA09_var], IntToFixed(lib90F7C81D_gv_bankData.lv_totalHits[autoAC8EAA09_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_deaths[autoAC8EAA09_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_deaths[autoAC8EAA09_var], IntToFixed(lv_deathsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_deaths[autoAC8EAA09_var], IntToFixed(lib90F7C81D_gv_bankData.lv_totalDeaths[autoAC8EAA09_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_damageDealt[autoAC8EAA09_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_damageDealt[autoAC8EAA09_var], IntToFixed(lv_damageDealtMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_damageDealt[autoAC8EAA09_var], IntToFixed(lib90F7C81D_gv_bankData.lv_gamesPlayed[autoAC8EAA09_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lib90F7C81D_gv_careerWins_PB[autoAC8EAA09_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lib90F7C81D_gv_careerWins_PB[autoAC8EAA09_var], IntToFixed(lv_damageTakenMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lib90F7C81D_gv_careerWins_PB[autoAC8EAA09_var], IntToFixed(lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][autoAC8EAA09_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(lv_revivePoints[autoAC8EAA09_var], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(lv_revivePoints[autoAC8EAA09_var], IntToFixed(lv_revivePointsMax), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(lv_revivePoints[autoAC8EAA09_var], IntToFixed(lib90F7C81D_gv_bankData.lv_totalRevivePoints[autoAC8EAA09_var]), PlayerGroupAll());
        DialogControlHookup(lv_heals[autoAC8EAA09_var], c_triggerControlTypeLabel, "ScoreMax");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_healsMax), PlayerGroupAll());
        DialogControlHookup(lv_heals[autoAC8EAA09_var], c_triggerControlTypeLabel, "ScoreCurrent");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lib90F7C81D_gv_bankData.lv_totalHeals[autoAC8EAA09_var]), PlayerGroupAll());
    }
    lib90F7C81D_gf_RunEvent("ScoreScreenXPCard");
    Wait(0.5, c_timeGame);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/QuitContainer/QuitButton");
    lib90F7C81D_gv_quitButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(lib90F7C81D_gt_QuitGame, c_playerAny, lib90F7C81D_gv_quitButton, c_triggerControlEventTypeClick);
    DialogControlSendAnimationEvent(lib90F7C81D_gv_backgroundMain, PlayerGroupAll(), "StartShimmer");
    DialogControlSendAnimationEvent(lv_scoreScreen, PlayerGroupAll(), "DisplayScoreScreen");
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/QuitContainer");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "QuitButton");
    UISetCursorVisible(PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_GameOver_Init () {
    lib90F7C81D_gt_GameOver = TriggerCreate("lib90F7C81D_gt_GameOver_Func");
    lib90F7C81D_gf_GameEvent(lib90F7C81D_gt_GameOver, "GameOver");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quit Game
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_QuitGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib90F7C81D_gv_victory)) {
        GameOver(EventPlayer(), c_gameOverVictory, true, true);
    }
    else {
        GameOver(EventPlayer(), c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_QuitGame_Init () {
    lib90F7C81D_gt_QuitGame = TriggerCreate("lib90F7C81D_gt_QuitGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pIndex;

    // Automatic Variable Declarations
    playergroup auto6F67C826_g;
    int auto6F67C826_var;
    unitgroup auto52D6C6ED_g;
    int auto52D6C6ED_u;
    unit auto52D6C6ED_var;

    // Variable Initialization
    lv_pIndex = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_playerLeftGame[lv_pIndex] == false))) {
            return false;
        }

        if (!((PlayerGroupCount(lib90F7C81D_gv_players) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_playerLeftGame[lv_pIndex] = true;
    PlayerModifyPropertyInt(lv_pIndex, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lv_pIndex, c_playerPropCustom, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lv_pIndex, c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    PlayerGroupRemove(lib90F7C81D_gv_players, lv_pIndex);
    if ((lib90F7C81D_gv_playerHeroes[lv_pIndex] == null)) {
        lib90F7C81D_gv_playerHeroImage[lv_pIndex] = UserDataGetImagePath("MOSSetup", "MOS - Rifleman", "MOS Image", 1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_90F7C81D_07504DE3") + PlayerName(lv_pIndex) + StringExternal("Param/Value/lib_90F7C81D_757DE5AC")));
        UnitGroupRemove(lib90F7C81D_gv_heroSelectorGroup, lib90F7C81D_gv_heroSelectors[lv_pIndex]);
        UnitRemove(lib90F7C81D_gv_heroSelectors[lv_pIndex]);
        DialogControlSetAnimationState(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame[lv_pIndex], PlayerGroupAll(), "MOS", "MIA");
        lib90F7C81D_gf_RunEvent("ScaleDifficulty");
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_90F7C81D_3D75652A") + PlayerName(lv_pIndex) + StringExternal("Param/Value/lib_90F7C81D_F9A6A44D") + UnitGetName(lib90F7C81D_gv_playerHeroes[lv_pIndex]) + StringExternal("Param/Value/lib_90F7C81D_DDB9FFB8") + StringExternal("Param/Value/lib_90F7C81D_15118702")));
        libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_playerHeroes[lv_pIndex], "HaloStop");
        if ((lib90F7C81D_gv_playersHeroisDead[lv_pIndex] == true)) {
            lib90F7C81D_gf_HideReviveProgressBar(lv_pIndex);
            libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_deadHeroIndicator[lv_pIndex], "SetTintColor 255,0,0 3.000000");
            libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_deadHeroIndicator[lv_pIndex], "SetOpacity 0.250000 3.000000");
            lib90F7C81D_gv_uI_DeadHeroCount -= 1;
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_deadHeroLabel, IntToText(lib90F7C81D_gv_uI_DeadHeroCount), PlayerGroupAll());
        }
        else {
            lib90F7C81D_gf_DropAllItems(lib90F7C81D_gv_playerHeroes[lv_pIndex], 2.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicator", 0, lv_pIndex, UnitGetPosition(lib90F7C81D_gv_playerHeroes[lv_pIndex]));
            lib90F7C81D_gv_deadHeroIndicator[lv_pIndex] = UnitLastCreated();
            UnitSetInfoTip(UnitLastCreated(), PlayerName(lv_pIndex));
            lib90F7C81D_gf_DisplayReviveProgressBar(lv_pIndex);
            lib90F7C81D_gf_HideReviveProgressBar(lv_pIndex);
            libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_deadHeroIndicator[lv_pIndex], "SetTintColor 255,0,0 3.000000");
            libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_deadHeroIndicator[lv_pIndex], "SetOpacity 0.250000 3.000000");
            auto6F67C826_g = lib90F7C81D_gv_players;
            auto6F67C826_var = -1;
            while (true) {
                auto6F67C826_var = PlayerGroupNextPlayer(auto6F67C826_g, auto6F67C826_var);
                if (auto6F67C826_var < 0) { break; }
                if ((PlayerStatus(auto6F67C826_var) == c_playerStatusActive)) {
                    PlayerSetAlliance(auto6F67C826_var, c_allianceIdVision, lv_pIndex, true);
                }
            }
        }
        if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lv_pIndex]) == "SFAAT")) {
            if ((UnitGroupCount(lib90F7C81D_gv_sFAAT.lv_localNationals, c_unitCountAlive) >= 1)) {
                auto52D6C6ED_g = lib90F7C81D_gv_sFAAT.lv_localNationals;
                auto52D6C6ED_u = UnitGroupCount(auto52D6C6ED_g, c_unitCountAll);
                for (;; auto52D6C6ED_u -= 1) {
                    auto52D6C6ED_var = UnitGroupUnitFromEnd(auto52D6C6ED_g, auto52D6C6ED_u);
                    if (auto52D6C6ED_var == null) { break; }
                    lib90F7C81D_gf_DropAllItems(auto52D6C6ED_var, 2.0);
                    UnitRemove(auto52D6C6ED_var);
                }
            }
        }
        DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lv_pIndex], PlayerGroupAll(), "State", "Off");
        UnitRemove(lib90F7C81D_gv_playerHeroes[lv_pIndex]);
        UnitGroupRemove(lib90F7C81D_gv_undeadTargetGroup, lib90F7C81D_gv_playerHeroes[lv_pIndex]);
        UnitGroupRemove(lib90F7C81D_gv_heroesGroup, lib90F7C81D_gv_playerHeroes[lv_pIndex]);
        lib90F7C81D_gv_playerHeroes[lv_pIndex] = null;
        UnitGroupRemove(lib90F7C81D_gv_commandCard.lv_cCGroup[lv_pIndex], lib90F7C81D_gv_commandCard.lv_selfCastUnit[lv_pIndex]);
        UnitRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[lv_pIndex]);
        lib90F7C81D_gv_commandCard.lv_cCGroup[lv_pIndex] = null;
        lib90F7C81D_gv_commandCard.lv_selfCastUnit[lv_pIndex] = null;
        UnitGroupRemove(lib90F7C81D_gv_inventory.lv_hotkey_group[lv_pIndex], lib90F7C81D_gv_inventory.lv_hotkey_unit[lv_pIndex]);
        UnitRemove(lib90F7C81D_gv_inventory.lv_hotkey_unit[lv_pIndex]);
        lib90F7C81D_gv_inventory.lv_hotkey_group[lv_pIndex] = null;
        lib90F7C81D_gv_inventory.lv_hotkey_unit[lv_pIndex] = null;
        if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) == 0) && (GameIsTestMap(false) == false)) {
            lib90F7C81D_gf_RunEvent("GameOver");
        }
        else {
            DialogControlSetAnimationState(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame[lv_pIndex], PlayerGroupAll(), "MOS", "MIA");
            lib90F7C81D_gf_RunEvent("ScaleDifficulty");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_PlayerLeavesGame_Init () {
    lib90F7C81D_gt_PlayerLeavesGame = TriggerCreate("lib90F7C81D_gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(lib90F7C81D_gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self Cast Button Switch
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SelfCastButtonSwitch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_CycleButton(EventUnit(), EventUnitAbility(), AbilityCommandGetAbility(EventUnitAbility()), lib90F7C81D_gf_NextButton(AbilityCommandGetAbility(EventUnitAbility())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SelfCastButtonSwitch_Init () {
    lib90F7C81D_gt_SelfCastButtonSwitch = TriggerCreate("lib90F7C81D_gt_SelfCastButtonSwitch_Func");
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("FirstAidKitSelfCast", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("AdvancedFirstAidKitSelfCast", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("QuikClotSelfCast", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("AdvancedQuikClotSelfCast", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("AntiVeninSelfCast", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("AdvancedAntiVeninSelfCast", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("EnergyCellSelfCast", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("SuperiorEnergyCellSelfCast", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("NightVision", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("InfraredVision", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("CommandCardSwitch", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("CommandCardSwitch", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("WeaponsHold3", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("WeaponsHold3", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("RallyLocalNationals", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("OffensiveRally", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("SetRallyPoint", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("GapGenerator", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastButtonSwitch, null, AbilityCommand("InterferenceWave", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self Cast Apply Behavior
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SelfCastApplyBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lib90F7C81D_gv_playerHeroes[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lib90F7C81D_gv_playerHeroes[EventPlayer()], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    Wait(0.0625, c_timeGame);
    if ((EventPlayerEffectUsed() == "FirstAidKitSelfCastDummy")) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "FirstAidKitInInventoryApply", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    else if ((EventPlayerEffectUsed() == "AdvancedFirstAidKitSelfCastDummy")) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "AdvancedFirstAidKitInInventoryApply", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    else if ((EventPlayerEffectUsed() == "QuikClotSelfCastDummy")) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "QuikClotInInventoryApply", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    else if ((EventPlayerEffectUsed() == "AdvancedQuikClotSelfCastDummy")) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "AdvancedQuikClotInInventoryApply", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    else if ((EventPlayerEffectUsed() == "AntiVeninSelfCastDummy")) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "AntiVeninInInventoryApply", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    else if ((EventPlayerEffectUsed() == "AdvancedAntiVeninSelfCastDummy")) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "AdvancedAntiVeninInInventoryApply", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    else if ((EventPlayerEffectUsed() == "EnergyCellSelfCastDummy")) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "EnergyCellInInventoryApply", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    else if ((EventPlayerEffectUsed() == "SuperiorEnergyCellSelfCastDummy")) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "SuperiorEnergyCellInInventoryApply", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SelfCastApplyBehavior_Init () {
    lib90F7C81D_gt_SelfCastApplyBehavior = TriggerCreate("lib90F7C81D_gt_SelfCastApplyBehavior_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyBehavior, c_playerAny, "FirstAidKitSelfCastDummy");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyBehavior, c_playerAny, "AdvancedFirstAidKitSelfCastDummy");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyBehavior, c_playerAny, "QuikClotSelfCastDummy");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyBehavior, c_playerAny, "AdvancedQuikClotSelfCastDummy");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyBehavior, c_playerAny, "AntiVeninSelfCastDummy");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyBehavior, c_playerAny, "AdvancedAntiVeninSelfCastDummy");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyBehavior, c_playerAny, "EnergyCellSelfCastDummy");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyBehavior, c_playerAny, "SuperiorEnergyCellSelfCastDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self Cast Apply Item Effect
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SelfCastApplyItemEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itemUsed;
    fixed lv_maxCharges;
    unit lv_itemCarried;
    int lv_index;
    string lv_behavior;
    string lv_effect;
    bool lv_applyEffect;

    // Automatic Variable Declarations
    int autoDC76CD22_ae;
    const int autoDC76CD22_ai = 1;

    // Variable Initialization
    lv_applyEffect = true;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lib90F7C81D_gv_playerHeroes[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "FirstAidKitSelfCastApply")) {
        lv_itemUsed = UserDataGetGameLink("Items", "First Aid Kit", "Item", 1);
        lv_maxCharges = UserDataGetFixed("Items", "First Aid Kit", "Max Charges", 1);
        lv_behavior = "FirstAidInInventory";
        lv_effect = "FirstAidKitSet";
    }
    else if ((EventPlayerEffectUsed() == "AdvancedFirstAidKitSelfCastApply")) {
        lv_itemUsed = UserDataGetGameLink("Items", "Advanced First Aid Kit", "Item", 1);
        lv_maxCharges = UserDataGetFixed("Items", "Advanced First Aid Kit", "Max Charges", 1);
        lv_behavior = "AdvancedFirstAidInInventory";
        lv_effect = "AdvancedFirstAidKitSet";
    }
    else if ((EventPlayerEffectUsed() == "QuikClotSelfCastApply")) {
        lv_itemUsed = UserDataGetGameLink("Items", "Quik Clot", "Item", 1);
        lv_maxCharges = UserDataGetFixed("Items", "Quik Clot", "Max Charges", 1);
        lv_behavior = "QuikClotInInventory";
        lv_effect = "QuikClotSet";
    }
    else if ((EventPlayerEffectUsed() == "AdvancedQuikClotSelfCastApply")) {
        lv_itemUsed = UserDataGetGameLink("Items", "Advanced Quik Clot", "Item", 1);
        lv_maxCharges = UserDataGetFixed("Items", "Advanced Quik Clot", "Max Charges", 1);
        lv_behavior = "AdvancedQuikClotInInventory";
        lv_effect = "AdvancedQuikClotSet";
    }
    else if ((EventPlayerEffectUsed() == "AntiVeninSelfCastApply")) {
        lv_itemUsed = UserDataGetGameLink("Items", "Anti-Venin Shot", "Item", 1);
        lv_maxCharges = UserDataGetFixed("Items", "Anti-Venin Shot", "Max Charges", 1);
        lv_behavior = "AntiVeninInInventory";
        lv_effect = "AntiVeninShotAB";
    }
    else if ((EventPlayerEffectUsed() == "AdvancedAntiVeninSelfCastApply")) {
        lv_itemUsed = UserDataGetGameLink("Items", "Advanced Anti-Venin Shot", "Item", 1);
        lv_maxCharges = UserDataGetFixed("Items", "Advanced Anti-Venin Shot", "Max Charges", 1);
        lv_behavior = "AdvancedAntiVeninInInventory";
        lv_effect = "AdvancedAntiVeninShotAB";
    }
    else if ((EventPlayerEffectUsed() == "EnergyCellSelfCastApply")) {
        lv_itemUsed = UserDataGetGameLink("Items", "Energy Cell", "Item", 1);
        lv_maxCharges = UserDataGetFixed("Items", "Energy Cell", "Max Charges", 1);
        lv_behavior = "EnergyCellInInventory";
        lv_effect = "EnergyCellCP";
    }
    else if ((EventPlayerEffectUsed() == "SuperiorEnergyCellSelfCastApply")) {
        lv_itemUsed = UserDataGetGameLink("Items", "Superior Energy Cell", "Item", 1);
        lv_maxCharges = UserDataGetFixed("Items", "Superior Energy Cell", "Max Charges", 1);
        lv_behavior = "SuperiorEnergyCellInInventory";
        lv_effect = "SuperiorEnergyCellCP";
    }
    autoDC76CD22_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(lib90F7C81D_gv_playerHeroes[EventPlayer()])];
    lv_index = 1;
    for ( ; ( (autoDC76CD22_ai >= 0 && lv_index <= autoDC76CD22_ae) || (autoDC76CD22_ai < 0 && lv_index >= autoDC76CD22_ae) ) ; lv_index += autoDC76CD22_ai ) {
        lv_itemCarried = UnitInventoryItem(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_index);
        if ((UnitGetType(lv_itemCarried) == lv_itemUsed)) {
            if ((lv_applyEffect == true)) {
                lv_applyEffect = false;
                UnitAddChargeUsed(lv_itemCarried, "ItemCharges", 1.0);
                UnitCreateEffectUnit(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_effect, lib90F7C81D_gv_playerHeroes[EventPlayer()]);
                if ((lib90F7C81D_gf_ItemCount(lv_itemUsed, lib90F7C81D_gv_playerHeroes[EventPlayer()]) == 1) && (lib90F7C81D_gf_ReturnChargeCount(lv_itemCarried, "ItemCharges", lv_maxCharges) == 0.0)) {
                    UnitBehaviorRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[EventPlayer()], lv_behavior, 1);
                    UnitRemove(lv_itemCarried);
                }
            }
        }
        if ((UnitGetType(lv_itemCarried) == lv_itemUsed) && (lib90F7C81D_gf_ItemCountChargesAreGOE(lv_itemUsed, lib90F7C81D_gv_playerHeroes[EventPlayer()], "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_itemCarried, "ItemCharges") >= 1.0)) {
            lib90F7C81D_gf_CombineItems(lv_itemCarried, lib90F7C81D_gf_SameItemTypeUsed(lib90F7C81D_gv_playerHeroes[EventPlayer()], lv_itemCarried, "ItemCharges"), "ItemCharges", lv_maxCharges);
        }
    }
    lv_itemUsed = null;
    lv_behavior = null;
    lv_effect = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SelfCastApplyItemEffect_Init () {
    lib90F7C81D_gt_SelfCastApplyItemEffect = TriggerCreate("lib90F7C81D_gt_SelfCastApplyItemEffect_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyItemEffect, c_playerAny, "FirstAidKitSelfCastApply");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyItemEffect, c_playerAny, "AdvancedFirstAidKitSelfCastApply");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyItemEffect, c_playerAny, "QuikClotSelfCastApply");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyItemEffect, c_playerAny, "AdvancedQuikClotSelfCastApply");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyItemEffect, c_playerAny, "AntiVeninSelfCastApply");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyItemEffect, c_playerAny, "AdvancedAntiVeninSelfCastApply");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyItemEffect, c_playerAny, "EnergyCellSelfCastApply");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_SelfCastApplyItemEffect, c_playerAny, "SuperiorEnergyCellSelfCastApply");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self Cast Hold Fire
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SelfCastHoldFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[EventPlayer()], "WeaponsHold", lib90F7C81D_gv_playerHeroes[EventPlayer()], 1);
    }
    else {
        UnitBehaviorRemove(lib90F7C81D_gv_playerHeroes[EventPlayer()], "WeaponsHold", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SelfCastHoldFire_Init () {
    lib90F7C81D_gt_SelfCastHoldFire = TriggerCreate("lib90F7C81D_gt_SelfCastHoldFire_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SelfCastHoldFire, null, "WeaponsHoldDummy", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SelfCastHoldFire, null, "WeaponsHoldDummy", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self Cast Night Vision Off Switch
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SelfCastNightVisionOffSwitch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("NightVision", 1))) {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("NightVision", 1), false), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("NightVision", 1)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderSetAutoCast(AbilityCommand("InfraredVision", 1), false), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("InfraredVision", 1)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SelfCastNightVisionOffSwitch_Init () {
    lib90F7C81D_gt_SelfCastNightVisionOffSwitch = TriggerCreate("lib90F7C81D_gt_SelfCastNightVisionOffSwitch_Func");
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastNightVisionOffSwitch, null, AbilityCommand("NightVision", 1), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(lib90F7C81D_gt_SelfCastNightVisionOffSwitch, null, AbilityCommand("InfraredVision", 1), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self Cast Night Vision Effect
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SelfCastNightVisionEffect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehavior() == "NightVision")) {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
            SoundPlayForPlayer(SoundLink("NODOn", 0), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            PlayerSetLighting(EventPlayer(), "NODSUpdated", 1.5);
        }
        else {
            SoundPlayForPlayer(SoundLink("NODOff", 0), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            PlayerSetLighting(EventPlayer(), lib90F7C81D_gv_timeOfDay.lv_currentLighting, 1.5);
        }
    }
    else if ((EventUnitBehavior() == "InfraredVision")) {
        if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
            SoundPlayForPlayer(SoundLink("NODOn", 0), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            PlayerSetLighting(EventPlayer(), "Infrared", 1.5);
        }
        else {
            SoundPlayForPlayer(SoundLink("NODOff", 0), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            PlayerSetLighting(EventPlayer(), lib90F7C81D_gv_timeOfDay.lv_currentLighting, 1.5);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SelfCastNightVisionEffect_Init () {
    lib90F7C81D_gt_SelfCastNightVisionEffect = TriggerCreate("lib90F7C81D_gt_SelfCastNightVisionEffect_Func");
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SelfCastNightVisionEffect, null, "NightVision", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SelfCastNightVisionEffect, null, "NightVision", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SelfCastNightVisionEffect, null, "InfraredVision", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(lib90F7C81D_gt_SelfCastNightVisionEffect, null, "InfraredVision", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SD Ailment Bar
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SDAilmentBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_instanceIndex;
    int lv_indexInner;
    string lv_behaviorIcon;
    text lv_behaviorTooltip;
    string lv_triggeringBehavior;

    // Automatic Variable Declarations
    string autoABA9C361_userType;
    int autoABA9C361_i;
    string auto7758C8E0_val;
    const int auto0260E6DD_ae = 6;
    const int auto0260E6DD_ai = 1;
    string autoB723608D_val;
    const int autoEE4A6A54_ae = 6;
    const int autoEE4A6A54_ai = 1;
    const int autoA5024129_ae = 5;
    const int autoA5024129_ai = 1;

    // Variable Initialization
    lv_triggeringBehavior = EventUnitBehavior();

    // Actions
    if (!runActions) {
        return true;
    }

    while (lib90F7C81D_gv_sDQueue[UnitGetOwner(EventUnit())]) {
        Wait(1.0, c_timeGame);
    }
    lib90F7C81D_gv_sDQueue[UnitGetOwner(EventUnit())] = true;
    autoABA9C361_userType = "Ailments";
    autoABA9C361_i = 1;
    for ( ; autoABA9C361_i <= UserDataInstanceCount(autoABA9C361_userType) ; autoABA9C361_i += 1 ) {
        lv_instanceIndex = UserDataInstance(autoABA9C361_userType, autoABA9C361_i);
        if ((UserDataGetGameLink("Ailments", lv_instanceIndex, "Ailment Behavior", 1) == lv_triggeringBehavior)) {
            if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
                lv_behaviorIcon = UserDataGetImagePath("Ailments", lv_instanceIndex, "Ailment Image", 1);
                lv_behaviorTooltip = UserDataGetText("Ailments", lv_instanceIndex, "Tooltip", 1);
                if ((UnitIsAlive(EventUnit()) == true)) {
                    auto7758C8E0_val = UserDataGetString("Ailments", lv_instanceIndex, "Severity", 1);
                    if (auto7758C8E0_val == "Minor") {
                        lib90F7C81D_gv_revivePenalty[UnitGetOwner(EventUnit())] += 7;
                    }
                    else if (auto7758C8E0_val == "Moderate") {
                        lib90F7C81D_gv_revivePenalty[UnitGetOwner(EventUnit())] += 20;
                    }
                    else if (auto7758C8E0_val == "Severe") {
                        lib90F7C81D_gv_revivePenalty[UnitGetOwner(EventUnit())] += 60;
                    }
                    else {
                    }
                }
                lv_indexInner = 1;
                for ( ; ( (auto0260E6DD_ai >= 0 && lv_indexInner <= auto0260E6DD_ae) || (auto0260E6DD_ai < 0 && lv_indexInner >= auto0260E6DD_ae) ) ; lv_indexInner += auto0260E6DD_ai ) {
                    if ((lib90F7C81D_gv_sDAilmentSlotEnabled[lv_indexInner][UnitGetOwner(EventUnit())] == false) && (lib90F7C81D_gv_sDAilment[lv_indexInner][UnitGetOwner(EventUnit())] == null)) {
                        libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerAilmentImages[lv_indexInner][UnitGetOwner(EventUnit())], lv_behaviorIcon, PlayerGroupAll());
                        libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPlayerAilmentImages[lv_indexInner][UnitGetOwner(EventUnit())], lv_behaviorTooltip, PlayerGroupAll());
                        lib90F7C81D_gv_sDAilmentSlotEnabled[lv_indexInner][UnitGetOwner(EventUnit())] = true;
                        lib90F7C81D_gv_sDAilmentTooltip[lv_indexInner][UnitGetOwner(EventUnit())] = lv_behaviorTooltip;
                        lib90F7C81D_gv_sDAilmentImage[lv_indexInner][UnitGetOwner(EventUnit())] = lv_behaviorIcon;
                        lib90F7C81D_gv_sDAilment[lv_indexInner][UnitGetOwner(EventUnit())] = lv_triggeringBehavior;
                        break;
                    }

                }
            }
            else {
                if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
                    if ((UnitIsAlive(EventUnit()) == true)) {
                        autoB723608D_val = UserDataGetString("Ailments", lv_instanceIndex, "Severity", 1);
                        if (autoB723608D_val == "Minor") {
                            lib90F7C81D_gv_revivePenalty[UnitGetOwner(EventUnit())] -= 7;
                        }
                        else if (autoB723608D_val == "Moderate") {
                            lib90F7C81D_gv_revivePenalty[UnitGetOwner(EventUnit())] -= 20;
                        }
                        else if (autoB723608D_val == "Severe") {
                            lib90F7C81D_gv_revivePenalty[UnitGetOwner(EventUnit())] -= 60;
                        }
                        else {
                        }
                    }
                    lv_indexInner = 1;
                    for ( ; ( (autoEE4A6A54_ai >= 0 && lv_indexInner <= autoEE4A6A54_ae) || (autoEE4A6A54_ai < 0 && lv_indexInner >= autoEE4A6A54_ae) ) ; lv_indexInner += autoEE4A6A54_ai ) {
                        if ((lib90F7C81D_gv_sDAilmentSlotEnabled[lv_indexInner][UnitGetOwner(EventUnit())] == true) && (lib90F7C81D_gv_sDAilment[lv_indexInner][UnitGetOwner(EventUnit())] == lv_triggeringBehavior)) {
                            lib90F7C81D_gv_sDAilmentImage[lv_indexInner][UnitGetOwner(EventUnit())] = null;
                            lib90F7C81D_gv_sDAilmentSlotEnabled[lv_indexInner][UnitGetOwner(EventUnit())] = false;
                            lib90F7C81D_gv_sDAilment[lv_indexInner][UnitGetOwner(EventUnit())] = null;
                            libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerAilmentImages[lv_indexInner][UnitGetOwner(EventUnit())], "Assets\\Textures\\black.dds", PlayerGroupAll());
                            libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPlayerAilmentImages[lv_indexInner][UnitGetOwner(EventUnit())], StringToText(""), PlayerGroupAll());
                            break;
                        }

                    }
                    lv_indexInner = 1;
                    for ( ; ( (autoA5024129_ai >= 0 && lv_indexInner <= autoA5024129_ae) || (autoA5024129_ai < 0 && lv_indexInner >= autoA5024129_ae) ) ; lv_indexInner += autoA5024129_ai ) {
                        if ((lib90F7C81D_gv_sDAilmentSlotEnabled[lv_indexInner][UnitGetOwner(EventUnit())] == false) && (lib90F7C81D_gv_sDAilmentSlotEnabled[(lv_indexInner + 1)][UnitGetOwner(EventUnit())] == true)) {
                            lib90F7C81D_gv_sDAilment[lv_indexInner][UnitGetOwner(EventUnit())] = lib90F7C81D_gv_sDAilment[(lv_indexInner + 1)][UnitGetOwner(EventUnit())];
                            lib90F7C81D_gv_sDAilmentImage[lv_indexInner][UnitGetOwner(EventUnit())] = lib90F7C81D_gv_sDAilmentImage[(lv_indexInner + 1)][UnitGetOwner(EventUnit())];
                            lib90F7C81D_gv_sDAilmentTooltip[lv_indexInner][UnitGetOwner(EventUnit())] = lib90F7C81D_gv_sDAilmentTooltip[(lv_indexInner + 1)][UnitGetOwner(EventUnit())];
                            libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerAilmentImages[lv_indexInner][UnitGetOwner(EventUnit())], lib90F7C81D_gv_sDAilmentImage[lv_indexInner][UnitGetOwner(EventUnit())], PlayerGroupAll());
                            libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPlayerAilmentImages[lv_indexInner][UnitGetOwner(EventUnit())], lib90F7C81D_gv_sDAilmentTooltip[lv_indexInner][UnitGetOwner(EventUnit())], PlayerGroupAll());
                            lib90F7C81D_gv_sDAilmentSlotEnabled[lv_indexInner][UnitGetOwner(EventUnit())] = true;
                            lib90F7C81D_gv_sDAilmentSlotEnabled[(lv_indexInner + 1)][UnitGetOwner(EventUnit())] = false;
                            lib90F7C81D_gv_sDAilment[(lv_indexInner + 1)][UnitGetOwner(EventUnit())] = null;
                            lib90F7C81D_gv_sDAilmentImage[(lv_indexInner + 1)][UnitGetOwner(EventUnit())] = "Assets\\Textures\\black.dds";
                            lib90F7C81D_gv_sDAilmentTooltip[(lv_indexInner + 1)][UnitGetOwner(EventUnit())] = StringToText("");
                            libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_sDPlayerAilmentImages[(lv_indexInner + 1)][UnitGetOwner(EventUnit())], "Assets\\Textures\\black.dds", PlayerGroupAll());
                            libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPlayerAilmentImages[(lv_indexInner + 1)][UnitGetOwner(EventUnit())], StringToText(""), PlayerGroupAll());
                        }

                    }
                }

            }
            break;
        }

    }
    lib90F7C81D_gv_sDQueue[UnitGetOwner(EventUnit())] = false;
    lv_triggeringBehavior = null;
    lv_instanceIndex = null;
    lv_behaviorTooltip = null;
    lv_behaviorIcon = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SDAilmentBar_Init () {
    lib90F7C81D_gt_SDAilmentBar = TriggerCreate("lib90F7C81D_gt_SDAilmentBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SD Ping Player
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SDPingPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_playerPinged;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_playerPinged = lib90F7C81D_gf_GetPingedPlayer(EventDialogControl());

    // Conditions
    if (testConds) {
        if (!((lv_playerPinged != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(lv_player), "PingSimpleSmall", UnitGetPosition(lib90F7C81D_gv_playerHeroes[lv_playerPinged]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerPinged, false)), 2.5, 270.0);
    PingSetUnit(PingLastCreated(), lib90F7C81D_gv_playerHeroes[lv_playerPinged]);
    PingSetTooltip(PingLastCreated(), PlayerName(lv_playerPinged));
    lib90F7C81D_gf_FloatingTextforPlayer(lib90F7C81D_gv_playerHeroes[lv_playerPinged], (lib90F7C81D_gf_TextImage((lib90F7C81D_gv_playerHeroImage[lv_playerPinged]), 25) + StringExternal("Param/Value/lib_90F7C81D_D8C8C46E") + TextWithColor(PlayerName(UnitGetOwner(lib90F7C81D_gv_playerHeroes[lv_playerPinged])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lib90F7C81D_gv_playerHeroes[lv_playerPinged]), false)))), lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SDPingPlayer_Init () {
    lib90F7C81D_gt_SDPingPlayer = TriggerCreate("lib90F7C81D_gt_SDPingPlayer_Func");
    TriggerEnable(lib90F7C81D_gt_SDPingPlayer, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SD Inventory
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_SDInventory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_UpdateSDInventory(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_SDInventory_Init () {
    lib90F7C81D_gt_SDInventory = TriggerCreate("lib90F7C81D_gt_SDInventory_Func");
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_SDInventory, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_SDInventory, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_SDInventory, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(lib90F7C81D_gt_SDInventory, null, c_unitInventoryChangeExhausts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_Revive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    int lv_targetplayer;
    int lv_i;
    fixed lv_charge;
    int lv_index;

    // Automatic Variable Declarations
    const int auto3DB17D40_ae = 12;
    const int auto3DB17D40_ai = 1;
    int auto53563FEB_n;
    int auto53563FEB_i;
    unitgroup auto9F630F0B_g;
    int auto9F630F0B_u;
    unit auto9F630F0B_var;
    playergroup auto87453BB9_g;
    int auto87453BB9_var;
    playergroup auto5E48748F_g;
    int auto5E48748F_var;
    const int auto7A4BC332_ae = 49;
    const int auto7A4BC332_ai = 1;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetplayer = UnitGetOwner(lv_target);

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_playersHeroisDead[lv_targetplayer] = false;
    UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[lv_targetplayer], "Revived", lv_target, 1);
    UnitRevive(lv_target);
    DialogControlSendAnimationEvent(lib90F7C81D_gv_NewPlayerDeath, PlayerGroupSingle(lv_targetplayer), "Hide");
    if ((UnitHasBehavior2(lib90F7C81D_gv_deadHeroIndicator[lv_targetplayer], "ReviveEnhancedVitals") == false)) {
        UnitSetPropertyFixed(lv_target, c_unitPropLifePercent, 50.0);
        UnitSetPropertyFixed(lv_target, c_unitPropEnergyPercent, 20.0);
    }
    else {
        UnitSetPropertyFixed(lv_target, c_unitPropLifePercent, 75.0);
        UnitSetPropertyFixed(lv_target, c_unitPropEnergyPercent, 50.0);
    }
    UnitGroupAdd(lib90F7C81D_gv_undeadTargetGroup, lv_target);
    UnitRemove(lib90F7C81D_gv_deadHeroIndicator[lv_targetplayer]);
    libNtve_gf_ShowHideUnit(lv_target, false);
    Wait(0.625, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_target, true);
    lib90F7C81D_gf_RemoveAilmentsFromHero(lv_targetplayer);
    DialogControlSetAnimationState(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame[lv_targetplayer], PlayerGroupAll(), "MOS", "Alive");
    lv_i = 1;
    for ( ; ( (auto3DB17D40_ai >= 0 && lv_i <= auto3DB17D40_ae) || (auto3DB17D40_ai < 0 && lv_i >= auto3DB17D40_ae) ) ; lv_i += auto3DB17D40_ai ) {
        UnitGroupRemove(lib90F7C81D_gv_heroskilledbyplayer[lv_i], lv_target);
    }
    auto53563FEB_n = UnitGroupCount(lib90F7C81D_gv_playerdroppedammo[lv_targetplayer], c_unitCountAlive);
    for (auto53563FEB_i = 1; auto53563FEB_i <= auto53563FEB_n; auto53563FEB_i += 1) {
        if ((UnitInventoryCount(lv_target, c_unitInventoryCountCarried) == lib90F7C81D_gv_inventory.lv_inventorySlotMax[lv_targetplayer])) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(lv_target));
            lv_charge = lib90F7C81D_gf_ItemChargesRemaining(UnitLastCreated(), "AmmoCharges", 1.0);
            UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/lib_90F7C81D_F6C1C299") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/lib_90F7C81D_234E6599") + FixedToText(lv_charge, c_fixedPrecisionAny) + StringExternal("Param/Value/lib_90F7C81D_89E203FA")), StringToText(""));
        }
        else {
            UnitInventoryCreate(lv_target, "Magazines");
        }
    }
    auto9F630F0B_g = lib90F7C81D_gv_playerdroppedammo[lv_targetplayer];
    auto9F630F0B_u = UnitGroupCount(auto9F630F0B_g, c_unitCountAll);
    for (;; auto9F630F0B_u -= 1) {
        auto9F630F0B_var = UnitGroupUnitFromEnd(auto9F630F0B_g, auto9F630F0B_u);
        if (auto9F630F0B_var == null) { break; }
        UnitRemove(auto9F630F0B_var);
    }
    if ((lib90F7C81D_gv_pauseSpawning == false)) {
        CameraPan(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), UnitGetPosition(lv_target), 0.0, -1, 10, false);
    }

    UnitClearSelection(lv_targetplayer);
    UnitSelect(lv_target, UnitGetOwner(lv_target), true);
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_target)), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_7DC51DF6"));
    libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_playerHeroes[lv_targetplayer], libNtve_gf_TextureSelectByID(lib90F7C81D_gv_mOSTexture.lv_camo[lv_targetplayer]));
    lib90F7C81D_gf_AddMaterial(lib90F7C81D_gv_mOSTexture.lv_camo[lv_targetplayer], lv_targetplayer);
    libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_playerHeroes[lv_targetplayer], libNtve_gf_TextureSelectByID(lib90F7C81D_gv_mOSTexture.lv_decal[lv_targetplayer]));
    auto87453BB9_g = lib90F7C81D_gv_players;
    auto87453BB9_var = -1;
    while (true) {
        auto87453BB9_var = PlayerGroupNextPlayer(auto87453BB9_g, auto87453BB9_var);
        if (auto87453BB9_var < 0) { break; }
        if ((PlayerStatus(auto87453BB9_var) == c_playerStatusActive) && (auto87453BB9_var != EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) {
            PlayerSetAlliance(auto87453BB9_var, c_allianceIdVision, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), false);
        }

    }
    lib90F7C81D_gv_uI_DeadHeroCount -= 1;
    lib90F7C81D_gv_revivePenalty[lv_targetplayer] = 0;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_deadHeroLabel, IntToText(lib90F7C81D_gv_uI_DeadHeroCount), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sDTimer[lv_targetplayer], IntToText(lib90F7C81D_gv_reviveCountdown_Label[lv_targetplayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Timer[lv_targetplayer], IntToText(lib90F7C81D_gv_reviveCountdown_Label[lv_targetplayer]), PlayerGroupAll());
    if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel01/List");
        DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupSingle(lv_targetplayer), "Enabled", "True");
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TriggerContainer/AutoReviveButton");
        DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(lv_targetplayer), "Hide");
    }
    lv_target = null;
    if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lv_targetplayer]) == "PlatoonLeader")) {
        UnitCreateEffectUnit(lib90F7C81D_gv_playerHeroes[lv_targetplayer], "SuccessiveStrikeExpire", lib90F7C81D_gv_playerHeroes[lv_targetplayer]);
    }
    auto5E48748F_g = lib90F7C81D_gv_players;
    auto5E48748F_var = -1;
    while (true) {
        auto5E48748F_var = PlayerGroupNextPlayer(auto5E48748F_g, auto5E48748F_var);
        if (auto5E48748F_var < 0) { break; }
        lv_index = 45;
        for ( ; ( (auto7A4BC332_ai >= 0 && lv_index <= auto7A4BC332_ae) || (auto7A4BC332_ai < 0 && lv_index >= auto7A4BC332_ae) ) ; lv_index += auto7A4BC332_ai ) {
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] == false)) {
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[4][(lv_index - 27)], IntToText(lib90F7C81D_gv_bankData.lv_totalRevivePoints[auto5E48748F_var]), PlayerGroupSingle(auto5E48748F_var));
                if ((lv_index == 45) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] == false) && (lib90F7C81D_gv_bankData.lv_totalRevivePoints[auto5E48748F_var] >= 1000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Revivalist I", auto5E48748F_var);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(auto5E48748F_var), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 46) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] == false) && (lib90F7C81D_gv_bankData.lv_totalRevivePoints[auto5E48748F_var] >= 2500)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Revivalist II", auto5E48748F_var);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(auto5E48748F_var), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 47) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] == false) && (lib90F7C81D_gv_bankData.lv_totalRevivePoints[auto5E48748F_var] >= 5000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Revivalist III", auto5E48748F_var);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(auto5E48748F_var), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 48) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] == false) && (lib90F7C81D_gv_bankData.lv_totalRevivePoints[auto5E48748F_var] >= 7500)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Revivalist IV", auto5E48748F_var);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(auto5E48748F_var), "AchievementBadge", "Earned");
                }
                else if ((lv_index == 49) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] == false) && (lib90F7C81D_gv_bankData.lv_totalRevivePoints[auto5E48748F_var] >= 10000)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[lv_index][auto5E48748F_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Revivalist V", auto5E48748F_var);
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(lv_index - 27)], PlayerGroupSingle(auto5E48748F_var), "AchievementBadge", "Earned");
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_Revive_Init () {
    lib90F7C81D_gt_Revive = TriggerCreate("lib90F7C81D_gt_Revive_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_Revive, c_playerAny, "ReviveModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive Countdown
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_ReviveCountdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!((lib90F7C81D_gv_playersHeroisDead[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_playerLeftGame[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gv_reviveCountdown[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] += 2;
    lib90F7C81D_gv_reviveCountdown_Label[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] -= 1;
    lib90F7C81D_gv_sTATS.lv_revivePoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 1;
    lib90F7C81D_gv_bankData.lv_totalRevivePoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 1;
    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[78][EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] == false) && (UnitGetType(lib90F7C81D_gv_playerHeroes[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)]) == "CombatMedic")) {
        lib90F7C81D_gf_NoOneLeftBehind(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    }
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_revive_Counter_Label[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)], IntToText(lib90F7C81D_gv_reviveCountdown_Label[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Revive_Points[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)], IntToText(lib90F7C81D_gv_sTATS.lv_revivePoints[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Timer[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)], IntToText(lib90F7C81D_gv_reviveCountdown_Label[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_sDTimer[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)], IntToText(lib90F7C81D_gv_reviveCountdown_Label[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)]), PlayerGroupAll());
    if ((lib90F7C81D_gv_reviveCountdown[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == 60)) {
        PlayerCreateEffectUnit(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), "ReviveModifyUnit", lib90F7C81D_gv_playerHeroes[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)]);
        lib90F7C81D_gv_reviveCountdown[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] = 0;
        lib90F7C81D_gv_reviveCountdown_Label[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] = 30;
    }
    else {
        DialogControlSetSize(lib90F7C81D_gv_revive_Bar[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)], PlayerGroupAll(), (64 - lib90F7C81D_gv_reviveCountdown[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)]), 12);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_ReviveCountdown_Init () {
    lib90F7C81D_gt_ReviveCountdown = TriggerCreate("lib90F7C81D_gt_ReviveCountdown_Func");
    TriggerAddEventPlayerEffectUsed(lib90F7C81D_gt_ReviveCountdown, c_playerAny, "ReviveDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Player Buttons
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_KickPlayerButtons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerWhoStartedVote;
    string lv_playerBeingKicked;

    // Automatic Variable Declarations
    const int autoE820B01D_n = 15;
    int autoE820B01D_i;
    playergroup auto783D23CD_g;
    int auto783D23CD_var;
    playergroup autoF59DA6F4_g;
    int autoF59DA6F4_var;

    // Variable Initialization
    lv_playerWhoStartedVote = EventPlayer();
    lv_playerBeingKicked = libNtve_gf_DialogItemEditValue(lib90F7C81D_gv_voteKick.lv_editBox, lv_playerWhoStartedVote);

    // Conditions
    if (testConds) {
        if (!((lv_playerBeingKicked != ""))) {
            return false;
        }

        if (!((lv_playerBeingKicked != IntToString(lv_playerWhoStartedVote)))) {
            return false;
        }

        if (!((lib90F7C81D_gv_voteKick.lv_voteKickInProgress == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib90F7C81D_gv_voteKick.lv_voteKickCooldown[lv_playerWhoStartedVote] == false) && (lib90F7C81D_gv_voteKick.lv_voteKickLimit[lv_playerWhoStartedVote] < 3)) {
        lib90F7C81D_gv_voteKick.lv_voteKickCooldown[lv_playerWhoStartedVote] = true;
        lib90F7C81D_gv_voteKick.lv_voteKickInProgress = true;
        lib90F7C81D_gv_voteKick.lv_voteYes += 1;
        lib90F7C81D_gv_voteKick.lv_voteKickLimit[lv_playerWhoStartedVote] += 1;
        lib90F7C81D_gv_voteKick.lv_playerVotedYes[lv_playerWhoStartedVote] = true;
        lib90F7C81D_gv_voteKick.lv_voteTimeRemaining = 15;
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_voteMenuTitle, PlayerName(StringToInt(lv_playerBeingKicked)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_voteTimer, IntToText(lib90F7C81D_gv_voteKick.lv_voteTimeRemaining), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_yesLabel, IntToText(lib90F7C81D_gv_voteKick.lv_voteYes), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_noLabel, IntToText(lib90F7C81D_gv_voteKick.lv_voteNo), PlayerGroupAll());
        DialogControlSendAnimationEvent(lib90F7C81D_gv_voteKick.lv_voteMenuFrame, PlayerGroupAll(), "Start");
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_playerWhoStartedVote) + StringExternal("Param/Value/lib_90F7C81D_A6CA8D81")));
        for (autoE820B01D_i = 1; autoE820B01D_i <= autoE820B01D_n; autoE820B01D_i += 1) {
            Wait(1.0, c_timeGame);
            lib90F7C81D_gv_voteKick.lv_voteTimeRemaining -= 1;
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_voteTimer, IntToText(lib90F7C81D_gv_voteKick.lv_voteTimeRemaining), PlayerGroupAll());
        }
        DialogControlSendAnimationEvent(lib90F7C81D_gv_voteKick.lv_voteMenuFrame, PlayerGroupAll(), "End");
        if ((lib90F7C81D_gv_gameOver == false)) {
            if ((lib90F7C81D_gv_voteKick.lv_voteYes > lib90F7C81D_gv_voteKick.lv_voteNo)) {
                GameOver(StringToInt(lv_playerBeingKicked), c_gameOverDefeat, false, true);
                if ((lib90F7C81D_gv_playerLeftGame[StringToInt(lv_playerBeingKicked)] == false)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(StringToInt(lv_playerBeingKicked)) + StringExternal("Param/Value/lib_90F7C81D_901A212F")));
                }
                auto783D23CD_g = lib90F7C81D_gv_players;
                auto783D23CD_var = -1;
                while (true) {
                    auto783D23CD_var = PlayerGroupNextPlayer(auto783D23CD_g, auto783D23CD_var);
                    if (auto783D23CD_var < 0) { break; }
                    if ((lib90F7C81D_gv_playersHeroisDead[auto783D23CD_var] == true) && (UnitGroupHasUnit(lib90F7C81D_gv_heroskilledbyplayer[StringToInt(lv_playerBeingKicked)], lib90F7C81D_gv_playerHeroes[auto783D23CD_var]) == true)) {
                        PlayerCreateEffectUnit(auto783D23CD_var, "ReviveModifyUnit", lib90F7C81D_gv_playerHeroes[auto783D23CD_var]);
                        lib90F7C81D_gv_reviveCountdown[auto783D23CD_var] = 0;
                        lib90F7C81D_gv_reviveCountdown_Label[auto783D23CD_var] = 30;
                        UnitGroupRemove(lib90F7C81D_gv_heroskilledbyplayer[StringToInt(lv_playerBeingKicked)], lib90F7C81D_gv_playerHeroes[auto783D23CD_var]);
                    }
                }
            }

        }
        DialogControlSendAnimationEvent(lib90F7C81D_gv_voteKick.lv_vKB, PlayerGroupAll(), "On");
        lib90F7C81D_gv_voteKick.lv_voteYes = 0;
        lib90F7C81D_gv_voteKick.lv_voteNo = 0;
        lib90F7C81D_gv_voteKick.lv_voteKickInProgress = false;
        autoF59DA6F4_g = lib90F7C81D_gv_players;
        autoF59DA6F4_var = -1;
        while (true) {
            autoF59DA6F4_var = PlayerGroupNextPlayer(autoF59DA6F4_g, autoF59DA6F4_var);
            if (autoF59DA6F4_var < 0) { break; }
            lib90F7C81D_gv_voteKick.lv_playerVotedYes[autoF59DA6F4_var] = false;
            lib90F7C81D_gv_voteKick.lv_playerVotedNo[autoF59DA6F4_var] = false;
        }
        lib90F7C81D_gf_VotekickCooldown(lv_playerWhoStartedVote);
    }
    else {
        if ((lib90F7C81D_gv_voteKick.lv_voteKickCooldown[lv_playerWhoStartedVote] == true)) {
            UIDisplayMessage(PlayerGroupSingle(lv_playerWhoStartedVote), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_90F7C81D_DADEF265") + FixedToText(lib90F7C81D_gv_voteKick.lv_cooldown[lv_playerWhoStartedVote], 0)));
            SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(lv_playerWhoStartedVote), 100.0, 0.0);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_playerWhoStartedVote), c_messageAreaSubtitle, StringExternal("Param/Value/lib_90F7C81D_0E73E2EC"));
        }
    }
    lv_playerBeingKicked = "";
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_KickPlayerButtons_Init () {
    lib90F7C81D_gt_KickPlayerButtons = TriggerCreate("lib90F7C81D_gt_KickPlayerButtons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Menu Yes/No
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_gt_VoteMenuYesNo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib90F7C81D_gv_voteKick.lv_yesButton) && (lib90F7C81D_gv_voteKick.lv_playerVotedYes[lv_player] == false)) {
        lib90F7C81D_gv_voteKick.lv_playerVotedYes[lv_player] = true;
        lib90F7C81D_gv_voteKick.lv_voteYes += 1;
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_yesLabel, IntToText(lib90F7C81D_gv_voteKick.lv_voteYes), PlayerGroupAll());
        if ((lib90F7C81D_gv_voteKick.lv_playerVotedNo[lv_player] == true)) {
            lib90F7C81D_gv_voteKick.lv_playerVotedNo[lv_player] = false;
            lib90F7C81D_gv_voteKick.lv_voteNo -= 1;
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_noLabel, IntToText(lib90F7C81D_gv_voteKick.lv_voteNo), PlayerGroupAll());
        }
    }
    else {
        if ((EventDialogControl() == lib90F7C81D_gv_voteKick.lv_noButton) && (lib90F7C81D_gv_voteKick.lv_playerVotedNo[lv_player] == false)) {
            lib90F7C81D_gv_voteKick.lv_playerVotedNo[lv_player] = true;
            lib90F7C81D_gv_voteKick.lv_voteNo += 1;
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_noLabel, IntToText(lib90F7C81D_gv_voteKick.lv_voteNo), PlayerGroupAll());
            if ((lib90F7C81D_gv_voteKick.lv_playerVotedYes[lv_player] == true)) {
                lib90F7C81D_gv_voteKick.lv_playerVotedYes[lv_player] = false;
                lib90F7C81D_gv_voteKick.lv_voteYes -= 1;
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_voteKick.lv_yesLabel, IntToText(lib90F7C81D_gv_voteKick.lv_voteYes), PlayerGroupAll());
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib90F7C81D_gt_VoteMenuYesNo_Init () {
    lib90F7C81D_gt_VoteMenuYesNo = TriggerCreate("lib90F7C81D_gt_VoteMenuYesNo_Func");
}

void lib90F7C81D_InitTriggers () {
    lib90F7C81D_gt_PeriodicWeatherEvent_Init();
    lib90F7C81D_gt_RandomWeatherEvent_Init();
    lib90F7C81D_gt_FogEvent_Init();
    lib90F7C81D_gt_RainstormEvent_Init();
    lib90F7C81D_gt_SnowEvent_Init();
    lib90F7C81D_gt_CloudyEvent_Init();
    lib90F7C81D_gt_IntenseSunlightEvent_Init();
    lib90F7C81D_gt_BloodMoonEvent_Init();
    lib90F7C81D_gt_RASprintAbility_Init();
    lib90F7C81D_gt_PlayerQuits_Init();
    lib90F7C81D_gt_PlayerHitStat_Init();
    lib90F7C81D_gt_HeroDeath_Init();
    lib90F7C81D_gt_StartCampaign_Init();
    lib90F7C81D_gt_BossRushWaveDisplay_Init();
    lib90F7C81D_gt_WeaponLogic_Init();
    lib90F7C81D_gt_WeaponCreated_Init();
    lib90F7C81D_gt_ArmorCreated_Init();
    lib90F7C81D_gt_ArmorDamaged_Init();
    lib90F7C81D_gt_ArmorLogic_Init();
    lib90F7C81D_gt_WeaponsItems1NEW_Init();
    lib90F7C81D_gt_WeaponsItems2_Init();
    lib90F7C81D_gt_ItemChargeCombining_Init();
    lib90F7C81D_gt_ItemChargeTooltipUpdate_Init();
    lib90F7C81D_gt_VulcanMk88SentryReload_Init();
    lib90F7C81D_gt_TBICameraSway_Init();
    lib90F7C81D_gt_HeroLevel_Init();
    lib90F7C81D_gt_DexterityPoints_Init();
    lib90F7C81D_gt_SpawnedUnitVision_Init();
    lib90F7C81D_gt_ResearchBeltLink_Init();
    lib90F7C81D_gt_HeartbeatSensor_Init();
    lib90F7C81D_gt_LaserDesignator_Init();
    lib90F7C81D_gt_Bandolier_Init();
    lib90F7C81D_gt_MotionSensorEarlyDetection_Init();
    lib90F7C81D_gt_LNRecruited_Init();
    lib90F7C81D_gt_LNRally_Init();
    lib90F7C81D_gt_LNGroupUpdate_Init();
    lib90F7C81D_gt_LNSITREP_Init();
    lib90F7C81D_gt_LNSubgroupPanel_Init();
    lib90F7C81D_gt_ApplyTrainingToAll_Init();
    lib90F7C81D_gt_ApplyArmoredVestsToNeutral_Init();
    lib90F7C81D_gt_PopoReachesBarracks_Init();
    lib90F7C81D_gt_ReinforcePositionEnd_Init();
    lib90F7C81D_gt_ReinforcePosition_Init();
    lib90F7C81D_gt_AirSupportPings_Init();
    lib90F7C81D_gt_SecurityResearched_Init();
    lib90F7C81D_gt_SDCreationDeath_Init();
    lib90F7C81D_gt_ArchitectResearched_Init();
    lib90F7C81D_gt_ScrapPartsPickup_Init();
    lib90F7C81D_gt_GrappleHookResetHeight_Init();
    lib90F7C81D_gt_IRSensor_Init();
    lib90F7C81D_gt_GapGeneratorShroud_Init();
    lib90F7C81D_gt_MissionItemPickedUp_Init();
    lib90F7C81D_gt_MissionItemDropped_Init();
    lib90F7C81D_gt_FragAbilityText_Init();
    lib90F7C81D_gt_FragItemText_Init();
    lib90F7C81D_gt_RocketWarning_Init();
    lib90F7C81D_gt_CameraShakeSmall_Init();
    lib90F7C81D_gt_CameraShakeLarge_Init();
    lib90F7C81D_gt_WeeklyModifierInit_Init();
    lib90F7C81D_gt_Week1_Init();
    lib90F7C81D_gt_Week2_Init();
    lib90F7C81D_gt_Week3_Init();
    lib90F7C81D_gt_Week4_Init();
    lib90F7C81D_gt_Week5_Init();
    lib90F7C81D_gt_Week6_Init();
    lib90F7C81D_gt_Week7_Init();
    lib90F7C81D_gt_Week8_Init();
    lib90F7C81D_gt_Week9_Init();
    lib90F7C81D_gt_AchievementsPanelInit_Init();
    lib90F7C81D_gt_ConcentratedFire_Init();
    lib90F7C81D_gt_JackOfAllTrades_Init();
    lib90F7C81D_gt_PullThePin_Init();
    lib90F7C81D_gt_NotEnoughEnergy_Init();
    lib90F7C81D_gt_BigPharma_Init();
    lib90F7C81D_gt_FullAutoPlease_Init();
    lib90F7C81D_gt_PointOfImpact_Init();
    lib90F7C81D_gt_BattleReady_Init();
    lib90F7C81D_gt_BoobyTrap_Init();
    lib90F7C81D_gt_EyeSeeYou_Init();
    lib90F7C81D_gt_TargetLockedIn_Init();
    lib90F7C81D_gt_HeavyHitter_Init();
    lib90F7C81D_gt_LNKombat_Init();
    lib90F7C81D_gt_DefenseBudget_Init();
    lib90F7C81D_gt_Rocketeer_Init();
    lib90F7C81D_gt_TeamWork_Init();
    lib90F7C81D_gt_FinishHim_Init();
    lib90F7C81D_gt_DemolitionMan_Init();
    lib90F7C81D_gt_Maelstrom_Init();
    lib90F7C81D_gt_SmokeEm_Init();
    lib90F7C81D_gt_Supersoldier_Init();
    lib90F7C81D_gt_FeeltheForce_Init();
    lib90F7C81D_gt_CombatOrders_Init();
    lib90F7C81D_gt_Omnipotent_Init();
    lib90F7C81D_gt_DeathFromAbove_Init();
    lib90F7C81D_gt_Grenadier_Init();
    lib90F7C81D_gt_AuraLevels_Init();
    lib90F7C81D_gt_WildfireHarvest_Init();
    lib90F7C81D_gt_NoPainNoGain_Init();
    lib90F7C81D_gt_HeavyWeight_Init();
    lib90F7C81D_gt_LetItBurn_Init();
    lib90F7C81D_gt_PlasmaShieldAB_Init();
    lib90F7C81D_gt_JunkYard_Init();
    lib90F7C81D_gt_AssembleThis_Init();
    lib90F7C81D_gt_RageAgainstTheMachine_Init();
    lib90F7C81D_gt__121Jigawatts_Init();
    lib90F7C81D_gt_Robocrap_Init();
    lib90F7C81D_gt_DazedandConfused_Init();
    lib90F7C81D_gt_LeadtoLife_Init();
    lib90F7C81D_gt_Escapist_Init();
    lib90F7C81D_gt_CyborgModes_Init();
    lib90F7C81D_gt_ResetSonicPulseCount_Init();
    lib90F7C81D_gt_ShyGuy_Init();
    lib90F7C81D_gt_SubZero_Init();
    lib90F7C81D_gt_NowYouSeeMeNowYouDontt_Init();
    lib90F7C81D_gt_FindersKeepers_Init();
    lib90F7C81D_gt_HeatSignature_Init();
    lib90F7C81D_gt_MosAchievementEndGameUpdate_Init();
    lib90F7C81D_gt_PwnedAchievement_Init();
    lib90F7C81D_gt_ClanTags_Init();
    lib90F7C81D_gt_CamoTextureChange_Init();
    lib90F7C81D_gt_DecalTextureChange_Init();
    lib90F7C81D_gt_GameplayOptions_Init();
    lib90F7C81D_gt_DropMagazine_Init();
    lib90F7C81D_gt_CriticalHitDamageText_Init();
    lib90F7C81D_gt_TempReloadBuffCyborgSSSU_Init();
    lib90F7C81D_gt_TempReloadBuffCyborgGMDexSU_Init();
    lib90F7C81D_gt_TempReloadSpeedBuffsApply_Init();
    lib90F7C81D_gt_TempReloadSpeedBuffsRemove_Init();
    lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply_Init();
    lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove_Init();
    lib90F7C81D_gt_TempWeaponSpeedBuffSleightofHand_Init();
    lib90F7C81D_gt_ReloadBehaviorApply_Init();
    lib90F7C81D_gt_EncumberedWarning_Init();
    lib90F7C81D_gt_ReloadNPCBehaviorApply_Init();
    lib90F7C81D_gt_StasisWebCutscene_Init();
    lib90F7C81D_gt_CameraButton_Init();
    lib90F7C81D_gt_Command_Init();
    lib90F7C81D_gt_FireteamAlpha_Init();
    lib90F7C81D_gt_FireteamDelta_Init();
    lib90F7C81D_gt_FireteamEcho_Init();
    lib90F7C81D_gt_GraphUpdate_Init();
    lib90F7C81D_gt_GetFPS_Init();
    lib90F7C81D_gt_UpdateFPS_Init();
    lib90F7C81D_gt_PMCKillCounter_Init();
    lib90F7C81D_gt_InventoryHotkeyUsed_Init();
    lib90F7C81D_gt_PingDeadHerosButton_Init();
    lib90F7C81D_gt_PingTeammates_Init();
    lib90F7C81D_gt_NewPlayerDeath_Init();
    lib90F7C81D_gt_PingUsed_Init();
    lib90F7C81D_gt_PingResetTimerExpires_Init();
    lib90F7C81D_gt_UpgradeTooltip_Init();
    lib90F7C81D_gt_VisorTextTimerExpire_Init();
    lib90F7C81D_gt_SITREP_Init();
    lib90F7C81D_gt_TipPanelButtons_Init();
    lib90F7C81D_gt_TipPanelLocation_Init();
    lib90F7C81D_gt_UnitTagListener_Init();
    lib90F7C81D_gt_SpeedLabelThread_Init();
    lib90F7C81D_gt_GameOver_Init();
    lib90F7C81D_gt_QuitGame_Init();
    lib90F7C81D_gt_PlayerLeavesGame_Init();
    lib90F7C81D_gt_SelfCastButtonSwitch_Init();
    lib90F7C81D_gt_SelfCastApplyBehavior_Init();
    lib90F7C81D_gt_SelfCastApplyItemEffect_Init();
    lib90F7C81D_gt_SelfCastHoldFire_Init();
    lib90F7C81D_gt_SelfCastNightVisionOffSwitch_Init();
    lib90F7C81D_gt_SelfCastNightVisionEffect_Init();
    lib90F7C81D_gt_SDAilmentBar_Init();
    lib90F7C81D_gt_SDPingPlayer_Init();
    lib90F7C81D_gt_SDInventory_Init();
    lib90F7C81D_gt_Revive_Init();
    lib90F7C81D_gt_ReviveCountdown_Init();
    lib90F7C81D_gt_KickPlayerButtons_Init();
    lib90F7C81D_gt_VoteMenuYesNo_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib90F7C81D_InitLib_completed = false;

void lib90F7C81D_InitLib () {
    if (lib90F7C81D_InitLib_completed) {
        return;
    }

    lib90F7C81D_InitLib_completed = true;

    lib90F7C81D_InitLibraries();
    lib90F7C81D_InitVariables();
    lib90F7C81D_InitCustomScript();
    lib90F7C81D_InitTriggers();
}

